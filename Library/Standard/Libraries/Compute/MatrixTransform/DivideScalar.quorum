package Libraries.Compute.MatrixTransform

use Libraries.Compute.MatrixTransform.MatrixTransform
use Libraries.Compute.Matrix

/*
    This is a Matrix Transform class to divide every element of a Matrix by a value. 

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.DivideScalar

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 15.0)
            DivideScalar scalar
            scalar:SetValue(matrix, 5.0)
            Matrix total = scalar:Transform(matrix)
            output total:ToText()
        end
    end
*/
class DivideScalar is MatrixTransform
    private number value = 0
    private Matrix scalarMatrix

/*
    This method sets the value for the transform function to apply. 

    Attribute Parameter The value to apply in the transform.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.DivideScalar

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 15.0)
            DivideScalar scalar
            scalar:SetValue(matrix, 5.0)
            Matrix total = scalar:Transform(matrix)
            output total:ToText()
        end
    end
*/
    action SetValue(Matrix matrix, number value)
        scalarMatrix:Fill(matrix:GetRows(), matrix:GetColumns(), value)
        me:value = value
    end
/*
    This method sets the a matrix of values for the transform function to apply. 

    Attribute Parameter The value to apply in the transform.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.DivideScalar

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 15.0)
            DivideScalar scalar
            scalar:SetValue(matrix)
            Matrix total = scalar:Transform(matrix)
            output total:ToText()
        end
    end
*/
    action SetValue(Matrix matrix)
        scalarMatrix = matrix
    end

/*
    This method gets the value that the transform function will apply. 

    Attribute Parameter The value to apply in the transform.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.DivideScalar

    class Main
        action Main
            Matrix matrix
            DivideScalar scalar
            scalar:SetValue(matrix, 10.0)
            output scalar:GetValue()
        end
    end
*/
    action GetValue returns number
        return value
    end

/*
    This method gets the matrix of values that the transform function will apply. 

    Attribute Parameter The value to apply in the transform.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.DivideScalar

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 5.0)
            DivideScalar scalar
            scalar:SetValue(matrix)
            output scalar:GetValueMatrix():ToText()
        end
    end
*/
    action GetValueMatrix returns Matrix
        return scalarMatrix
    end
/*
    This method applies the transform to the Matrix. 

    Attribute Parameter The matrix to transform.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Compute.MatrixTransform.DivideScalar

    class Main
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 15.0)
            DivideScalar scalar
            scalar:SetValue(matrix, 5.0)
            Matrix total = scalar:Transform(matrix)
            output total:ToText()
        end
    end
*/
    action Transform(Matrix matrix) returns Matrix
        Matrix newMatrix
        newMatrix:SetSize(matrix)
        row = 0
        repeat matrix:GetRows() times
            col = 0
            repeat matrix:GetColumns() times
                newMatrix:Set(row, col, matrix:Get(row, col) / scalarMatrix:Get(row, col))
                col = col + 1
            end
            row = row + 1
        end
        return newMatrix
    end
end