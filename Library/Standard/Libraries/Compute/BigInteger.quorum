package Libraries.Compute

/*
The BigInteger class is used to represent integer values that are too large to be
stored in an integer variable. Additionally, it contains actions to perform
expected operations on these BigIntegers, such as addition, division, comparison,
and so on.

Attribute: Example

    use Libraries.Compute.BigInteger

    class Main
        action main
            text value = "2147483648"
            BigInteger largeNumber
            largeNumber:SetValue(value)
            largeNumber = largeNumber:RaiseToPower(2)
            output largeNumber:GetText()
        end
    end
*/

class BigInteger 

    /*
    This action sets the value of the BigInteger object to the numeric value of
    the text parameter. Uses base 10 by default. If you want the number in a different
    base then use the SetValue(text, integer) action instead.

    Attribute: Parameter value The text to convert into a numeric value.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    text value = "3000000000"
    largeNumber:SetValue(value)
    */
    action SetValue(text value)
        SetValue(value, 10)
    end

    /*
    This action sets the value of the BigInteger object to the numeric value of
    the text parameter, in the base of the base parameter (base 2 for binary, 10
    for decimal, and so on). 

    Attribute: Parameter value The text to convert into a numeric value.

    Attribute: Parameter base The base (2, 8, 10, 16, etc.) to convert the value to.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    text value = "3000000000"
    largeNumber:SetValue(value, 10)
    */
    system action SetValue(text value, integer base)

    /*
    This action returns the value stored in the BigInteger in text format. Returns
    the value in base 10 by default. If you want the number in a different base
    then use the GetText(integer) action instead.

    Attribute: Returns Returns the value of the BigInteger in base 10 in text format.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("3000000000")
    output largeNumber:GetText()
    */
    action GetText() returns text
        return GetText(10)
    end

    /*
    This action returns the value stored in the BigInteger in text format. Returns
    the value in whatever base you use as the parameter, such as 2, 10, 16, and so on.

    Attribute: Parameter base The base (2, 8, 10, 16, etc.) to convert the value to.

    Attribute: Returns Returns the value of the BigInteger in the given base in text format.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("3000000000")
    output largeNumber:GetText(2)
    */
    system action GetText(integer base) returns text

    /*
    This action adds two BigIntegers together and returns the result.

    Attribute: Parameter value The value to add to the BigInteger.

    Attribute: Returns Returns the result of adding the two BigIntegers together.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("3000000000")
    largeNumber = largeNumber:Add(largeNumber)
    */
    system action Add(BigInteger value) returns BigInteger

    /*
    This action takes two BigIntegers and performs a bit-wise AND (&) operation
    on them. 

    Attribute: Parameter value The BigInteger to AND with the BigInteger.

    Attribute: Returns Returns the result of AND'ing together the two BigIntegers.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("3000000000")
    largeNumber = largeNumber:And(largeNumber)
    */
    system action And(BigInteger value) returns BigInteger

    /*
    This action takes a BigInteger, gets the complement of it, and then ANDs it
    with the BigInteger this action was called on.

    Attribute: Parameter value The BigInteger that will be complemented and then AND'ed
    together with the BigInteger.

    Attribute: Returns Returns the result of AND'ing together the complement of
    the value with the BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("3000000000")
    largeNumber = largeNumber:AndNot(largeNumber)
    */
    system action AndNot(BigInteger value) returns BigInteger

    /*
    This action compares two BigIntegers and returns whether or not the BigInteger
    that this action was called on is >, =, or < the value passed in, represented
    by 1, 0, and -1 respectively. 

    Attribute: Parameter value The BigInteger to compare against.

    Attribute: Returns Returns 1 if value < BigInteger, 0 if value = BigInteger,
    and -1 if value > BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger largerNumber
    largeNumber:SetValue("3000000000")
    largerNumber:SetValue("3000000001")
    integer result = largeNumber:CompareResult(largerNumber)
    output result
    */
    system action CompareResult(BigInteger value) returns integer

    /*
    This action divides a BigInteger by the given BigInteger value and returns
    the result.

    Attribute: Parameter value The value to divide the BigInteger by.

    Attribute: Returns Returns the result of BigInteger/value as a BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("3000000000")
    smallNumber:SetValue("2")
    largeNumber = largeNumber:Divide(smallNumber)
    output largeNumber:GetText()
    */
    system action Divide(BigInteger value) returns BigInteger

    /*
    This action checks if two BigIntegers are equal. To be equal, the BigIntegers
    must have the same numeric values.

    Attribute: Parameter value The BigInteger to compare against.

    Attribute: Returns Returns the result of the comparison, either true if the
    BigIntegers are the same or false otherwise.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger sameNumber
    BigInteger differentNumber
    largeNumber:SetValue("3000000000")
    sameNumber:SetValue("3000000000")
    differentNumber:SetValue("1")
    output largeNumber:Equals(sameNumber)
    output largeNumber:Equals(differentNumber)
    */
    system action Equals(BigInteger value) returns boolean

    /*
    This action takes a BigInteger and converts it into a number. If the BigInteger
    is too large to be stored in a number, it takes the low-order bits (i.e. 102
    would return 02 if 102 was too large to fit in a number) and gets rid of all
    other values. This loss of precision can result in incorrect values, as well
    as incorrect signs.

    Attribute: Returns Returns the BigInteger value as a number.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("24")
    number value = largeNumber:ToNumber()
    */
    system action ToNumber() returns number

    /*
    This action will find the greatest common divisor between two BigIntegers.

    Attribute: Parameter value The BigInteger to check against for the greatest common divisor.

    Attribute: Returns Returns a BigInteger value that is the greatest common
    divisor of the two BigIntegers.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("24")
    smallNumber:SetValue("12")
    largeNumber = largeNumber:GreatestCommonDivisor(smallNumber)
    // Output will be 12
    output largeNumber:GetText()
    */
    system action GreatestCommonDivisor(BigInteger value) returns BigInteger

    /*
    This action takes a BigInteger and converts it into an integer. If the BigInteger
    is too large to be stored in an integer, it takes the low-order bits (i.e. 102
    would return 02 if 102 was too large to fit in a number) and gets rid of all
    other values. This loss of precision can result in incorrect values, as well
    as incorrect signs.

    Attribute: Returns Returns the BigInteger value as an integer.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("30")
    integer value = largeNumber:ToInteger()
    */
    system action ToInteger() returns integer

    /*
    This action compares two BigIntegers and returns the greater of the two.

    Attribute: Parameter value The BigInteger to compare against.

    Attribute: Returns Returns the BigInteger that is the greater of the two
    BigIntegers.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("300")
    smallNumber:SetValue("1")
    largeNumber = largeNumber:GetMaximumValue(smallNumber)
    */
    system action GetMaximumValue(BigInteger value) returns BigInteger

    /*
    This action compares two BigInteger and returns the lesser of the two.

    Attribute: Parameter value The BigInteger to compare against.

    Attribute: Returns Returns the BigInteger that is the lesser of the two
    BigIntegers.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("300")
    smallNumber:SetValue("1")
    largeNumber = largeNumber:GetMinimumValue(smallNumber)
    */
    system action GetMinimumValue(BigInteger value) returns BigInteger

    /*
    This action takes a BigInteger, divides it by the BigInteger value, and returns
    the remainder as the result. The remainder is always positive. Use the Remainder(BigInteger)
    action if you want negative remainder results.

    Attribute: Parameter value The value to divide the BigInteger by.

    Attribute: Returns Returns the remainder of the division of the BigInteger
    on which this action was called by value.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("10")
    smallNumber:SetValue("6")
    largeNumber = largeNumber:Mod(smallNumber)
    // Output will be 4
    output largeNumber:GetText()
    */
    system action Mod(BigInteger value) returns BigInteger

    /*
    This action multiples two BigIntegers together and returns the result.

    Attribute: Parameter value The value to multiply the BigInteger by.

    Attribute: Returns Returns the result of the multiplication of these two
    BigIntegers as a BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("398")
    smallNumber:SetValue("10")
    largeNumber = largeNumber:Multiply(smallNumber)
    output largeNumber:GetText()
    */
    system action Multiply(BigInteger value) returns BigInteger

    /*
    This action negates the value of a BigInteger, turning a positive number to
    a negative number and a negative number to a positive number.

    Attribute: Returns Returns a BigInteger with the opposite sign than what it
    originally had.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("-10")
    largeNumber = largeNumber:Negate()
    // Output will be 10
    output largeNumber:GetText()
    */
    system action Negate() returns BigInteger

    /*
    This action takes a BigInteger and finds the 2's complement of it. The calculation
    is: x = -x - 1. 

    Attribute: Returns Returns the 2's complement of a BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("10")
    largeNumber = largeNumber:BitwiseNot()
    // Output will be -11
    output largeNumber:GetText()
    */
    system action BitwiseNot() returns BigInteger

    /*
    This action takes two BigIntegers and performs a bitwise OR (|) operation on
    them.
    
    Attribute: Parameter value The BigInteger value that will be logically
    OR'ed with the BigInteger on which this action was called.

    Attribute: Returns Returns a BigInteger that is the result of logically
    OR'ing the two BigIntegers together.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("2")
    smallNumber:SetValue("1")
    largeNumber = largeNumber:Or(smallNumber)
    // Output will be 3
    output largeNumber:GetText()
    */
    system action Or(BigInteger value) returns BigInteger

    /*
    This action raises a BigInteger to the given power and returns the result.

    Attribute: Parameter power The power to raise the BigInteger to.

    Attribute: Returns Returns a BigInteger which is the result of raising the
    BigInteger to the given power.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("9")
    largeNumber = largeNumber:RaiseToPower(2)
    output largeNumber:GetText()
    */
    system action RaiseToPower(integer power) returns BigInteger

    /*
    This action divides a BigInteger by the BigInteger value and returns the
    remainder. This remainder can be negative.

    Attribute: Parameter value The value to divide the BigInteger by.

    Attribute: Returns Returns the remainder of the division operation as a BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("-10")
    smallNumber:SetValue("6")
    largeNumber = largeNumber:Remainder(smallNumber)
    // Output will be -4
    output largeNumber:GetText()
    */
    system action Remainder(BigInteger value) returns BigInteger

    /*
    This action takes a BigInteger and shifts its bits to the left by the given
    amount of positions. This is equivalent to multiplying by 2 for each position
    shifted. So if you shift by 2 positions, you multiply the original number by 4.

    Attribute: Parameter positions The number of positions to shift the BigInteger
    to the left.

    Attribute: Returns Returns a BigInteger that has been shifted to the left
    positions number of times.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("10")
    largeNumber = largeNumber:ShiftLeft(2)
    // Output will be 40
    output largeNumber:GetText()
    */
    system action ShiftLeft(integer positions) returns BigInteger

    /*
    This action takes a BigInteger and shifts its bits to the right by the given
    amount of positions. This is equivalent to dividing by 2 for each position
    shifted. So if you shift by 2 positions, you divide the original number by 4.

    Attribute: Parameter positions The number of positions to shift the BigInteger
    to the right.

    Attribute: Returns Returns a BigInteger that has been shifted to the right
    positions number of times.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("10")
    largeNumber = largeNumber:ShiftRight(2)
    // Output will be 2
    output largeNumber:GetText()
    */
    system action ShiftRight(integer positions) returns BigInteger

    /*
    This action returns the sign of a BigInteger, returning 1 for positive,
    -1 for negative, and 0 for 0.

    Attribute: Returns Returns an integer value, 1, 0, or -1, indicating the sign
    of the BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    largeNumber:SetValue("-10")
    integer result = largeNumber:GetSignValue()
    // Output will be -1
    output result
    */
    system action GetSignValue() returns integer

    /*
    This action subtracts the BigInteger value from the BigInteger on which this
    action was called and returns the result.

    Attribute: Parameter value The value to subtract from the BigInteger.

    Attribute: Returns Returns the result of the BigInteger minus value as a
    BigInteger.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("10")
    smallNumber:SetValue("5")
    largeNumber = largeNumber:Subtract(smallNumber)
    output largeNumber:GetText()
    */
    system action Subtract(BigInteger value) returns BigInteger

    /*
    This action will find the bitwise exclusive-or value of two BigIntegers.
    
    Attribute: Parameter value The BigInteger to exclusive-or with the BigInteger on
    which this action was called.

    Attribute: Returns Returns the result of exclusive-or'ing the two BigIntegers
    together.

    Attribute: Example
    use Libraries.Compute.BigInteger
    BigInteger largeNumber
    BigInteger smallNumber
    largeNumber:SetValue("6")
    smallNumber:SetValue("4")
    largeNumber = largeNumber:ExclusiveOr(smallNumber)
    // Output will be 2
    output largeNumber:GetText()
    */
    system action ExclusiveOr(BigInteger value) returns BigInteger
end