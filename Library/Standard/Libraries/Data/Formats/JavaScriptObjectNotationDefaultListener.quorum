package Libraries.Data.Formats

use Libraries.Containers.Stack
use Libraries.Containers.Array

use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Formats.JavaScriptObjectNotationError
use Libraries.Data.Formats.JavaScriptObjectNotationListener
use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
use Libraries.Data.Formats.JavaScriptObjectNotationToken

/*
This class is an implementation of the JavaScriptObjectNotationListener blueprint class used by the
parser to perform actions when certain parse events occur.

Attribute: Example

use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
use Libraries.Data.Formats.JavaScriptObjectNotationLexer
use Libraries.Data.Formats.JavaScriptObjectNotationParser

class Main
    action Main()
        Parse("")
    end

    action Parse(text value) returns JavaScriptObjectNotation
         JavaScriptObjectNotationDefaultListener listen
         JavaScriptObjectNotationLexer lex
         JavaScriptObjectNotationParser parse
         lex:SetListener(listen)
         parse:SetListener(listen)
         lex:Read(value)
         parse:Parse(lex)
         return listen:GetObject()
    end
end
*/
class JavaScriptObjectNotationDefaultListener is JavaScriptObjectNotationListener
    JavaScriptObjectNotation object = undefined
    Stack<JavaScriptObjectNotation> objects
    Stack<integer> opStack
    constant integer inObject = 0
    constant integer inArray = 1
    constant integer inPair = 2
    constant integer inValue = 3

    /*
    This method returns the JavaScriptObjectNotation object created from the parse string.
    
    Attribute: Returns the JavaScriptObjectNotation object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    class Main
        action Main()
            Parse("")
        end

        action Parse(text value) returns JavaScriptObjectNotation
             JavaScriptObjectNotationDefaultListener listen
             JavaScriptObjectNotationLexer lex
             JavaScriptObjectNotationParser parse
             lex:SetListener(listen)
             parse:SetListener(listen)
             lex:Read(value)
             parse:Parse(lex)
             return listen:GetObject()
        end
    end
    */
    action GetObject returns JavaScriptObjectNotation
        return object
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an EnterStart event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action EnterStart
        JavaScriptObjectNotationListener listener
        listener:EnterStart()
    end
    */
    action EnterStart
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an ExitStart event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action ExitStart
        JavaScriptObjectNotationListener listener
        listener:ExitStart()
    end
    */
    action ExitStart
    end


    /*
    This method is called by the JavaScriptObjectNotationParser on an EnterObject event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action EnterObject
        JavaScriptObjectNotationListener listener
        listener:EnterObject()
    end
    */
    action EnterObject
        JavaScriptObjectNotation newObject

        //this is the root, which is a special object
        if object = undefined
            newObject:SetParent()
            object = newObject
            objects:Push(newObject)

        //this is a new object being pushed on. This object is the 
        //value of another JSON element, so make the "parent" the object
        else 
            if opStack:Peek() not= inValue
                JavaScriptObjectNotation value = objects:Peek()
                newObject:SetObject()
                value:Add(newObject)
                objects:Push(newObject)
            else
                integer top = opStack:Pop()
                if opStack:GetSize() > 0 and opStack:Peek() = inArray
                    JavaScriptObjectNotation value = objects:Peek()
                    newObject:SetObject()
                    newObject:SetArrayItem(true)
                    value:Add(newObject)
                    objects:Push(newObject)
                end
                opStack:Push(top)
            end
        end

        opStack:Push(inObject)
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an ExitObject event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action ExitObject
        JavaScriptObjectNotationListener listener
        listener:ExitObject()
    end
    */
    action ExitObject
        opStack:Pop()
        if not opStack:IsEmpty() and opStack:Peek() not= inValue
            objects:Pop()
        else
            JavaScriptObjectNotation value = objects:Peek()
            if value:IsArrayItem()
                objects:Pop()
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an EnterArray event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action EnterArray
        JavaScriptObjectNotationListener listener
        listener:EnterArray()
    end
    */
    action EnterArray
        //this is the root, which is a special object
        if object = undefined
            JavaScriptObjectNotation newObject
            newObject:SetArray()
            object = newObject
            objects:Push(newObject)
            
        //this element is an array, so set it's type as array
        else 
            JavaScriptObjectNotation value = objects:Peek()
            value:SetArray()
        end

        opStack:Push(inArray)
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an ExitArray event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action ExitArray
        JavaScriptObjectNotationListener listener
        listener:ExitArray()
    end
    */
    action ExitArray
        opStack:Pop()
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an EnterPair event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action Object
        JavaScriptObjectNotationListener listener
        listener:ExitArray()
    end
    */
    action EnterPair
        JavaScriptObjectNotation newObject
        JavaScriptObjectNotation peek = objects:Peek()
        opStack:Push(inPair)
        objects:Push(newObject)
        peek:Add(newObject)
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an ExitPair event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action ExitPair
        JavaScriptObjectNotationListener listener
        listener:ExitPair()
    end
    */
    action ExitPair
        opStack:Pop()
        objects:Pop()
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an EnterValue event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action EnterValue
        JavaScriptObjectNotationListener listener
        listener:EnterValue()
    end
    */
    action EnterValue
        opStack:Push(inValue)
    end

    /*
    This method is called by the JavaScriptObjectNotationParser on an ExitValue event.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener

    private action ExitValue
        JavaScriptObjectNotationListener listener
        listener:ExitValue()
    end
    */
    action ExitValue
        opStack:Pop()
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: terminal The terminal to visit.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ParseValue
        JavaScriptObjectNotationListener listener
        JavaScriptObjectNotationLexer lexer
        JavaScriptObjectNotationToken token = lexer:GetToken(1)
        JavaScriptObjectNotationTerminal terminal
        terminal:SetToken(lexer:GetToken(currentToken))
        if token:tokenID = lexer:TEXT
            listener:VisitText(terminal)
        end
    end
    */
    action VisitText(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotation obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            if peekBehind = inArray
                obj:Add(token:value)
            else
                obj:SetText(token:value)
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: terminal The terminal to visit.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ParseValue
        JavaScriptObjectNotationListener listener
        JavaScriptObjectNotationLexer lexer
        JavaScriptObjectNotationToken token = lexer:GetToken(1)
        JavaScriptObjectNotationTerminal terminal
        terminal:SetToken(lexer:GetToken(currentToken))
        if token:tokenID = lexer:NUMBER
            listener:VisitNumber(terminal)
        end
    end
    */
    action VisitNumber(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotation obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            number val = cast(number, token:value)
            if peekBehind = inArray
                obj:Add(val)
            else
                obj:SetNumber(val)
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: terminal The terminal to visit.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ParseValue
        JavaScriptObjectNotationListener listener
        JavaScriptObjectNotationLexer lexer
        JavaScriptObjectNotationToken token = lexer:GetToken(1)
        JavaScriptObjectNotationTerminal terminal
        terminal:SetToken(lexer:GetToken(currentToken))
        if token:tokenID = lexer:INTEGER
            listener:VisitInteger(terminal)
        end
    end
    */
    action VisitInteger(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotation obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            number numeric = cast(number, token:value)
            integer val = cast(integer, numeric)
            if peekBehind = inArray
                obj:Add(val)
            else
                obj:SetInteger(val)
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: terminal The terminal to visit.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ParseValue
        JavaScriptObjectNotationListener listener
        JavaScriptObjectNotationLexer lexer
        JavaScriptObjectNotationToken token = lexer:GetToken(1)
        JavaScriptObjectNotationTerminal terminal
        terminal:SetToken(lexer:GetToken(currentToken))
        if token:tokenID = lexer:TRUE
            listener:VisitTrue(terminal)
        end
    end
    */
    action VisitTrue(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotation obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            if peekBehind = inArray
                obj:Add(true)
            else
                obj:SetBoolean(true)
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: terminal The terminal to visit.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ParseValue
        JavaScriptObjectNotationListener listener
        JavaScriptObjectNotationLexer lexer
        JavaScriptObjectNotationToken token = lexer:GetToken(1)
        JavaScriptObjectNotationTerminal terminal
        terminal:SetToken(lexer:GetToken(currentToken))
        if token:tokenID = lexer:FALSE
            listener:VisitFalse(terminal)
        end
    end
    */
    action VisitFalse(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotation obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            if peekBehind = inArray
                obj:Add(false)
            else
                obj:SetBoolean(false)
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: terminal The terminal to visit.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ParseValue
        JavaScriptObjectNotationListener listener
        JavaScriptObjectNotationLexer lexer
        JavaScriptObjectNotationToken token = lexer:GetToken(1)
        JavaScriptObjectNotationTerminal terminal
        terminal:SetToken(lexer:GetToken(currentToken))
        if token:tokenID = lexer:NULL
            listener:VisitUndefined(terminal)
        end
    end
    */
    action VisitUndefined(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotation obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            if peekBehind = inArray
                JavaScriptObjectNotation newObject
                newObject:SetUndefined()
                obj:Add(newObject)
            else
                obj:SetUndefined()
            end
        end
    end

    /*
    This method is called by the JavaScriptObjectNotationParser to visit a text object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
    use Libraries.Data.Formats.JavaScriptObjectNotationToken
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    private action ThrowError(JavaScriptObjectNotationToken start, text message, JavaScriptObjectNotationListener listener)
        JavaScriptObjectNotationError error
        error:SetLineNumber(start:startLine)
        error:SetColumnNumber(start:startColumn)
        error:SetIndex(start:startIndex)
        error:SetErrorMessage(message)
        listener:VisitError(error)
    end
    */
    action VisitError(JavaScriptObjectNotationError error)
    end
end