package Libraries.Data.Formats

use Libraries.System.File
use Libraries.Containers.Array

use Libraries.Data.Formats.JavaScriptObjectNotationError
use Libraries.Data.Formats.JavaScriptObjectNotationListener
use Libraries.Data.Formats.JavaScriptObjectNotationToken

/*
This class is used by the JavaScriptObjectNotation object to read in JavaScriptObjectNotation (JSON) 
formatted data from text values or from disk. It can be used directly by an advanced user who wants
to perform custom reading of token data from a file.

Attribute: Example

use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
use Libraries.Data.Formats.JavaScriptObjectNotationLexer
use Libraries.Data.Formats.JavaScriptObjectNotationParser

private action ReadToObject(text value) returns JavaScriptObjectNotation
    if value = undefined
        return undefined
    end
    JavaScriptObjectNotationDefaultListener listen
    JavaScriptObjectNotationLexer lex
    JavaScriptObjectNotationParser parse

    lex:SetListener(listen)
    parse:SetListener(listen)
    lex:Read(value)
    parse:Parse(lex)
    return listen:GetObject()
end
*/
class JavaScriptObjectNotationLexer 
    public constant integer STRING = 0
    public constant integer LEFT_BRACKET = 1
    public constant integer RIGHT_BRACKET = 2
    public constant integer LEFT_BRACE = 3
    public constant integer RIGHT_BRACE = 4
    public constant integer COMMA = 5
    public constant integer COLON = 6
    public constant integer NUMBER = 7
    public constant integer INTEGER = 8
    public constant integer TRUE = 9
    public constant integer FALSE = 10
    public constant integer NULL = 11

    /* The raw tokens from the lex. */
    Array<JavaScriptObjectNotationToken> tokens

    /* An optional listener that can be set to listen to events while lexing. */
    JavaScriptObjectNotationListener listener = undefined

    /*
    This method is used to get the JavaScriptObjectNotationListener object used by the lexer.

    Attribute: Returns The JavaScriptObjectNotationListener.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer

    action GetParserListener(JavaScriptObjectNotationLexer lex) returns JavaScriptObjectNotationListener
        return lex:GetListener()
    end
    */
    action GetListener returns JavaScriptObjectNotationListener
        return listener
    end

    /*
    This method is used to set the JavaScriptObjectNotationListener object used by the lexer.

    Attribute: Parameter listener The JavaScriptObjectNotationListener to set.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    private action ReadToObject(text value) returns JavaScriptObjectNotation
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        parse:Parse(lex)
        return listen:GetObject()
    end
    */
    action SetListener(JavaScriptObjectNotationListener listener)
        me:listener = listener
    end

    /*
    This method returns a token at a particular position in the lex.

    Attribute: Parameter i The index of the JavaScriptObjectNotationToken to get.
    
    Attribute: Returns The JavaScriptObjectNotationToken.
    
    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationToken

    JavaScriptObjectNotationDefaultListener listener

    action Start
        listener:EnterStart()
        currentToken = 0
        JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
        if token:tokenID = lexer:LEFT_BRACKET
            ParseObject()
        else 
            ThrowError(token, undefined, "I can only begin reading files that start with a left bracket")
        end
        listener:ExitStart()
    end
    */
    action GetToken(integer i) returns JavaScriptObjectNotationToken
        return tokens:Get(i)
    end

    /*
    This method returns the number of tokens in the token stream.

    Attribute: Returns The number of tokens in the stream.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationToken

    private action GetNumberOfTokens(text value) returns integer
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        return lex:GetSize()
    */
    action GetSize returns integer
        return tokens:GetSize()
    end

    /*
    This method empties the list of tokens.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationToken

    private action EmptyTokens(text value)
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        lex:Empty()
    */
    action Empty
        tokens:Empty()
    end

    /*
    This method Returns whether or not there are tokens in the token stream

    Attribute: Returns A boolean value to indicate if the stream is empty.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationToken

    private action ReadToObject(text value)
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        if lex:IsEmpty()
            output "No tokens"
        else
            parse:Parse(lex)
        end
    end
    */
    action IsEmpty returns boolean
        return tokens:IsEmpty()
    end

    /*
    This method is used to read a text value and converts it into a token strea.

    Attribute: Parameter value The text value to lex.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    private action ReadToObject(text value) returns JavaScriptObjectNotation
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        parse:Parse(lex)
        return listen:GetObject()
    end
    */
    action Read(text value)
        text quote = value:GetDoubleQuote()
        text line = value:GetCarriageReturn() + value:GetLineFeed()
        integer currentLine = 0
        integer currentColumn = -1
        text string = ""
        i = 0
        repeat while i < value:GetSize()
            text char = value:GetCharacter(i)
            JavaScriptObjectNotationToken token

            if char = value:GetLineFeed()
                currentLine = currentLine + 1
                currentColumn = -1
            end
            currentColumn = currentColumn + 1

            token:startLine = currentLine
            token:startColumn = currentColumn
            token:startIndex = i

            if char = quote
                //greedily look forward until the next double quote.
                string = ""//quote
                j = i + 1
                repeat while j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = quote
                        i = j
                        token:tokenID = STRING
                        token:value = string
                        string = ""
                        j = value:GetSize() + 1
                        tokens:Add(token)
                    else 
                        string = string + char2
                    end
                    currentColumn = currentColumn + 1
                    j = j + 1
                end
            elseif char = "-" or IsDigit(char)
                string = char
                j = i + 1
                digitCount = 0
                if IsDigit(char)
                    digitCount = 1
                end

                done = false
                repeat while j < value:GetSize() and not done
                    char2 = value:GetCharacter(j)
                    if IsDigit(char2)
                        string = string + char2
                        digitCount = digitCount + 1
                        currentColumn = currentColumn + 1
                        j = j + 1
                    else //stop at the first non-digit
                        if digitCount = 0
                            ThrowError(currentLine,currentColumn + 4,j, "A Minus (-) must be followed by any number of digits (0-9)")
                        end
                        done = true
                    end
                end

                //we now have a bunch of digits. The next character is either 
                //an E, an e, or a dot.
                if j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = "."
                        token:tokenID = NUMBER
                        string = string + char2
                        j = j + 1
                        done = false
                        digitCount = 0
                        repeat while j < value:GetSize() and not done
                            char2 = value:GetCharacter(j)
                            if IsDigit(char2)
                                string = string + char2
                                digitCount = digitCount + 1
                                currentColumn = currentColumn + 1
                                j = j + 1
                            else //stop at the first non-digit
                                if digitCount = 0
                                    ThrowError(currentLine,currentColumn + 4,j, "A period (.) must be followed by any number of digits (0-9)")
                                end
                                done = true
                            end
                        end
                    else
                        token:tokenID = INTEGER
                    end
                end

                //whether there was a dot or not, the last thing 
                //we might have is the exponent
                if j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = "e" or char2 = "E"
                        token:tokenID = NUMBER
                        string = string + char2
                        j = j + 1

                        //now check if is a plus or a minus
                        if j < value:GetSize()
                            char2 = value:GetCharacter(j)
                            if char2 = "+" or char2 = "-"
                                string = string + char2
                                j = j + 1
                            end
                        end

                        //now add more integers
                        done = false
                        digitCount = 0
                        repeat while j < value:GetSize() and not done
                            char2 = value:GetCharacter(j)
                            if IsDigit(char2)
                                string = string + char2
                                j = j + 1
                                currentColumn = currentColumn + 1
                                digitCount = digitCount + 1
                            else //stop at the first non-digit
                                if digitCount = 0
                                    ThrowError(currentLine,currentColumn + 4,j, "An exponent (e or E) must be followed by any number of digits (0-9)")
                                end
                                done = true
                            end
                        end
                    end
                end

                i = j - 1
                token:value = string
                tokens:Add(token)
            elseif char = "{"
                token:tokenID = LEFT_BRACKET
                token:value = "{"
                tokens:Add(token)
            elseif char = "}"
                token:tokenID = RIGHT_BRACKET
                token:value = "}"
                tokens:Add(token)
            elseif char = "["
                token:tokenID = LEFT_BRACE
                token:value = "["
                tokens:Add(token)
            elseif char = "]"
                token:tokenID = RIGHT_BRACE
                token:value = "]"
                tokens:Add(token)
            elseif char = ":"
                token:tokenID = COLON
                token:value = ":"
                tokens:Add(token)
            elseif char = ","
                token:tokenID = COMMA
                token:value = ","
                tokens:Add(token)
            elseif char = "t"
                //check the next three characters to see if they match "true"
                //if they don't, this is an error
                if i + 3 < value:GetSize()
                    char = value:GetCharacter(i + 1)
                    if char not= "r"
                        ThrowError(currentLine,currentColumn + 1,i + 1, "I was not expecting the character " + char + " when trying to evaluate a token that starts with t")
                    end

                    char = value:GetCharacter(i + 2)
                    if char not= "u"
                        ThrowError(currentLine,currentColumn + 2,i + 2, "I was not expecting the character " + char + " when trying to evaluate a token that starts with tr")
                    end

                    char = value:GetCharacter(i + 3)
                    if char not= "e"
                        ThrowError(currentLine,currentColumn + 3,i + 3, "I was not expecting the character " + char + " when trying to evaluate a token that starts with tru")
                    end

                    token:tokenID = TRUE
                    token:value = "true"
                    tokens:Add(token)
                else //this is a lexer error, throw an error message
                    ThrowError(currentLine,currentColumn,i, "I found a token that starts with the letter t, but the stream stops before I can process the word true")
                end
            elseif char = "f"
                //check the next three characters to see if they match "false"
                //if they don't, this is an error
                if i + 4 < value:GetSize()
                    char = value:GetCharacter(i + 1)
                    if char not= "a"
                        ThrowError(currentLine,currentColumn + 1,i + 1, "I was not expecting the character " + char + " when trying to evaluate a token that starts with f")
                    end

                    char = value:GetCharacter(i + 2)
                    if char not= "l"
                        ThrowError(currentLine,currentColumn + 2,i + 2, "I was not expecting the character " + char + " when trying to evaluate a token that starts with fa")
                    end

                    char = value:GetCharacter(i + 3)
                    if char not= "s"
                        ThrowError(currentLine,currentColumn + 3,i + 3, "I was not expecting the character " + char + " when trying to evaluate a token that starts with fal")
                    end

                    char = value:GetCharacter(i + 4)
                    if char not= "e"
                        ThrowError(currentLine,currentColumn + 4,i + 4, "I was not expecting the character " + char + " when trying to evaluate a token that starts with fals")
                    end

                    token:tokenID = FALSE
                    token:value = "false"
                    tokens:Add(token)
                else //this is a lexer error, throw an error message
                    ThrowError(currentLine,currentColumn,i, "I found a token that starts with the letter f, but the stream stops before I can process the word false")
                end
            elseif char = "n"
                //check the next three characters to see if they match "true"
                //if they don't, this is an error
                if i + 3 < value:GetSize()
                    char = value:GetCharacter(i + 1)
                    if char not= "u"
                        ThrowError(currentLine,currentColumn + 1,i + 1, "I was not expecting the character " + char + " when trying to evaluate a token that starts with n")
                    end

                    char = value:GetCharacter(i + 2)
                    if char not= "l"
                        ThrowError(currentLine,currentColumn + 2,i + 2, "I was not expecting the character " + char + " when trying to evaluate a token that starts with nu")
                    end

                    char = value:GetCharacter(i + 3)
                    if char not= "l"
                        ThrowError(currentLine,currentColumn + 3,i + 3, "I was not expecting the character " + char + " when trying to evaluate a token that starts with nul")
                    end

                    token:tokenID = NULL
                    token:value = "null"
                    tokens:Add(token)
                else //this is a lexer error, throw an error message
                    ThrowError(currentLine,currentColumn,i, "I found a token that starts with the letter n, but the stream stops before I can process the word null")
                end
            end

            token:endLine = currentLine
            token:endColumn = currentColumn
            token:endIndex = i
            i = i + 1
        end
    end

    /*
    This method is used to read a text file and converts it into a token strea.

    Attribute: Parameter file The file to read and lex.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    private action ReadToObject(File file) returns JavaScriptObjectNotation
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(file)
        parse:Parse(lex)
        return listen:GetObject()
    end
    */
    action Read(File file)
        text value = file:Read()
        Read(value)
    end

    /* Private helper action for determining if a value is a digit. */
    private action IsDigit(text char) returns boolean
        if  char = "0" or char = "1" or char = "2" or char = "3" or char = "4" or
            char = "5" or char = "6" or char = "7" or char = "8" or char = "9"
            return true
        end
        return false
    end

    /* 
    This method handles error message throwing if something goes wrong.

    Attribute: Parameter line The line where the error occurred.
    Attribute: Parameter line The column where the error occurred.
    Attribute: Parameter line The index of where the error occurred.
    Attribute: Parameter line The message to throw.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    JavaScriptObjectNotationDefaultListener listen

    private action Start
        listener:EnterStart()
        currentToken = 0
        JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
        if token:tokenID = lexer:LEFT_BRACKET
            ParseObject()
        elseif token:tokenID = lexer:LEFT_BRACE
            ParseArray()
        else 
            ThrowError(token, undefined, "I can only begin reading files that start with a left bracket ({) or a left brace {[), but I found a, " + token:value)
        end
        listener:ExitStart()
    end
    */
    action ThrowError(integer line, integer column, integer index, text message)
        if listener not= undefined
            JavaScriptObjectNotationError error
            error:SetLineNumber(line)
            error:SetColumnNumber(column)
            error:SetIndex(index)
            error:SetLineNumberEnd(line)
            error:SetColumnNumberEnd(column)
            error:SetIndexEnd(index)
            error:SetErrorMessage(message)
            listener:VisitError(error)
        end
    end
end