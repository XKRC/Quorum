package Libraries.Data.Formats

use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Containers.Stack

use Libraries.Data.Formats.JavaScriptObjectNotationError
use Libraries.Data.Formats.JavaScriptObjectNotationLexer
use Libraries.Data.Formats.JavaScriptObjectNotationListener
use Libraries.Data.Formats.JavaScriptObjectNotationTerminal
use Libraries.Data.Formats.JavaScriptObjectNotationToken

/*
This class is used by the JavaScriptObjectNotation object to read in JavaScriptObjectNotation (JSON) 
formatted data from text values or from disk. It can be used directly by an advanced user who wants
to perform custom parsing.

Attribute: Example

use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
use Libraries.Data.Formats.JavaScriptObjectNotationLexer
use Libraries.Data.Formats.JavaScriptObjectNotationParser

private action ReadToObject(text value) returns JavaScriptObjectNotation
    if value = undefined
        return undefined
    end
    JavaScriptObjectNotationDefaultListener listen
    JavaScriptObjectNotationLexer lex
    JavaScriptObjectNotationParser parse

    lex:SetListener(listen)
    parse:SetListener(listen)
    lex:Read(value)
    parse:Parse(lex)
    return listen:GetObject()
end
*/
class JavaScriptObjectNotationParser
    constant integer OBJECT_STATE = 0
    integer currentToken = -1
    JavaScriptObjectNotationLexer lexer = undefined
    JavaScriptObjectNotationListener listener

    /*
    This method is used to get the JavaScriptObjectNotationListener object used by the parser.

    Attribute: Returns The JavaScriptObjectNotationListener.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotationListener
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    action GetParserListener(JavaScriptObjectNotationParser parse) returns JavaScriptObjectNotationListener
        return parse:GetListener()
    end
    */
    action GetListener returns JavaScriptObjectNotationListener
        return listener
    end

    /*
    This method is used to set the JavaScriptObjectNotationListener object used by the parser.

    Attribute: Parameter listener The JavaScriptObjectNotationListener listener to set.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    private action ReadToObject(text value) returns JavaScriptObjectNotation
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        parse:Parse(lex)
        return listen:GetObject()
    end
    */
    action SetListener(JavaScriptObjectNotationListener listener)
        me:listener = listener
    end
    
    /*
    This method is used to start the JavaScriptObjectNotation parser.

    Attribute: Parameter listener The JavaScriptObjectNotationListener listener to parse.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
    use Libraries.Data.Formats.JavaScriptObjectNotationLexer
    use Libraries.Data.Formats.JavaScriptObjectNotationParser

    private action ReadToObject(text value) returns JavaScriptObjectNotation
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        parse:Parse(lex)
        return listen:GetObject()
    end
    */
    action Parse(JavaScriptObjectNotationLexer lexerLocal)
        lexer = lexerLocal
        if lexer:IsEmpty()
            return now
        end
        Start()
    end

    private action Start
        listener:EnterStart()
        currentToken = 0
        JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
        if token:tokenID = lexer:LEFT_BRACKET
            ParseObject()
        elseif token:tokenID = lexer:LEFT_BRACE
            ParseArray()
        else 
            ThrowError(token, undefined, "I can only begin reading files that start with a left bracket ({) or a left brace {[), but I found a, " + token:value)
        end
        listener:ExitStart()
    end

    private action ParseObject
        repeat while currentToken < lexer:GetSize()
            JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:LEFT_BRACKET
                listener:EnterObject()

                //look ahead 1. If it's a right brace, we're done. Otherwise, it's a pair
                currentToken = currentToken + 1
                if currentToken < lexer:GetSize()
                    JavaScriptObjectNotationToken value = lexer:GetToken(currentToken)
                    if token:tokenID = lexer:RIGHT_BRACKET
                        currentToken = currentToken + 1 //skip this token
                        listener:ExitObject()
                        return now
                    end
                end

                ParsePair()
                done = false
                repeat until done
                    if currentToken < lexer:GetSize()
                        JavaScriptObjectNotationToken value = lexer:GetToken(currentToken)
                        if value:tokenID = lexer:COMMA
                            currentToken = currentToken + 1 //skip the comma
                            ParsePair()
                        else
                            done = true
                        end
                    else 
                        done = true
                    end    
                end

                token = lexer:GetToken(currentToken)
                if token:tokenID = lexer:RIGHT_BRACKET
                    listener:ExitObject()
                    return now
                else 
                    ThrowError(token, undefined, "Objects must end with a right bracket (}), but I found a " + token:value)
                    return now
                end
            end
            currentToken = currentToken + 1
        end
    end

    private action ParsePair
        listener:EnterPair()
        if currentToken < lexer:GetSize()
            JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:STRING
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitText(terminal)
            else //throw an error
                ThrowError(token, undefined, "I was expecting a string here, but found a " + token:value)
                return now
            end
            currentToken = currentToken + 1
        end

        if currentToken < lexer:GetSize()
            JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
            if token:tokenID not= lexer:COLON //throw an error
                ThrowError(token, undefined, "I was expecting a colon (:) here, but found a " + token:value)
                return now
            end
            currentToken = currentToken + 1
        end

        if currentToken < lexer:GetSize()
            ParseValue()
        end
        listener:ExitPair()
    end

    private action ThrowError(JavaScriptObjectNotationToken start, 
        JavaScriptObjectNotationToken finish,
        text message)
        //create the error and send it to the listener
        if listener not= undefined
            JavaScriptObjectNotationError error
            error:SetLineNumber(start:startLine)
            error:SetColumnNumber(start:startColumn)
            error:SetIndex(start:startIndex)

            if finish not= undefined
                error:SetLineNumberEnd(finish:endLine)
                error:SetColumnNumberEnd(finish:endColumn)
                error:SetIndexEnd(finish:endIndex)
            else 
                error:SetLineNumberEnd(start:endLine)
                error:SetColumnNumberEnd(start:endColumn)
                error:SetIndexEnd(start:endIndex)
            end
            error:SetErrorMessage(message)
            listener:VisitError(error)
        end
    end

    private action ParseValue
        listener:EnterValue()
        if currentToken < lexer:GetSize()
            JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:STRING
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitText(terminal)
            elseif token:tokenID = lexer:NUMBER
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitNumber(terminal)
            elseif token:tokenID = lexer:INTEGER
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitInteger(terminal)
            elseif token:tokenID = lexer:LEFT_BRACKET
                ParseObject()
            elseif token:tokenID = lexer:LEFT_BRACE
                ParseArray()
            elseif token:tokenID = lexer:TRUE
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitTrue(terminal)
            elseif token:tokenID = lexer:FALSE
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitFalse(terminal)
            elseif token:tokenID = lexer:NULL
                JavaScriptObjectNotationTerminal terminal
                terminal:SetToken(lexer:GetToken(currentToken))
                listener:VisitUndefined(terminal)
            else 
                ThrowError(token, undefined, "I did not understand what was meant by the phrase, " + token:value)
            end
            currentToken = currentToken + 1
        end
        listener:ExitValue()
    end

    private action ParseArray
        repeat while currentToken < lexer:GetSize()
            JavaScriptObjectNotationToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:LEFT_BRACE
                listener:EnterArray()

                //look ahead 1. If it's a right brace, we're done. Otherwise, it's a pair
                currentToken = currentToken + 1
                if currentToken < lexer:GetSize()
                    JavaScriptObjectNotationToken value = lexer:GetToken(currentToken)
                    if value:tokenID = lexer:RIGHT_BRACE
                        //nothing more to do here
                        listener:ExitArray()
                        return now
                    end
                end

                ParseValue()
                done = false
                repeat until done
                    if currentToken < lexer:GetSize()
                        JavaScriptObjectNotationToken value = lexer:GetToken(currentToken)
                        if value:tokenID = lexer:COMMA
                            currentToken = currentToken + 1 //skip the comma
                            ParseValue()
                        else
                            done = true
                        end
                    else 
                        done = true
                    end    
                end

                token = lexer:GetToken(currentToken)
                if token:tokenID = lexer:RIGHT_BRACE
                    listener:ExitArray()
                    return now
                else 
                    ThrowError(token, undefined, "Objects must end with a right brace (]), but I found a " + token:value)
                    return now
                end
            end
            currentToken = currentToken + 1
        end
    end
end