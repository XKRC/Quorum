package Libraries.Data.Formats

use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotationDefaultListener
use Libraries.Data.Formats.JavaScriptObjectNotationLexer
use Libraries.Data.Formats.JavaScriptObjectNotationParser

/*
This class can read in JavaScriptObjectNotation (JSON) formatted data from text values or 
from disk. When it reads them in, the data is stored inside this object. Alternatively, this 
class allows the programmer to set a listener object that can receive information about how 
the JSON file is being parsed as it occurs. 

Attribute: Example

use Libraries.Data.Formats.JavaScriptObjectNotation

class Main
   action Main
        text dq = ""
        dq = dq:GetDoubleQuote()
        text myValue = "{" + dq + "data" + dq + ": [21.5, 22.7, 23.9]}"
        JavaScriptObjectNotation json
        json:Read(myValue)
        output json:ToText()
        output json:GetValue("data")
        i = 0
        repeat while i < json:GetSize()
            JavaScriptObjectNotation array = json:Get(i)
            if array:GetKey() = "data"
                j = 0
                repeat while j < array:GetSize()
                    JavaScriptObjectNotation item = array:Get(j)
                    output item:GetNumber()
                    j = j + 1
                end
            end
            i = i + 1
        end
   end
end
*/

class JavaScriptObjectNotation
    private Array<JavaScriptObjectNotation> array
    private text textValue = ""
    private number numberValue = 0.0
    private integer integerValue = 0
    private boolean booleanValue = false
    private integer type = 0
    private constant integer UNDEFINED = 0
    private constant integer INTEGER = 1
    private constant integer NUMBER = 2
    private constant integer TEXT = 3
    private constant integer BOOLEAN = 4
    private constant integer ARRAY = 6
    private constant integer OBJECT = 7
    private constant integer PARENT = 8
    private text key = ""
    private boolean object = false
    private integer spaces = 4
    private boolean prettyPrint = false
    private boolean arrayItem = false

    private action HasKey() returns boolean
        return key not= ""
    end

    private action IsPrimitive() returns boolean
        return IsInteger() or IsNumber() or IsBoolean() or IsText()
    end

    /*
        This item is used internally by the parser to check if an object as an array item.

    Attribute: Returns A boolean value to indicate if the object is an array item.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:IsArrayItem()
       end
    end
    */
    action IsArrayItem() returns boolean
        return arrayItem
    end
    
    /*
        This item is used internally by the parser to designate an object as an array item.

    Attribute: Parameter value A boolean value to indicate if the object is an array item.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:SetArrayItem(true)
       end
    end
    */
    action SetArrayItem(boolean value)
        arrayItem = value
    end
    /*
    Use this method to add a nested JavaScriptObjectNotation object. The object must already have a key set.

    Attribute: Parameter value The JavaScriptObjectNotation value object to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation data
            data:Add("item1", "a")
            data:Add("item2", "b")
            data:Add("item3", "c")
            data:SetKey("detail")

            JavaScriptObjectNotation json
            json:Add("data1", "A")
            json:Add("data2", "B")
            json:Add(data)

            output json:ToText()
       end
    end
    */

    action Add(JavaScriptObjectNotation object)
        object:SetPrettyPrint(IsPrettyPrint())
        if IsUndefined()
            SetObject()
        end
        if IsArray()
            object:SetArrayItem(true)
        end
        array:Add(object)
    end

    /*
    Use this method to add a nested JavaScriptObjectNotation object with a key. If the object you pass as a parameter already has a key, it will be nested inside the new key.

    Attribute: Parameter key The key value to add.
    Attribute: Parameter value The JavaScriptObjectNotation value object to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation data
            data:Add("item1", "a")
            data:Add("item2", "b")
            data:Add("item3", "c")

            JavaScriptObjectNotation json
            json:Add("data1", "A")
            json:Add("data2", "B")
            json:Add("detail", data)

            output json:ToText()
       end
    end
    */

    action Add(text key, JavaScriptObjectNotation object)
        if IsUndefined()
            SetObject()
        end
        if object:HasKey()
            JavaScriptObjectNotation objectToAdd
            objectToAdd:SetPrettyPrint(IsPrettyPrint())
            objectToAdd:SetObject()
            objectToAdd:SetKey(key)
            objectToAdd:Add(object)
            array:Add(objectToAdd)
        else
            if object:IsUndefined()
                object:SetObject()
            end
            object:SetKey(key)
            array:Add(object)
        end
    end

    /*
    Use this method to add a boolean item to a JavaScriptObjectNotation object.

    Attribute: Parameter key The key value to add.
    Attribute: Parameter value The boolean value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", true)
            json:Add("item2", false)
            output json:ToText()
       end
    end
    */

    action Add(text key, boolean value)
        if IsUndefined()
            SetObject()
        end
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetBoolean(value)
        object:SetKey(key)
        array:Add(object)
    end

    /*
    Use this method to add an integer item to a JavaScriptObjectNotation object.

    Attribute: Parameter key The key value to add.
    Attribute: Parameter value The integer value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2)
            output json:ToText()
       end
    end
    */

    action Add(text key, integer value)
        if IsUndefined()
            SetObject()
        end
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetInteger(value)
        object:SetKey(key)
        array:Add(object)
    end

    /*
    Use this method to add a number item to a JavaScriptObjectNotation object.

    Attribute: Parameter key The key value to add.
    Attribute: Parameter value The number value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1.1)
            json:Add("item2", 2.2)
            output json:ToText()
       end
    end
    */

    action Add(text key, number value)
        if IsUndefined()
            SetObject()
        end
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetNumber(value)
        object:SetKey(key)
        array:Add(object)
    end

    /*
    Use this method to add a text item to a JavaScriptObjectNotation object.

    Attribute: Parameter key The key value to add.
    Attribute: Parameter value The text value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", "First Name")
            json:Add("item2", "Last Name")
            output json:ToText()
       end
    end
    */
    action Add(text key, text value)
        if IsUndefined()
            SetObject()
        end
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetText(value)
        object:SetKey(key)
        array:Add(object)
    end

    /*
    Use this method to add a integer item to a JavaScriptObjectNotation array object.

    Attribute: Parameter value The integer value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:SetKey("myArray")
            json:SetArray()
            json:Add(1)
            json:Add(2)
            json:Add(3)
            output json:ToText()
       end
    end
    */
    action Add(integer value)
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetInteger(value)
        if IsArray()
            object:SetArrayItem(true)
        end
        array:Add(object)
    end

    /*
    Use this method to add a number item to a JavaScriptObjectNotation array object.

    Attribute: Parameter value The number value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:SetKey("myArray")
            json:SetArray()
            json:Add(1.1)
            json:Add(2.1)
            json:Add(3.1)
            output json:ToText()
       end
    end
    */
    action Add(number value)
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetNumber(value)
        if IsArray()
            object:SetArrayItem(true)
        end
        array:Add(object)
    end

    /*
    Use this method to add a boolean item to a JavaScriptObjectNotation array object.

    Attribute: Parameter value The boolean value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:SetKey("myArray")
            json:SetArray()
            json:Add(true)
            json:Add(true)
            json:Add(false)
            output json:ToText()
       end
    end
    */
    action Add(boolean value)
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetBoolean(value)
        if IsArray()
            object:SetArrayItem(true)
        end
        array:Add(object)
    end

    /*
    Use this method to add a text item to a JavaScriptObjectNotation array object.

    Attribute: Parameter value The text value to add.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:SetKey("myArray")
            json:SetArray()
            json:Add("one")
            json:Add("two")
            json:Add("three")
            output json:ToText()
       end
    end
    */
    action Add(text value)
        JavaScriptObjectNotation object
        object:SetPrettyPrint(IsPrettyPrint())
        object:SetText(value)
        if IsArray()
            object:SetArrayItem(true)
        end
        array:Add(object)
    end

    /*
    Use this method to return one of the items in the json object by it's index number

    Attribute: Parameter index The index value of the JavaScriptObjectNotation object.

    Attribute: Returns The JavaScriptObjectNotation object at the specified index.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", true)
            json:Add("item2", 5)

            JavaScriptObjectNotation item = json:Get(0)
            if item:GetBoolean() = true
                output "Item 1 was true"
            else
                output "Item 1 was false"
            end
       end
    end
    */

    action Get(integer index) returns JavaScriptObjectNotation
        JavaScriptObjectNotation value = array:Get(index)
        return value
    end

    /*
    Use this method to get the boolean value of a JavaScriptObjectNotation object

    Attribute: Returns The boolean value of the object if applicable.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", true)

            JavaScriptObjectNotation item = json:Get(0)
            output item:GetBoolean()
       end
    end
    */

    action GetBoolean returns boolean
        return booleanValue
    end

    /*
    Use this method to get the key (or name) of a JavaScriptObjectNotation object

    Attribute: Returns The name of the JavaScriptObjectNotation object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", true)

            JavaScriptObjectNotation item = json:Get(0)
            output item:GetKey()
       end
    end
    */

    action GetKey returns text
        return key
    end

    /*
    This method returns an array of the key names inside a JavaScriptObjectNotation object

    Attribute: Returns An array of key values in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Containers.Array

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2)
            json:Add("item3", 3)

            Array<text> keys = json:GetKeys()
            i = 0
            repeat keys:GetSize() times
                key = keys:Get(i)
                output key + " => " + json:GetValue(key)
                i = i + 1
            end
       end
    end
    */

    action GetKeys returns Array<text>
        Array<text> result
        Iterator<JavaScriptObjectNotation> it = me:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation child = it:Next()
            result:Add(child:GetKey())
        end
        return result
    end

    /*
    This method returns an integer value of a JavaScriptObjectNotation object containing an integer type

    Attribute: Returns The integer value of the object if applicable.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2)
            json:Add("item3", 3)

            sum = 0
            i = 0
            repeat json:GetSize() times
                sum = sum + json:Get(i):GetInteger()
                i = i + 1
            end
            output sum
       end
    end
    */

    action GetInteger returns integer
        return integerValue
    end

    /*

    Attribute: Returns An iterator of the JavaScriptObjectNotation objects in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Containers.Iterator

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1.1)
            json:Add("item2", 2.2)
            json:Add("item3", 3.3)

            number sum = 0
            i = 0
            Iterator<JavaScriptObjectNotation> myIterator = json:GetIterator()

            repeat while myIterator:HasNext()
                JavaScriptObjectNotation nextItem = myIterator:Next()
                sum = sum + nextItem:GetNumber()
                i = i + 1
            end
            output sum
       end
    end
    */

    action GetIterator returns Iterator<JavaScriptObjectNotation>
        return array:GetIterator()
    end

    /*
    This method returns a number value of a JavaScriptObjectNotation object containing a number type

    Attribute: Returns The number value of the object if applicable.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1.1)
            json:Add("item2", 2.2)
            json:Add("item3", 3.3)

            number sum = 0
            i = 0
            repeat json:GetSize() times
                sum = sum + json:Get(i):GetNumber()
                i = i + 1
            end
            output sum
       end
    end
    */

    action GetNumber returns number
        return numberValue
    end

/*
    This method returns a number of children in a JavaScriptObjectNotation object.

    Attribute: Returns The number of children in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1.1)
            json:Add("item2", 2.2)
            json:Add("item3", 3.3)

            output json:GetSize()
       end
    end
    */

    action GetSize returns integer
        return array:GetSize()
    end

    /*
    This method returns a text value of a JavaScriptObjectNotation object containing a text type

    Attribute: Returns The text value of the object if applicable.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", "one")
            json:Add("item2", "two")
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):GetText()
                i = i + 1
            end
       end
    end
    */

    action GetText returns text
        return textValue
    end

    /*
    This method returns a type of a JavaScriptObjectNotation object as an integer code according to the following table:
        INTEGER = 1
        NUMBER = 2
        TEXT = 3
        BOOLEAN = 4
        UNDEFINED = 5
        ARRAY = 6
        OBJECT = 7
        PARENT = 8

    Attribute: Returns The type of the object as an integer.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", "one")
            json:Add("item2", 1)
            json:Add("item3", 1.1)
            json:Add("item4", true)

            i = 0
            repeat json:GetSize() times
                output json:Get(i):GetType()
                i = i + 1
            end
       end
    end
    */

    action GetType returns integer
        return type
    end

/*
    This method returns a type of a JavaScriptObjectNotation object as text

    Attribute: Returns The type of the object as text.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", "one")
            json:Add("item2", 1)
            json:Add("item3", 1.1)
            json:Add("item4", true)

            i = 0
            repeat json:GetSize() times
                output json:Get(i):GetTypeAsText()
                i = i + 1
            end
       end
    end
    */
    action GetTypeAsText() returns text
        if IsUndefined()
            return "undefined"
        elseif IsInteger()
            return "integer"
        elseif IsNumber()
            return "number"
        elseif IsText()
            return "text"
        elseif IsBoolean()
            return "boolean"
        elseif IsArray()
            return "array"
        elseif IsObject()
            return "object"
        elseif IsParent()
            return "parent"
        else
            return ""
        end
            
    end

    /*
    This method returns the value of a JavaScriptObjectNotation object by the key name in text format

    Attribute: Parameter key The key of the object to return

    Attribute; Returns The value of the object with the specified key.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            output json:GetValue("item1")
            output json:GetValue("item2")
            output json:GetValue("item3")
       end
    end
    */

    action GetValue(text key) returns text
        Iterator<JavaScriptObjectNotation> it = me:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation child = it:Next()
            if child:GetKey() = key
                return child:GetValue()
            end
        end
        return "No item called " + key + " found"
    end

    /*
    This method returns the value of a JavaScriptObjectNotation object by the key name as a JavaScriptObjectNotation object.
    
    Attribute; Returns The value of the object as text.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("key1", 1)
            json:Add("key2", 2.2)
            json:Add("key3", "three")
            json:Add("key4", true)
            JavaScriptObjectNotation nested
            nested:SetKey("key5")
            nested:Add("item1", 1)
            nested:Add("item2", 2)
            nested:Add("item3", 3)
            json:Add(nested)

            output json:GetBoolean("key4")
        end
    end
    */
    action GetBoolean(text key) returns boolean
        Iterator<JavaScriptObjectNotation> it = me:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation child = it:Next()
            if child:GetKey() = key and child:GetType() = BOOLEAN
                return child:GetBoolean()
            end
        end
        alert(key + " not found with type boolean")
        return false
    end
/*
    This method returns the value of a JavaScriptObjectNotation object by the key name as a JavaScriptObjectNotation object.
    
    Attribute; Returns The value of the object as text.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("key1", 1)
            json:Add("key2", 2.2)
            json:Add("key3", "three")
            json:Add("key4", true)
            JavaScriptObjectNotation nested
            nested:SetKey("key5")
            nested:Add("item1", 1)
            nested:Add("item2", 2)
            nested:Add("item3", 3)
            json:Add(nested)

            output json:GetInteger("key1")
        end
    end
    */
    action GetInteger(text key) returns integer
        Iterator<JavaScriptObjectNotation> it = me:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation child = it:Next()
            if child:GetKey() = key and child:GetType() = INTEGER
                return child:GetInteger()
            end
        end
        alert(key + " not found with type integer")
        return 0
    end
/*
    This method returns the value of a JavaScriptObjectNotation object by the key name as a JavaScriptObjectNotation object.
    
    Attribute; Returns The value of the object as text.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("key1", 1)
            json:Add("key2", 2.2)
            json:Add("key3", "three")
            json:Add("key4", true)
            JavaScriptObjectNotation nested
            nested:SetKey("key5")
            nested:Add("item1", 1)
            nested:Add("item2", 2)
            nested:Add("item3", 3)
            json:Add(nested)

            output json:GetNumber("key2")
        end
    end
    */
    action GetNumber(text key) returns number
        Iterator<JavaScriptObjectNotation> it = me:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation child = it:Next()
            if child:GetKey() = key and child:GetType() = NUMBER
                return child:GetNumber()
            end
        end
        alert(key + " not found with type number")
        return 0
    end

    /*
    This method returns the value of a JavaScriptObjectNotation object by the key name as a JavaScriptObjectNotation object.
    
    Attribute; Returns The value of the object as text.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("key1", 1)
            json:Add("key2", 2.2)
            json:Add("key3", "three")
            json:Add("key4", true)
            JavaScriptObjectNotation nested
            nested:SetKey("key5")
            nested:Add("item1", 1)
            nested:Add("item2", 2)
            nested:Add("item3", 3)
            json:Add(nested)

            output json:GetObject("key5"):GetInteger("item1")
        end
    end
    */
    action GetObject(text key) returns JavaScriptObjectNotation
        Iterator<JavaScriptObjectNotation> it = me:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation child = it:Next()
            if child:GetKey() = key and (not child:IsPrimitive())
                return child
            end
        end
        JavaScriptObjectNotation result = undefined
        return result
    end

    
    /*
    This method returns the value of a JavaScriptObjectNotation object by the key name in text format
    
    Attribute; Returns The value of the object as text.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
       action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            output json:GetValue("item1")
            output json:GetValue("item2")
            output json:GetValue("item3")
       end
    end
    */

    action GetValue returns text
        if IsText()
            return textValue
        elseif IsNumber()
            return cast(text, numberValue)
        elseif IsInteger()
            return cast(text, integerValue)
        elseif IsBoolean()
            return cast(text, booleanValue)
        elseif IsObject()
            if not HasKey()
                return me:ToText()
            else
                JavaScriptObjectNotation copy
                copy:Read(me:ToText())
                copy = copy:Get(0)
                copy:SetParent()
                copy:SetKey("")
                return copy:ToText()
            end
        elseif IsArray()
            text result = ""
            text dq = result:GetDoubleQuote()
            result = result + "["
            i = 0
            repeat array:GetSize() times
                if array:Get(i):IsText()
                    result = result + dq + array:Get(i):GetValue() + dq
                else
                    result = result + array:Get(i):GetValue()
                end
                if i < array:GetSize() - 1
                    result = result + ", "
                end
                i = i + 1
            end
            result = result + "]"
            return result
        elseif IsUndefined()
            return "null"
        elseif type = 0
            return me:ToText()
        end
        return ""
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is an array or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is an array.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsArray()
                i = i + 1
            end
       end
    end
    */

    action IsArray returns boolean
        return type = ARRAY
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is a boolean value or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is a boolean type.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", true)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsBoolean()
                i = i + 1
            end
       end
    end
    */

    action IsBoolean returns boolean
        return type = BOOLEAN
    end

    /*
    This method returns true if a JavaScriptObjectNotation object contains values or false otherwise

    Attribute: Returns A boolean value based on whether or not the object is empty.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            output json:IsEmpty()
            json:Add("item1", 1)
            output json:IsEmpty()
       end
    end
    */
    action IsEmpty returns boolean
        return array:IsEmpty()
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is an integer value or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is an integer.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", true)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsInteger()
                i = i + 1
            end
       end
    end
    */

    action IsInteger returns boolean
        return type = INTEGER
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is an integer value or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is a number.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsNumber()
                i = i + 1
            end
       end
    end
    */

    action IsNumber returns boolean
        return type = NUMBER
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is an object or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is an object type.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsObject()
                i = i + 1
            end
       end
    end
    */

    action IsObject returns boolean
        return type = OBJECT
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is the parent or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is the parent.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsObject()
                i = i + 1
            end
       end
    end
    */

    action IsParent returns boolean
        return type = PARENT
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is set to format the output.

    Attribute: Returns A boolean value based on whether or not the object is set for formatted printing.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            output json:IsPrettyPrint()
       end
    end
    */
    action IsPrettyPrint returns boolean
        return prettyPrint
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is a text or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object is a text type.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsText()
                i = i + 1
            end
       end
    end
    */

    action IsText returns boolean
        return type = TEXT
    end

    /*
    This method returns true if a JavaScriptObjectNotation object is a text or false otherwise.

    Attribute: Returns A boolean value based on whether or not the object type is undefined.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")

            i = 0
            repeat json:GetSize() times
                output json:Get(i):IsUndefined()
                i = i + 1
            end
       end
    end
    */

    action IsUndefined returns boolean
        return type = UNDEFINED
    end

    /*
    This method will read in the contents of a file to a JavaScriptObjectNotation object.

    Attribute: Parameter file The file to read into the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.System.File

    class Main
        action Main
            JavaScriptObjectNotation json
            File myFile
            myFile:SetPath("response.json")
            json:Read(myFile)
            output json:ToText()
       end
    end
    */

    action Read(File file)
        if file not= undefined and file:Exists() and file:IsFile()
            text value = file:Read()
            Read(value)
        else
            output "File: " + file:GetFileName() + " is not found"
        end
    end

    /*
    This method will read a text value to a JavaScriptObjectNotation object.

    Attribute: Parameter data The text value to read into the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
        text dq = ""
        dq = dq:GetDoubleQuote()
        text myValue = "{" + dq + "item1" + dq + ": 1," + dq + "item2" + dq + ": 2}"
        JavaScriptObjectNotation json
        json:Read(myValue)
        output json:ToText()
       end
    end
    */

    action Read(text data)
        // load object with JSON formatted text data 
        JavaScriptObjectNotation json = ReadToObject(data)
        if json:GetType() = ARRAY
            me:type = ARRAY
        else
            me:type = PARENT
        end
        Iterator<JavaScriptObjectNotation> it = json:GetIterator()
        repeat while it:HasNext()
            JavaScriptObjectNotation object = it:Next()
            Add(object)
        end
    end

    /*
    This method will read a hash table to a JavaScriptObjectNotation object.

    Attribute: Parameter data The HashTable to read into the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation
    use Libraries.Containers.HashTable

    class Main
        action Main
        JavaScriptObjectNotation json
        HashTable<text, text> table
        table:Add("1", "one")
        table:Add("2", "two ")
        table:Add("3", "three")
        json:Read(table)
        output json:ToText()
       end
    end
    */

    action Read(HashTable<text, text> data)
        // load object with HashTable data
        me:type = PARENT
        Iterator<text> it = data:GetKeyIterator()
        repeat while it:HasNext()
            text key = it:Next()
            text value = data:GetValue(key)
            Add(key, value)
        end
    end

    private action ReadToObject(text value) returns JavaScriptObjectNotation
        if value = undefined
            return undefined
        end
        JavaScriptObjectNotationDefaultListener listen
        JavaScriptObjectNotationLexer lex
        JavaScriptObjectNotationParser parse

        lex:SetListener(listen)
        parse:SetListener(listen)
        lex:Read(value)
        parse:Parse(lex)
        return listen:GetObject()
    end

    /*
    This method removes an item from a JavaScriptObjectNotation object.

    Attribute: Parameter index The index of the child object to remove.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Remove(1)
            output json:ToText()
       end
    end
    */

    action Remove(integer index)
        array:RemoveAt(index)
    end

    /*
    This method sets a JavaScriptObjectNotation object to boolean type with a specified value

    Attribute: Parameter value The value to set in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Get(1):SetBoolean(false)
            output json:ToText()
       end
    end
    */

    action SetBoolean(boolean value)
        booleanValue = value
        type = BOOLEAN
    end

    /*
    This method sets a JavaScriptObjectNotation object to integer type with a specified value

    Attribute: Parameter value The value to set in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Get(1):SetBoolean(false)
            output json:ToText()
       end
    end
    */

    action SetInteger(integer value)
        integerValue = value
        type = INTEGER
    end

    /*
    This method sets a JavaScriptObjectNotation object to number type with a specified value

    Attribute: Parameter value The value to set in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Get(1):SetNumber(10.0)
            output json:ToText()
       end
    end
    */

    action SetNumber(number value)
        numberValue = value
        type = NUMBER
    end

    /*
    This method sets a JavaScriptObjectNotation object to object type

    Attribute: Parameter value The value to set in the object.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:SetObject()
       end
    end
    */

    action SetObject
        type = OBJECT
    end

    /*
    This method sets a JavaScriptObjectNotation object to parent type

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:SetParent()
       end
    end
    */

    action SetParent
        type = PARENT
    end

    /*
    This method sets a JavaScriptObjectNotation object to parent type

    Attribute: Parameter print The boolean value to set formatted printing mode.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:SetPrettyPrint(true)
       end
    end
    */
    action SetPrettyPrint(boolean print)
        prettyPrint = print
    end

    /*
    This method sets the name of a key of a JavaScriptObjectNotation object

    Attribute: Parameter key The name of the object to set.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Get(1):SetKey("number2")
            output json:ToText()
       end
    end
    */

    action SetKey(text key)
        me:key = key
        if IsUndefined()
            SetObject()
        end
    end

    /*
    This method sets a JavaScriptObjectNotation object to text type with a specified value

    Attribute: Parameter value The text value of the object to set.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Get(1):SetText("two")
            output json:ToText()
       end
    end
    */

    action SetText(text value)
        textValue = value
        type = TEXT
    end

    /*
    This method sets a JavaScriptObjectNotation object to undefined type

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:SetUndefined()
       end
    end
    */

    action SetUndefined
        type = UNDEFINED
    end

    /*
    This method sets a JavaScriptObjectNotation object to array type

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:SetArray()
       end
    end
    */

    action SetArray
        type = ARRAY
        i = 0
        repeat array:GetSize() times
            JavaScriptObjectNotation child = array:Get(i)
            child:SetArrayItem(true)
            i = i + 1
        end
    end

    private action GetSpaces(integer level) returns text
        text space = ""
        repeat spaces * level times
            space = space + " "
        end
        return space
    end

    /*
    This method prints a JavaScriptObjectNotation object in text format

    Attribute: Returns The text value of the object in JavaScriptObjectNotation format.

    Attribute: Example

    use Libraries.Data.Formats.JavaScriptObjectNotation

    class Main
        action Main
            JavaScriptObjectNotation json
            json:Add("item1", 1)
            json:Add("item2", 2.2)
            json:Add("item3", "three")
            json:Get(1):SetText("two")
            output json:ToText()
       end
    end
    */

    action ToText returns text
        return ToText(0)
    end

    private action ToText(integer level) returns text
        text result = ""
        text dq = result:GetDoubleQuote()
        text line = ""
        text space = ""
        if IsPrettyPrint()
            space = GetSpaces(level)
            line = result:GetCarriageReturn()
        end
        
        if IsParent() or level = 0
            result = result + "{"
            if IsArray() 
                result = result + dq + key + dq + ": [" 
            elseif HasKey()
                result = result + dq + key + dq + ": {" 
            end
            if IsPrettyPrint()
               result = result + line
            end
        else
            if IsObject()
                if IsPrettyPrint()
                    result = result + space
                end
                if not IsArrayItem() or (IsArrayItem() and HasKey())
                    result = result + dq + key + dq + ": {"
                end
                if IsPrettyPrint()
                    result = result + line
                end
            else
                if HasKey() or not IsArrayItem()
                    if IsPrettyPrint()
                        result = result + space
                    end
                    result = result + dq + key + dq + ": "
                end
                if IsArray() 
                    result = result + "["
                elseif IsText()
                    result = result + dq + textValue + dq
                elseif IsBoolean()
                    result = result + booleanValue
                elseif IsNumber()
                    result = result + numberValue
                elseif IsInteger()
                    result = result + integerValue
                elseif IsUndefined()
                    result = result + "null"
                end
            end
        end
        //get all children
        i = 0
        repeat while i < array:GetSize()
            JavaScriptObjectNotation child = array:Get(i)
            child:SetPrettyPrint(IsPrettyPrint())
                
            if IsArray() and child:IsObject()
                result = result + "{" 
                    if IsPrettyPrint()
                        result = result + line
                    end
                result = result + child:ToText(level + 1)
                result = result + "}"
            else
                result = result + child:ToText(level + 1)
            end

            if i not= array:GetSize() - 1
                text isNext = ", "
                if not IsArray()
                    isNext = isNext + line
                end
                result = result + isNext
            end
            i = i + 1
        end

        if IsParent() or level = 0
            if IsPrettyPrint()
                result = result + line
            end
            if IsArray()
                result = result + "]"
            end
            result = result + "}"
            if HasKey() and not IsArray()
                result = result + "}"
            end
        else
            if IsObject()
                if IsPrettyPrint()
                    result = result + line + space
                end
                if not IsArrayItem() or (IsArrayItem() and HasKey())
                    result = result + "}"
                end
                
            elseif IsArray() 
                result = result + "]"
            end
        end

        return result
    end
end