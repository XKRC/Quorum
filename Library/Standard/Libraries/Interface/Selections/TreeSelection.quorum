package Libraries.Interface.Selections

use Libraries.Containers.Array
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Item

/*
    A selection represents what would be interacted with if the parent is used. The 
general idea of selection is common across user interface elements. For example, 
trees have a selection,  which represents the item in the tree that the user is 
interacting with if the tree itself has a focus. Similarly, text boxes have a 
very different kind of selection, which represents which region of the text is 
being interacted with. Selection represents a generic way to get the name of the 
selection. 

In the case of TreeSelection, this returns a path of TreeItem objects, which can 
be traversed to learn the specific and unique path to the current tree selection. 
This path should be interpreted from high level to low level. For example, if 
we were selected on Game -> Player 1, then the TreeItem objects in the path 
would be Game first and Player 1 second.
*/
class TreeSelection is Selection
    Array<TreeItem> treeItems

    /* 
        This action is used internally to set the selection owner.
        Attribute: Parameter The selection owner.
    */
    action Initialize(Item item)
        Initialize(item, "")
    end

    /* 
        This action is used internally to set the path on the Selection.
        Attribute: Parameter The items in the selection. 
    */
    action Set(Array<TreeItem> items)
        treeItems:Empty()

        counter = 0
        repeat while counter < items:GetSize()
            treeItems:Add(items:Get(counter))
            counter = counter + 1
        end

        if treeItems:IsEmpty()
            SetDisplayName("")
        else
            SetDisplayName(treeItems:GetFromEnd():GetName())
        end
    end

    /*
        This action returns true if there is no selection.
        Attribute: Returns True if there is no selection.
    */
    action IsEmpty returns boolean
        return treeItems:IsEmpty()
    end

    /* 
        This action empties the selection path. 
    */
    action Empty
        treeItems:Empty()
        parent:Selection:displayName = ""
    end

    /* 
        This action gets the Path of the selection. This path should be 
        interpreted from high level to low level. For example, if we were 
        selected on Game -> Player 1, then the TreeItem objects in the path 
        would be Game first and Player 1 second.

        Attribute: Returns The items in the selection. 
    */
    action GetPath returns Array<TreeItem>
        return treeItems:CopyToArray()
    end

    /*
        This action returns the selected TreeItem. This is the last TreeItem in
        the path. If the selection is empty, this will return undefined.

        Attribute: Returns The selected TreeItem, or undefined if the selection is empty.
    */
    action GetTreeItem returns TreeItem
        if not treeItems:IsEmpty()
            return treeItems:GetFromEnd()
        end
        return undefined
    end
end
