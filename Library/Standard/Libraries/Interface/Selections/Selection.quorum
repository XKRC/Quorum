package Libraries.Interface.Selections

use Libraries.Interface.Item
use Libraries.Interface.Events.SelectionEvent
use Libraries.Game.GameStateManager

/*
A selection represents what would be interacted with if the parent is used. The 
general idea of selection is common across user interface elements. For example, 
trees have a selection,  which represents the item in the tree that the user is 
interacting with if the tree itself has a focus. Similarly, text boxes have a 
very different kind of selection, which represents which region of the text is 
being interacted with. Selection represents a generic way to get the name of the 
selection. 

The standard way to work with a selection is to have a class that inherits from 
a SelectionListener. From there, if we made a tree, for example, we would add 
that class as a listener. If the selection of that parent item changes, our 
class would then receive SelectionEvents, which tell us which parent item was 
interacted with. From there, we can request information from that item about 
the selection or other attributes of the component. The example shows 
just the selection changed part of the process.
*/
class Selection 
    text displayName = "Unnamed Selection"
    Item item = undefined

    /*
        This action sets up the component with default attributes.
        Attribute: Parameter item The parent item in the selection.
        Attribute: Parameter displayName The name of the selected item.
    */
    action Initialize(Item item, text displayName)
        me:item = item
        me:displayName = displayName
    end
    
    /*
        This action sets the name that would be shown to the user. It also
        changes the selection, triggering a SelectionEvent.

        Attribute: Parameter name The name to display.
        Attribute: Example
        action SelectionChanged(Selection selection)
            selection:SetDisplayName("A new name I want to change to")
        end
    */
    action SetDisplayName(text name)
        displayName = name
        NotifySelectionListeners()
    end

    /*
        This action gets the name that would be shown to the user.
        Attribute: Returns The display name to be given to the user.
        Attribute: Example

        action SelectionChanged(Selection selection)
            output selection:GetDisplayName()
        end
    */
    action GetDisplayName returns text
        return displayName
    end

    /* 
        This action returns the item that contains the selection. It is not the selection itself.
        Attribute: Parameter The parent item containing the selection.

        Attribute: Example
        action SelectionChanged(Selection selection)
            Item theParentItem = selection:GetItem()
        end
    */
    action GetItem returns Item
        return item
    end

    /*
        This action returns true if there is no selection.
        Attribute: Returns True if there is no selection.
    */
    blueprint action IsEmpty returns boolean

    /*
        This action sends information that the selection was changed to all listeners.
    */
    action NotifySelectionListeners
        GameStateManager manager
        SelectionEvent event
        event:SetSelection(me)
        manager:GetInput():NotifySelectionListeners(event)
    end
end
