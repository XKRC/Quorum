package Libraries.Interface.Selections

use Libraries.Containers.Array
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Item

/*
    In the case of MenuSelection, this returns a path of Menu Items, which can 
    be traversed to learn the specific and unique path to the current menu 
    selection. This path should be interpreted from high level to low level. 
    For example, if we were selected on File -> Exit, then the MenuItem objects 
    in the path would be File first and Exit second. Menus can only select one 
    MenuItem at a time, which is a single selection.
*/
class MenuSelection is Selection
    Array<MenuItem> menuItems

    /* 
        This action is used internally to set the selection owner.
        Attribute: Parameter The selection owner.
    */
    action Initialize(Item item)
        Initialize(item, "")
    end

    /*
        This action returns true if there is no selection.
        Attribute: Returns True if there is no selection.
    */
    action IsEmpty returns boolean
        return menuItems:IsEmpty()
    end

    /* 
        This action is used internally to set the path on the Selection.
        Attribute: Parameter The items in the selection. 
    */
    action Set(Array<MenuItem> items)
        menuItems:Empty()

        counter = 0
        repeat while counter < items:GetSize()
            menuItems:Add(items:Get(counter))
            counter = counter + 1
        end

        if menuItems:IsEmpty()
            SetDisplayName("")
        else 
            SetDisplayName(menuItems:GetFromEnd():GetName())
        end
    end

    /* This action empties the selection path. */
    action Empty
        menuItems:Empty()
        parent:Selection:displayName = ""
    end

    /* 
        This action gets the Path of the selection. This path should be 
        interpreted from high level to low level. For example, if we were 
        selected on File -> Exit, then the MenuItem objects in the path would 
        be File first and Exit second. Menus can only select one MenuItem at a 
        time, which is a single selection.

        Attribute: Returns The items in the selection. 
    */
    action GetPath returns Array<MenuItem>
        return menuItems:CopyToArray()
    end
end
