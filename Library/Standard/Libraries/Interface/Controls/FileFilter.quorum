package Libraries.Interface.Controls
use Libraries.Containers.Array
use Libraries.Containers.Iterator

/*
    This class represents a filter for files in an open or save dialog. It does 
    not do much on its own, but is used in relation to the FileChooser class.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Controls.FileChooser
        use Libraries.Interface.Controls.FileFilter
        use Libraries.System.File

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                FileChooser chooser
                FileFilter filter
                filter:Add("png")
                File file = chooser:OpenFileDialog(filter)
                if file not= undefined
                    output file:GetAbsolutePath()
                end
            end
        end
*/
class FileFilter 
    Array<text> filters
    boolean acceptAll = true

    /*
        This action adds a filter to the list. This is represented by a file's
        file extention without a dot (e.g., png, not .png)

        Attribute: Parameter value The file filter to add.

        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Controls.FileChooser
        use Libraries.Interface.Controls.FileFilter
        use Libraries.System.File

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                FileChooser chooser
                FileFilter filter
                filter:Add("png")
                File file = chooser:OpenFileDialog(filter)
                if file not= undefined
                    output file:GetAbsolutePath()
                end
            end
        end
    */
    action Add(text value)
        filters:Add(value)
    end

    /*
        This action adds a filter to the list. This is represented by a file's
        file extention without a dot (e.g., png, not .png). The primary 
        difference between this action and the Add action is that this one
        uses multiple file types in one filter.

        Attribute: Parameter multiple The array of file filters to add.

        Attribute: Example

        use Libraries.Game.Game
        use Libraries.Interface.Controls.FileChooser
        use Libraries.Interface.Controls.FileFilter
        use Libraries.System.File
        use Libraries.Containers.Array

        class Main is Game

            action Main
                StartGame()
            end

            action CreateGame
                FileChooser chooser
                FileFilter filter
                Array<text> array
                array:Add("png")
                array:Add("bmp")
                filter:AddMultipleFilter(array)
                File file = chooser:OpenFileDialog(filter)
                if file not= undefined
                    output file:GetAbsolutePath()
                end
            end
        end
    */
    action AddMultipleFilter(Array<text> multiple)
        text result = ""
        i = 0
        repeat while i < multiple:GetSize()
            text filter = multiple:Get(i)
            result = result + "," + filter
        end
        filters:Add(result)
    end

    /*
        This action gets the item at a given location in an filter. If the item
        returned is a comma separated list, then it is a multiple filter.


        Attribute: Parameter location The index or location the value is located at. 

        Attribute: Returns The filter or multiple filter at the given location.

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:Get(0)
    */
    action Get(integer i) returns text
        return filters:Get(i)
    end

    /*
        This action gets the item at a given location in an filter. If the item
        returned is a comma separated list, then it is a multiple filter.


        Attribute: Parameter location The index or location the value is located at. 

        Attribute: Returns The filter or multiple filter at the given location.

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:GetSize()
    */
    action GetSize returns integer
        return filters:GetSize()
    end

    /*
        This action gets the item at a given location in an filter. If the item
        returned is a comma separated list, then it is a multiple filter.


        Attribute: Returns The iterator of all of the filters

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        Iterator<text> iterator = filter:GetIterator()
        repeat while iterator:HasNext()
            output iterator:Next()
        end
    */
    action GetIterator returns Iterator<text>
        return filters:GetIterator()
    end

    /*
        This action tells us whether or not the file filter is empty.


        Attribute: Returns The iterator of all of the filters

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:IsEmpty()
    */
    action IsEmpty returns boolean
        return filters:GetSize() = 0
    end

    /*
        This action tells the filter to empty itself.


        Attribute: Returns The iterator of all of the filters

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:Empty()
    */
    action Empty
        filters:Empty()
    end

    /*
        This action tells us whether or not the filter should have a wildcard,
        meaning that it should accept any type of file.


        Attribute: Returns The iterator of all of the filters

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:HasAcceptAll()
    */
    action HasAcceptAll returns boolean
        return acceptAll
    end

    /*
        This action tells us the filter whether or not it should have a wildcard,
        meaning whether it should accept any type of file.

        Attribute: Paramater accept Whether or not we should have a wildcard.

        Attribute: Returns The iterator of all of the filters

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:HasAcceptAll()
    */
    action SetAcceptAll(boolean accept)
        acceptAll = accept
    end

    /*
        This action translates the file filter to something the low level 
        native system understands. It does not need to be called by a user.

        Attribute: Returns The iterator of all of the filters

        Attribute: Example
        use Libraries.Interface.Controls.FileFilter
        FileFilter filter
        filter:Add("png")
        output filter:GetCombinedFilter()
    */
    action GetCombinedFilter returns text
        text result = ""
        i = 0
        repeat while i < filters:GetSize()
            text filter = filters:Get(i)
            result = result + ";" + filter
            i = i + 1
        end

        if HasAcceptAll()
            result = result + ";" + "*"
        end
        return result
    end
end