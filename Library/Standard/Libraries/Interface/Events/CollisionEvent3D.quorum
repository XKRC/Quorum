package Libraries.Interface.Events

use Libraries.Interface.Item3D
use Libraries.Compute.Math
use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Game.Collision.CollisionEdge3D
use Libraries.Game.Collision.LocalCollisionPoints3D
use Libraries.Game.Collision.Shapes.CollisionShape3D
use Libraries.Game.Collision.Shapes.Box
use Libraries.Game.Collision.Shapes.Sphere
use Libraries.Game.Collision.Shapes.Cylinder
use Libraries.Game.Collision.CollisionPoint3D
use Libraries.Interface.Events.CollisionListener3D
use Libraries.Compute.Matrix3
use Libraries.Game.Collision.CollisionPointsResult3D
use Libraries.Compute.BitwiseOperations
use Libraries.Game.Collision.Narrowphase.ConvexConvexPairSolver
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Game.Physics.all

/*
This class records which 3D objects are involved in the collision, can connect to
other CollisionEvent3D like a doubly linked list, and records what happend during
the collision via the class CollisionPointsResult3D.
*/
class CollisionEvent3D
    public constant number EPSILON = 0.00000011920928955078125

    CollisionPointsResult3D result

    Item3D itemA = undefined
    Item3D itemB = undefined

    integer indexA = -1
    integer indexB = -1

    boolean touchingFlag = false
    boolean enabledFlag = false

//    // physics fields for later
//    number friction = 0
//    number restitution = 1
//    number tangentSpeed = 0

    boolean hasPhysicsResponse = true

    Math math

    private CollisionEvent3D next = undefined
    private CollisionEvent3D previous = undefined

    CollisionEdge3D nodeA
    CollisionEdge3D nodeB

    LocalCollisionPoints3D collisionPoints

    boolean islandFlag = false

    action HasPhysicsResponse returns boolean
        return hasPhysicsResponse
    end

    action SetHasPhysicsResponse(boolean flag)
        me:hasPhysicsResponse = flag
    end

    action GetCollisionPoints returns LocalCollisionPoints3D
        return collisionPoints
    end

    action Initialize(Item3D itemA, integer indexA, Item3D itemB, integer indexB)
        enabledFlag = true
        
        me:itemA = itemA
        me:indexA = indexA
        
        me:itemB = itemB
        me:indexB = indexB

        collisionPoints:ClearCollisionPoints()
        collisionPoints:Set(itemA, itemB)
        result:Initialize(itemA, itemB)

        previous = undefined
        next = undefined

        nodeA:collision = undefined
        nodeA:previous = undefined
        nodeA:next = undefined
        nodeA:other = undefined

        nodeB:collision = undefined
        nodeB:previous = undefined
        nodeB:next = undefined
        nodeA:other = undefined

//        friction = CalculateFriction(itemA:GetFriction(), itemB:GetFriction())
//        restitution = CalculateRestitution(itemA:GetRestitution(), itemB:GetRestitution())
        
    end

    action GetPrevious returns CollisionEvent3D
        return previous
    end

    action SetPrevious(CollisionEvent3D event)
        previous = event
    end

    action GetNext returns CollisionEvent3D
        return next
    end

    action SetNext(CollisionEvent3D event)
        next = event
    end

    action IsTouching returns boolean
        return touchingFlag
    end

    action SetEnabled(boolean enabled)
        enabledFlag = enabled
    end

    action IsEnabled returns boolean
        return enabledFlag
    end

    action GetItemA returns Item3D
        return itemA
    end

    action GetChildIndexA returns integer
        return indexA
    end

    action GetItemB returns Item3D
        return itemB
    end
    
    action GetChildIndexB returns integer
        return indexB
    end

//    action SetFriction(number friction)
//        me:friction = friction
//    end
//
//    action GetFriction returns number
//        return friction
//    end
//
//    action ResetFriction
//        friction = CalculateTotalFriction(itemA:GetFriction(), itemB:GetFriction())
//    end
//
//    action SetRestitution(number restitution)
//        me:restitution = restitution
//    end
//
//    action GetRestitution returns number
//        return restitution
//    end
//
//    action ResetRestitution
//        restitution = CalculateTotalRestitution(itemA:GetRestitution(), itemB:GetRestitution())
//    end
//
//    action SetTangentSpeed(number speed)
//        me:tangentSpeed = speed
//    end
//
//    action GetTangentSpeed returns number
//        return tangentSpeed
//    end

    action DispatchCollision(Array<CollisionListener3D> listeners)
        enabledFlag = true

        boolean touching = false
        boolean wasTouching = touchingFlag

        PhysicsPosition3D transformA = itemA:GetCollisionTransform()
        PhysicsPosition3D transformB = itemB:GetCollisionTransform()

        NarrowphaseEvaluation(collisionPoints, transformA, transformB)
        touching = collisionPoints:GetPointCount() > 0

        touchingFlag = touching

        integer i = 0
        repeat while i < listeners:GetSize()
            CollisionListener3D listener = listeners:Get(i)
            if not wasTouching and touching
                listener:BeginCollision(me)
            end

            if wasTouching and not touching
                listener:FinishCollision(me)
            end

            i = i + 1
        end
    end

    action GetNodeA returns CollisionEdge3D
        return nodeA
    end

    action GetNodeB returns CollisionEdge3D
        return nodeB
    end

//    action CalculateTotalFriction(number friction1, number friction2) returns number
//        return math:SquareRoot(friction1 * friction2)
//    end
//
//    action CalculateTotalRestitution(number restitution1, number restitution2) returns number
//        if restitution1 > restitution2
//            return restitution1
//        else
//            return restitution2
//        end
//    end

    private action NarrowphaseEvaluation(LocalCollisionPoints3D collisionPoints, PhysicsPosition3D transformA, PhysicsPosition3D transformB)
        CollisionShape3D shapeA = itemA:GetShape()
        CollisionShape3D shapeB = itemB:GetShape()

        if shapeA is Sphere and shapeB is Sphere
            result:Initialize(itemA, itemB)
            CollideSpheres(collisionPoints, cast(Sphere, shapeA), transformA, cast(Sphere, shapeB), transformB, result)
        else
            result:Initialize(itemA, itemB)
            CollideConvexConvex(collisionPoints, shapeA, transformA, shapeB, transformB, result)
        end

    end

// ********************************************************************************************************************
// Sphere-Sphere collision algorithm and helpers

    private action CollideSpheres(LocalCollisionPoints3D collisionPoints, Sphere sphereA, PhysicsPosition3D transformA, Sphere sphereB, PhysicsPosition3D transformB, CollisionPointsResult3D result)
        PhysicsPosition3D tempTransform1
        PhysicsPosition3D tempTransform2

        tempTransform1:Set(transformA)
        tempTransform2:Set(transformB)

        result:SetCollisionPoints(collisionPoints)

        Vector3 diff
        diff:Set(tempTransform1:GetOrigin())
        diff:Subtract(tempTransform2:GetOrigin())

        number length = diff:Length()
        number radius0 = sphereA:GetRadius()
        number radius1 = sphereB:GetRadius()

        if length > radius0 + radius1
            result:RefreshCollisionPoints()
            return now
        end

        number distance = length - (radius0 + radius1)
        
        Vector3 normalOnSurfaceB
        normalOnSurfaceB:Set(1, 0, 0)
        if length > 0.000000119209290
            normalOnSurfaceB:Set(diff)
            normalOnSurfaceB:Scale(1 / length)
        end

        Vector3 temp

        Vector3 pos0
        temp:Set(normalOnSurfaceB)
        temp:Scale(radius0)
        pos0:Set(tempTransform1:GetOrigin())
        pos0:Subtract(temp)

        Vector3 pos1
        temp:Set(normalOnSurfaceB)
        temp:Scale(radius1)
        pos1:Set(tempTransform2:GetOrigin())
        pos1:Add(temp)

        result:AddCollisionPoint(normalOnSurfaceB, pos1, distance)

        result:RefreshCollisionPoints()
    end

    ConvexConvexPairSolver gjkPairDetector

// ********************************************************************************************************************
// GJK Collision Algorithm and Helpers

    private action CollideConvexConvex(LocalCollisionPoints3D collisionPoints, CollisionShape3D shapeA, PhysicsPosition3D transformA, CollisionShape3D shapeB, PhysicsPosition3D transformB, CollisionPointsResult3D result)
        result:SetCollisionPoints(collisionPoints)
        number maximumDistanceSquared = 0

        gjkPairDetector:SetMinkowskiA(shapeA)
        gjkPairDetector:SetMinkowskiB(shapeB)
        maximumDistanceSquared = shapeA:GetMargin() + shapeB:GetMargin() + collisionPoints:GetCollisionBreakingThreshold()
        maximumDistanceSquared = maximumDistanceSquared * maximumDistanceSquared

        PhysicsPosition3D inputTransformA
        inputTransformA:Set(transformA)
        PhysicsPosition3D inputTransformB
        inputTransformB:Set(transformB)

        gjkPairDetector:GetClosestPoints(inputTransformA, inputTransformB, maximumDistanceSquared, result, false)

        result:RefreshCollisionPoints()        
    end

    action SetInCollisionGroup(boolean flag)
        islandFlag = flag
    end

    action InCollisionGroup returns boolean
        return islandFlag
    end
end