package Libraries.Interface.Events

use Libraries.Interface.Item

/*
The TouchEvent class represents an event caused by the user tapping the screen,
releasing their finger from the screen, or moving their finger across the screen.
*/
class TouchEvent 
    
    /* This value represents the event that a finger is first touching the screen. */
    public constant integer BEGAN = 0

    /* This value represents that a finger is moving across the screen. */
    public constant integer MOVED = 1
    
    /* This value represents that a finger is touching the screen and not moving. */
    public constant integer STATIONARY = 2

    /* This value represents that a finger has been lifted off the screen. */
    public constant integer ENDED = 3

    /* 
    This value represents that the system cancelled a touch event, e.g., the
    user has put the phone to their face while receiving a call.
    */
    public constant integer CANCELLED = 4

    /*
    The eventType field represents what type of touch event this is, or in other
    words, what is happening that is triggering this touch event. The possible
    values for it are BEGAN, MOVED, STATIONARY, ENDED, and CANCELLED.
    */
    public integer eventType = -1

    /*
    This variable represents the x-position on the screen where the touch event
    has occurred.
    */
    public integer x = 0
    
    /*
    This variable represents the y-position on the screen where the touch event
    has occurred.
    */
    public integer y = 0

    /*
    This variable represents how far the user's finger has moved on the
    x-coordinate plane since the last touch event was recorded for that finger.
    */
    public integer movementX = 0

    /*
    This variable represents how far the user's finger has moved on the
    y-coordinate plane since the last touch event was recorded for that finger.
    */
    public integer movementY = 0

    /*
    This variable represents the particular finger that has triggered this
    event. If multiple fingers are touching the screen, each finger will have a
    different ID.
    */
    public integer fingerID = 0

    /*
    How many taps have occurred in a short period of time, 
    including this event (if it is a BEGAN event). 
    */
    public integer tapCount = 0

    /*
    The Item which received, was the target of, or otherwise is relevant to the
    TouchEvent which has occurred. If an Item is tapped directly, it will be 
    stored here. If a TouchEvent is triggered with no such Item available, this 
    will be undefined.
    */
    Item source = undefined

    boolean eventHandled = false

    /*
    This action returns the x coordinate of where the event was on the screen.

    Attribute: Returns The x-coordinate of the point on the screen that was touched.

    Attribute: Example

    use Libraries.Interface.TouchEvent
    use Libraries.Interface.TouchListener

    class MyListener is TouchListener

        integer lastX = 0
        integer lastY = 0

        action BeganTouch(TouchEvent event)
            lastX = event:GetX()
            lastY = event:GetY()
        end

    end

    */
    action GetX returns integer
        return x
    end

    /*
    This action returns the y coordinate of where the event was on the screen.

    Attribute: Returns The y-coordinate of the point on the screen that was touched.

    Attribute: Example

    use Libraries.Interface.TouchEvent
    use Libraries.Interface.TouchListener

    class MyListener is TouchListener

        integer lastX = 0
        integer lastY = 0

        action BeganTouch(TouchEvent event)
            lastX = event:GetX()
            lastY = event:GetY()
        end

    end

    */
    action GetY returns integer
        return y
    end

    /*
    This action returns how far the user's finger moved on the x-axis since the
    last movement event.

    Attribute: Returns The distance the user's finger has moved on the x-axis since the last TouchEvent.

    Attribute: Example

    use Libraries.Interface.TouchEvent
    use Libraries.Interface.TouchListener

    class MyListener is TouchListener

        integer activeID = -1
        integer distanceX = 0
        integer distanceY = 0

        action BeganTouch(TouchEvent event)
            if activeID = -1
                activeID = event:fingerID
                distanceX = 0
                distanceY = 0
            end
        end

        action ContinuedTouch(TouchEvent event)
            if event:fingerID = activeID
                distanceX = distanceX + event:GetMovementX()
                distanceY = distanceY + event:GetMovementY()
            end
        end

        action EndedTouch(TouchEvent event)
            if event:fingerID = activeID
                activeID = -1
            end
        end

    end

    */
    action GetMovementX returns integer
        return movementX
    end

    /*
    This action returns how far the user's finger moved on the y-axis since the
    last movement event.

    Attribute: Returns The distance the user's finger has moved on the y-axis since the last TouchEvent.

    Attribute: Example

    use Libraries.Interface.TouchEvent
    use Libraries.Interface.TouchListener

    class MyListener is TouchListener

        integer activeID = -1
        integer distanceX = 0
        integer distanceY = 0

        action BeganTouch(TouchEvent event)
            if activeID = -1
                activeID = event:fingerID
                distanceX = 0
                distanceY = 0
            end
        end

        action ContinuedTouch(TouchEvent event)
            if event:fingerID = activeID
                distanceX = distanceX + event:GetMovementX()
                distanceY = distanceY + event:GetMovementY()
            end
        end

        action EndedTouch(TouchEvent event)
            if event:fingerID = activeID
                activeID = -1
            end
        end

    end

    */
    action GetMovementY returns integer
        return movementY
    end

    /*
    This action sets whether this event should be considered handled by any 
    event listeners. This is typically used when using multiple listeners, in
    order to ensure that a TouchListener doesn't process a TouchEvent that was
    already handled by a different one.

    Attribute: Parameter handled Whether or not the event was handled by this listener.

    Attribute: Example

    use Libraries.Interface.TouchEvent
    use Libraries.Interface.TouchListener

    class MyListener is TouchListener

        action BeganTouch(TouchEvent event)
            if event:GetX() < 100
                event:SetEventHandled(true)
            else
                event:SetEventHandled(false)
            end
        end

    end

    */
    action SetEventHandled(boolean handled)
        eventHandled = handled
    end

    /*
    This action returns whether or not this event has already been marked as
    handled.

    Attribute: Returns Whether or not the event was has already been handled.

    Attribute: Example

    use Libraries.Interface.TouchEvent
    use Libraries.Interface.TouchListener

    class MyListener is TouchListener

        integer counter = 0

        action BeganTouch(TouchEvent event)
            if event:WasEventHandled()
                return now
            end

            counter = counter + 1
            event:SetEventHandled(true)
        end

    end

    */
    action WasEventHandled returns boolean
        return eventHandled
    end

    /*
    This action sets the source item for this event, which is the the target of
    touch event which has occurred (or is otherwise relevant to it). In the Game
    engine, if an Item is tapped directly, it will be stored here. If a 
    TouchEvent is triggered with no such Item available, this will be undefined.

    Attribute: Parameter item The source Item to be stored for this TouchEvent.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.TouchEvent
    use Libraries.Interface.Events.TouchListener
    use Libraries.Interface.Item2D

    class Main is Game, TouchListener

        action Main
            StartGame()
        end

        action CreateGame
            AddTouchListener(me)
        end

        action BeganTouch(TouchEvent event)
            if event:GetSource() not= undefined
                return now
            end

            Item2D newItem
            event:SetSource(newItem)
            event:SetEventHandled(false)
        end
    end

    
    */
    action SetSource(Item item)
        source = item
    end

    /*
    This action returns the source item for this event, which is the target of
    the touch event which has occurred (or is otherwise relevant to it). In the Game
    engine, if an Item is clicked directly, it will be stored here. If a 
    MouseEvent is triggered with no such Item available, this will be undefined.

    Attribute: Returns The source Item for this MouseEvent.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener
    use Libraries.Interface.Item
    use Libraries.Game.Graphics.Drawable

    class Main is Game, MouseListener

        Drawable square

        action Main
            StartGame()
        end

        action CreateGame
            square:LoadFilledRectangle(200, 200)
            square:SetPosition(300, 200)
            Add(square)

            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            Item source = event:GetSource()

            if source = undefined
                output "The background was clicked!"
            elseif source:Equals(square)
                output "The square was clicked!"
            end
        end
    end
    */
    action GetSource returns Item
        return source
    end

end