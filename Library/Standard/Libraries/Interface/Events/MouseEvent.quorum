package Libraries.Interface.Events

use Libraries.Interface.Item
use Libraries.Compute.BitwiseOperations

/*
The MouseEvent class represents an event where the user interacted with the
mouse by clicking or releasing a mouse button, moving or dragging the mouse, or
scrolling the mouse wheel.
*/
class MouseEvent
    
    /* A code used for eventType to indicate that the mouse was clicked. */
    public constant integer CLICKED_MOUSE = 1

    /* A code used for eventType to indicate that the mouse was moved. */
    public constant integer MOVED_MOUSE = 2

    /* A code used for eventType to indicate that the mouse was dragged. */
    public constant integer DRAGGED_MOUSE = 3

    /* A code used for eventType to indicate that a mouse button was released. */
    public constant integer RELEASED_MOUSE = 4

    /* A code used for eventType to indicate that the mouse wheel was scrolled. */
    public constant integer SCROLLED_MOUSE = 5

    /* A code used for mouseButton to indicate any mouse button. */
    public constant integer ANY = 255

    /* A code used for mouseButton to indicate no mouse buttons are clicked. */
    public constant integer NONE = 0

    /* A code used for mouseButton to indicate the left mouse button. */
    public constant integer LEFT = 1

    /* A code used for mouseButton to indicate the right mouse button. */
    public constant integer RIGHT = 2

    /* A code used for mouseButton to indicate the middle mouse button. */
    public constant integer MIDDLE = 4

    /* A code used for mouseButton to indicate the back mouse button. */
    public constant integer BACK = 8

    /* A code used for mouseButton to indicate the forward mouse button. */
    public constant integer FORWARD = 16

    /* 
    What mouse buttons, if any, are involved in this event. This value is a
    bitmask. If only a single button is involved in the event, the value will
    equal the constant value of that mouse button. If multiple buttons are
    involved, this value will equal the sum of all involved buttons.
    */
    public integer mouseButton = 0

    /* The amount the scroll wheel moved for this event. Positive numbers
    indicate the wheel scrolled up, and negative numbers indicate scroll down. */
    public number scrollAmount = 0

    /* What caused the event, e.g., CLICKED_MOUSE, MOVED_MOUSE, etc. */
    public integer eventType = 0

    /*
    How many clicks have occurred in a short period of time, 
    including this event (if it is a CLICKED_MOUSE event). 
    */
    public integer clickCount = 0

    /* The x-coordinate of the mouse event on the screen. */
    integer x = 0
    /* The y-coordinate of the mouse event on the screen. */
    integer y = 0

    /* How far the mouse has moved on the x-coordinate system since the last event. */
    integer movementX = 0
    /* How far the mouse has moved on the y-coordinate system since the last event. */
    integer movementY = 0

    // Used for testing the bits of the mouseButton field.
    BitwiseOperations bits

    /* 
    A flag used by the Game engine to determine if an event has already been
    sent to a listener. This is set to true just before sending the event to a
    listener. If the value is reset to false inside the listener, the engine
    will continue to send the event to other event listeners.
    */
    boolean eventHandled = false

    /*
    The Item which received, was the target of, or otherwise is relevant to the
    mouse event which has occurred. In the Game engine, if an Item is clicked
    directly, it will be stored here. If a MouseEvent is triggered with no such
    Item available, this will be undefined.
    */
    Item source = undefined

    /*
    This action returns the x coordinate of where the event was on the screen.

    Attribute: Returns The x coordinate of where the event was on the screen.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            integer x = event:GetX()
            integer y = event:GetY()
            output "The mouse was clicked at " + x + ", " + y
        end
    end
    */
    action GetX returns integer
        return x
    end

    /*
    This action returns the y coordinate of where the event was on the screen.

    Attribute: Returns The y coordinate of where the event was on the screen.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            integer x = event:GetX()
            integer y = event:GetY()
            output "The mouse was clicked at " + x + ", " + y
        end
    end
    */
    action GetY returns integer
        return y
    end

    /*
    This action returns how much the mouse has moved on the x-axis since the
    last movement event.

    Attribute: Returns How much the mouse has moved on the x-axis since the last movement event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener
    use Libraries.Interface.Events.MouseMovementListener

    // To try this example, click anywhere on the screen, drag the mouse, and release.
    class Main is Game, MouseListener, MouseMovementListener

        // Variables used to store the sum of the mouse movement between mouse
        // click and mouse release.
        integer sumX = 0
        integer sumY = 0

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
            AddMouseMovementListener(me)
        end

        action ClickedMouse(MouseEvent event)
            sumX = 0
            sumY = 0
        end

        action DraggedMouse(MouseEvent event)
            sumX = sumX + event:GetMovementX()
            sumY = sumY + event:GetMovementY()
        end

        action ReleasedMouse(MouseEvent event)
            output "The total distance moved between mouse clicked and released was " + sumX + ", " + sumY
        end
    end
    */
    action GetMovementX returns integer
        return movementX
    end

    /*
    This action returns how much the mouse has moved on the y-axis since the
    last movement event.

    Attribute: Returns How much the mouse has moved on the y-axis since the last movement event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener
    use Libraries.Interface.Events.MouseMovementListener

    // To try this example, click anywhere on the screen, drag the mouse, and release.
    class Main is Game, MouseListener, MouseMovementListener

        // Variables used to store the sum of the mouse movement between mouse
        // click and mouse release.
        integer sumX = 0
        integer sumY = 0

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
            AddMouseMovementListener(me)
        end

        action ClickedMouse(MouseEvent event)
            sumX = 0
            sumY = 0
        end

        action DraggedMouse(MouseEvent event)
            sumX = sumX + event:GetMovementX()
            sumY = sumY + event:GetMovementY()
        end

        action ReleasedMouse(MouseEvent event)
            output "The total distance moved between mouse clicked and released was " + sumX + ", " + sumY
        end
    end
    */
    action GetMovementY returns integer
        return movementY
    end

    /*
    This action sets whether this event should be considered handled by any 
    event listeners. In the Game engine, this is set to true just before sending
    the event to a listener. If the value is reset to false inside the listener,
    the engine will continue to send the event to other event listeners.

    Attribute: Parameter handled Whether or not this event should be considered handled.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        integer totalClicks = 0

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            totalClicks = totalClicks + 1
            output "The mouse has been clicked " + totalClicks + " times."

            // By setting the event handled flag to false, we tell the Game engine
            // to keep sending the MouseEvent to any other MouseListeners we have.
            // In this example, since it's our only MouseListener, it does nothing.
            event:SetEventHandled(false)
        end
    end
    */
    action SetEventHandled(boolean handled)
        eventHandled = handled
    end

    /*
    This action returns whether or not this event has already been handled.
    In the Game engine, this is set to true just before sending the event to a
    listener. If the value is reset to false inside the listener, the engine
    will continue to send the event to other event listeners.

    Attribute: Returns Whether or not this event has already been handled.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            // The event handled flag is set to true when the engine finds a mouse
            // listener to send the event to, so this should always return true.
            boolean handled = event:WasEventHandled()
            output "After clicking the mouse, handled = " + handled
        end
    end
    */
    action WasEventHandled returns boolean
        return eventHandled
    end

    /*
    This action sets the source item for this event, which is the the target of
    mouse event which has occurred (or is otherwise relevant to it). In the Game
    engine, if an Item is clicked directly, it will be stored here. If a 
    MouseEvent is triggered with no such Item available, this will be undefined.

    Attribute: Parameter item The source Item to be stored for this MouseEvent.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener
    use Libraries.Interface.Item2D

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:GetSource() not= undefined
                return now
            end

            Item2D newItem
            event:SetSource(newItem)
            event:SetEventHandled(false)
        end
    end

    
    */
    action SetSource(Item item)
        source = item
    end

    /*
    This action returns the source item for this event, which is the the target of
    mouse event which has occurred (or is otherwise relevant to it). In the Game
    engine, if an Item is clicked directly, it will be stored here. If a 
    MouseEvent is triggered with no such Item available, this will be undefined.

    Attribute: Returns The source Item for this MouseEvent.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener
    use Libraries.Interface.Item
    use Libraries.Game.Graphics.Drawable

    class Main is Game, MouseListener

        Drawable square

        action Main
            StartGame()
        end

        action CreateGame
            square:LoadFilledRectangle(200, 200)
            square:SetPosition(300, 200)
            Add(square)

            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            Item source = event:GetSource()

            if source = undefined
                output "The background was clicked!"
            elseif source:Equals(square)
                output "The square was clicked!"
            end
        end
    end
    */
    action GetSource returns Item
        return source
    end

    /*
    This action checks if this event was triggered by a mouse button being
    clicked. If it was, the action returns true. Otherwise, it returns false.

    Attribute: Returns Whether or not this event was triggered by a mouse click.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action ReleasedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action OutputEvent(MouseEvent event)
            if event:IsClicked()
                output "The mouse button was clicked!"
            elseif event:IsReleased()
                output "The mouse button was released!"
            end
        end
    end
    */
    action IsClicked returns boolean
        return eventType = CLICKED_MOUSE
    end

    /*
    This action checks if this event was triggered by a mouse button being
    released. If it was, the action returns true. Otherwise, it returns false.

    Attribute: Returns Whether or not this event was triggered by a mouse button being released.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action ReleasedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action OutputEvent(MouseEvent event)
            if event:IsClicked()
                output "The mouse button was clicked!"
            elseif event:IsReleased()
                output "The mouse button was released!"
            end
        end
    end
    */
    action IsReleased returns boolean
        return eventType = RELEASED_MOUSE
    end

    /*
    This action checks if this event was triggered by the mouse being moved.
    If it was, the action returns true. Otherwise, it returns false.

    Attribute: Returns Whether or not this event was triggered by mouse movement.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseMovementListener

    class Main is Game, MouseMovementListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseMovementListener(me)
        end

        action MovedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action DraggedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action OutputEvent(MouseEvent event)
            if event:IsMoved()
                output "The mouse was moved!"
            elseif event:IsDragged()
                output "The mouse was dragged!"
            end
        end
    end
    */
    action IsMoved returns boolean
        return eventType = MOVED_MOUSE
    end

    /*
    This action checks if this event was triggered by the mouse being dragged.
    If it was, the action returns true. Otherwise, it returns false.

    Attribute: Returns Whether or not this event was triggered by mouse dragging.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseMovementListener

    class Main is Game, MouseMovementListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseMovementListener(me)
        end

        action MovedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action DraggedMouse(MouseEvent event)
            OutputEvent(event)
        end

        action OutputEvent(MouseEvent event)
            if event:IsMoved()
                output "The mouse was moved!"
            elseif event:IsDragged()
                output "The mouse was dragged!"
            end
        end
    end
    */
    action IsDragged returns boolean
        return eventType = DRAGGED_MOUSE
    end

    /*
    This action checks if this event was triggered by the mouse wheel being
    scrolled. If it was, the action returns true. Otherwise, it returns false.

    Attribute: Returns Whether or not this event was triggered by the mouse wheel scrolling.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseWheelListener

    class Main is Game, MouseWheelListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseWheelListener(me)
        end

        action ScrolledMouse(MouseEvent event)
            OutputEvent(event)
        end

        action OutputEvent(MouseEvent event)
            if event:IsScrolled()
                output "The mouse wheel was scrolled!"
            end
        end
    end
    */
    action IsScrolled returns boolean
        return eventType = DRAGGED_MOUSE
    end

    /*
    The IsButtonEvent action checks if a particular button was involved in the
    event. For example, it indicates if a particular button was clicked as part
    of a CLICKED_MOUSE event, if a button was released as part of a 
    RELEASED_MOUSE event, or if a button was held down during a DRAGGED_MOUSE
    event. The given button parameter should be one of the mouse button
    constants in this class.

    Attribute: Parameter button Which mouse button to check. Should be one of the mouse button constants in MouseEvent.

    Attribute: Returns Whether or not the given button was involved in this event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        integer lastButton = 0

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:IsButtonEvent(lastButton)
                output "The same button was clicked twice in a row!"
            end

            lastButton = event:mouseButton
        end
    end
    */
    action IsButtonEvent(integer button) returns boolean
        if button = NONE
            return mouseButton = NONE
        end
        return bits:And(button, mouseButton) not= 0
    end

    /*
    The IsLeftButtonEvent action checks if the left mouse button was involved in
    the event. For example, it indicates if the left button was clicked as part
    of a CLICKED_MOUSE event, if it was released as part of a RELEASED_MOUSE 
    event, or if it was held down during a DRAGGED_MOUSE event.

    Attribute: Returns Whether or not the left mouse button was involved in this event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:IsLeftButtonEvent()
                output "The left mouse button was clicked!"
            end
        end
    end
    */
    action IsLeftButtonEvent returns boolean
        return bits:And(LEFT, mouseButton) not= 0
    end

    /*
    The IsRightButtonEvent action checks if the right mouse button was involved in
    the event. For example, it indicates if the right button was clicked as part
    of a CLICKED_MOUSE event, if it was released as part of a RELEASED_MOUSE 
    event, or if it was held down during a DRAGGED_MOUSE event.

    Attribute: Returns Whether or not the right mouse button was involved in this event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:IsRightButtonEvent()
                output "The right mouse button was clicked!"
            end
        end
    end
    */
    action IsRightButtonEvent returns boolean
        return bits:And(RIGHT, mouseButton) not= 0
    end

    /*
    The IsMiddleButtonEvent action checks if the middle mouse button was 
    involved in the event. For example, it indicates if the middle button was 
    clicked as part of a CLICKED_MOUSE event, if it was released as part of a 
    RELEASED_MOUSE event, or if it was held down during a DRAGGED_MOUSE event.

    Attribute: Returns Whether or not the middle mouse button was involved in this event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:IsMiddleButtonEvent()
                output "The middle mouse button was clicked!"
            end
        end
    end
    */
    action IsMiddleButtonEvent returns boolean
        return bits:And(MIDDLE, mouseButton) not= 0
    end

    /*
    The IsBackButtonEvent action checks if the back mouse button was involved in
    the event. For example, it indicates if the back button was clicked as part
    of a CLICKED_MOUSE event, if it was released as part of a RELEASED_MOUSE 
    event, or if it was held down during a DRAGGED_MOUSE event.

    Attribute: Returns Whether or not the back mouse button was involved in this event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:IsBackButtonEvent()
                output "The back mouse button was clicked!"
            end
        end
    end
    */
    action IsBackButtonEvent returns boolean
        return bits:And(BACK, mouseButton) not= 0
    end

    /*
    The IsBackButtonEvent action checks if the forward mouse button was involved
    in the event. For example, it indicates if the forward button was clicked as 
    part of a CLICKED_MOUSE event, if it was released as part of a 
    RELEASED_MOUSE event, or if it was held down during a DRAGGED_MOUSE event.

    Attribute: Returns Whether or not the forward mouse button was involved in this event.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Interface.Events.MouseEvent
    use Libraries.Interface.Events.MouseListener

    class Main is Game, MouseListener

        action Main
            StartGame()
        end

        action CreateGame
            AddMouseListener(me)
        end

        action ClickedMouse(MouseEvent event)
            if event:IsForwardButtonEvent()
                output "The forward mouse button was clicked!"
            end
        end
    end
    */
    action IsForwardButtonEvent returns boolean
        return bits:And(FORWARD, mouseButton) not= 0
    end

    /*
    This action returns how many times the mouse button described by this event
    has been recently clicked. The time considered to be "recent" is defined by 
    the ApplicationConfiguration (if mouse input is relevant to the application
    type). The value returned includes the button being clicked as part of this
    event, if the event is a CLICKED_MOUSE event - e.g., if the mouse is clicked
    exactly once, the value returned is 1. If a mouse button is clicked twice in
    rapid succession, the value returned will be 2.

    Attribute: Returns How many times the mouse button has been recently clicked.
    */
    action GetClickCount returns integer
        return clickCount
    end

end