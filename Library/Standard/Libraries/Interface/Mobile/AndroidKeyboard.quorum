package Libraries.Interface.Mobile

/*
The AndroidKeyboard class creates and displays soft keyboards on Android devices.
The soft keyboard is used in conjunction with the TextInputListener, TextInputEvent,
KeyboardListener and KeyboardEvent classes to receive and process text on Android
devices. By default, using the constructor DisplayKeyboard(), the keyboard has a
"done" button and no options enabled, including auto-capitalizing sentences, 
auto-correcting misspellings, etc. You can also specify the type of keyboard to
create and use by using the constructor DisplayKeyboard(integer keyboardType, integer returnButtonType)
in combination with the constants of this class (DATE_AND_TIME, SEARCH, etc.) as
the parameters. Note that keyboard options and settings are suggestions to the
Android device, which may choose to ignore them and use the device settings instead.
*/

class AndroidKeyboard

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a numeric keyboard (0-9) that has punctuation useful for entering
    dates and times (:, /, etc.) */
    public constant integer DATE_AND_TIME = 0

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a numeric keyboard (0-9) that has punctuation useful for entering
    dates (/, -, etc.) */
    public constant integer DATE = 1

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a numeric keyboard (0-9) that has punctuation useful for entering
    time (:) */
    public constant integer TIME = 2
    
    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a numeric keyboard (0-9) with all punctuation (., -, etc.) disabled. */
    public constant integer NUMERIC_NO_PUNCTUATION = 3

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a numeric keyboard (0-9) which allows exactly one period (.) to be
    entered. All other punctuation (-, /, etc.) is disabled. */
    public constant integer NUMERIC_WITH_DECIMAL = 4

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType) 
    to create a numeric keyboard (0-9) which allows a leading negative (-) to be
    entered. All other punctuation (., /, etc.) is disabled. */
    public constant integer NUMERIC_SIGNED = 5

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a numeric keyboard (0-9) which allows both a leading negative (-)
    to be entered as well as exactly one period (.). All other punctuation (*, /, etc.)
    is disabled. */
    public constant integer NUMERIC_SIGNED_DECIMAL = 6

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a phone keyboard (0-9 with letters on the buttons) that has punctuation
    useful for entering phone numbers (-, #, etc.) */
    public constant integer PHONE = 7

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard with useful e-mail buttons immediately accessible,
    such as the at symbol (@) and a domain extension button (.com, .edu, etc.) */
    public constant integer EMAIL_ADDRESS = 8
    
    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which automatically capitalizes the first letter
    of each sentence, automatically corrects misspellings, and offers suggestions.
    Must be used in conjunction with the LINEFEED returnButtonType in order to
    create a keyboard that can input multiple lines. Note that keyboard options
    are suggestions to the Android device, which may ignore them and use the device
    settings instead. */
    public constant integer TEXT_AUTO_CAPITALIZE_SENTENCES_AUTO_CORRECT = 9 

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which automatically capitalizes the first letter
    of each word, automatically corrects misspellings, and offers suggestions.
    Must be used in conjunction with the LINEFEED returnButtonType in order to
    create a keyboard that can input multiple lines. Note that keyboard options
    are suggestions to the Android device, which may ignore them and use the device
    settings instead. */
    public constant integer TEXT_AUTO_CAPITALIZE_WORDS_AUTO_CORRECT = 10

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which automatically capitalizes every letter,
    automatically corrects misspellings, and offers suggestions. Must be used in
    conjunction with the LINEFEED returnButtonType in order to create a keyboard
    that can input multiple lines. Note that keyboard options are suggestions to
    the Android device, which may ignore them and use the device settings instead. */
    public constant integer TEXT_AUTO_CAPITALIZE_LETTERS_AUTO_CORRECT = 11

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which automatically capitalizes the first letter of
    every sentence but does not offer suggestions or correct misspellings. Must 
    be used in conjunction with the LINEFEED returnButtonType in order to create
    a keyboard that can input multiple lines. Note that keyboard options are 
    suggestions to the Android device, which may ignore them and use the device 
    settings instead. */
    public constant integer TEXT_AUTO_CAPITALIZE_SENTENCES_NO_SUGGESTIONS = 12

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which automatically capitalizes the first letter of
    every word but does not offer suggestions or correct misspellings. Must be 
    used in conjunction with the LINEFEED returnButtonType in order to create
    a keyboard that can input multiple lines. Note that keyboard options are 
    suggestions to the Android device, which may ignore them and use the device 
    settings instead. */
    public constant integer TEXT_AUTO_CAPITALIZE_WORDS_NO_SUGGESTIONS = 13

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which automatically capitalizes every letter, but
    does not offer suggestions or correct misspellings. Must be used in conjunction
    with the LINEFEED returnButtonType in order to create a keyboard that can
    input multiple lines. Note that keyboard options are suggestions to the Android
    device, which may ignore them and use the device settings instead. */
    public constant integer TEXT_AUTO_CAPITALIZE_LETTERS_NO_SUGGESTIONS = 14

    /* A keyboardType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to create a text keyboard which does not offer suggestions, automatically
    capitalize any words, or fix any misspellings. Must be used in conjunction
    with the LINEFEED returnButtonType in order to create a keyboard that can
    input multiple lines. Note that keyboard options are suggestions to the Android
    device, which may ignore them and use the device settings instead. */
    public constant integer TEXT_NO_CORRECTIONS = 15

    /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "search", a magnifying glass, or other similar appearances.
    Appearance varies based on the Android device and/or soft keyboard used. */
    public constant integer SEARCH = 0

    /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "next", a right-pointing arrow into a wall, or other similar
    appearances. Appearance varies based on the Android device and/or soft keyboard
    used. */
    public constant integer NEXT = 1

    /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "go", a right-pointing arrow, or other similar appearances.
    Appearance varies based on the Android device and/or soft keyboard used. */
    public constant integer GO = 2

     /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "previous", a left-pointing arrow into a wall, or other 
    similar appearances. Appearance varies based on the Android device and/or
    soft keyboard used. */
    public constant integer PREVIOUS = 3

    /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "send", a paper airplane, or other similar appearances.
    Appearance varies based on the Android device and/or soft keyboard used. */
    public constant integer SEND = 4

    /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "enter", a carriage return, or other similar appearances.
    Appearance varies based on the Android device and/or soft keyboard used. 
    Note that this returnButtonType must be used if you want multiple line input,
    and not all keyboard types, such as the numeric keyboards, will allow you
    to enter multiple line input even if this option is used (but it will still
    make the appearance that of a linefeed). */
    public constant integer LINEFEED = 5

    /* A returnButtonType used for DisplayKeyboard(integer keyboardType, integer returnButtonType)
    to change the appearance of the return/enter key on the keyboard. This makes
    the button display "done", a checkmark or other similar appearances. Appearance
    varies based on the Android device and/or soft keyboard used. */
    public constant integer DONE = 6

    /*
        This action creates and displays a default keyboard. The default keyboard
        has the TEXT_NO_CORRECTIONS keyboardType and DONE returnButtonType.
    
        Attribute: Example
        AndroidKeyboard keyboard
        keyboard:DisplayKeyboard()
    */
    system action DisplayKeyboard()

    /*
        This action creates and displays a customized keyboard. The type of keyboard
        is set by the keyboardType parameter, using one of the keyboardType constants
        from this class, and the enter key appearance/functionality is set by
        the returnButtonType parameter, using one of the returnButtonType constants
        from this class.

        Attribute: Parameter keyboardType The type of keyboard (such as numeric) to create.

        Attribute: Parameter returnButtonType The enter key appearance/functionality of the keyboard.

        Attribute: Example
        AndroidKeyboard keyboard
        keyboard:DisplayKeyboard(keyboard:PHONE, keyboard:DONE)
    */
    system action DisplayKeyboard(integer keyboardType, integer returnButtonType)

    /*
        This action closes the keyboard and removes it from the screen. This is
        called from within DisplayKeyboard() and DisplayKeyboard(integer keyboardType, integer returnButtonType)
        when the return button (except when the returnButtonType is LINEFEED) is
        pressed on the keyboard.

        Attribute: Example
        AndroidKeyboard keyboard
        keyboard:DisplayKeyboard(keyboard:PHONE, keyboard:DONE)
        keyboard:CloseKeyboard()
    */
    system action CloseKeyboard()

    /*
        This action gets the keyboardType of the keyboard. 
        
        Attribute: Return The keyboardType of the keyboard.

        Attribute: Example
        AndroidKeyboard keyboard
        keyboard:DisplayKeyboard()
        integer keyboardType = keyboard:GetKeyboardType()
    */
    system action GetKeyboardType() returns integer

    /*
        This action gets the returnButtonType of the keyboard.

        Attribute: Return The returnButtonType of the keyboard.
        
        Attribute: Example
        AndroidKeyboard keyboard
        keyboard:DisplayKeyboard()
        integer returnType = keyboard:GetReturnButtonType()
    */
    system action GetReturnButtonType() returns integer
end