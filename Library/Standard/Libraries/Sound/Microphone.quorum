package Libraries.Sound

use Libraries.System.SystemHelper
use Libraries.Compute.Math
use Libraries.Sound.Audio

class Microphone 
    
    /*
    The Record action makes the Microphone begin recording. This call is
    non-blocking, which means code will continue to execute after calling this
    action. While the Microphone is recording, AudioSamples may be fetched from
    the microphone using the GetSamples action.

    Attribute: Example

    use Libraries.Sound.AudioSamples
    use Libraries.Sound.Microphone
    use Libraries.Sound.Audio
    use Libraries.System.DateTime
    use Libraries.System.SystemHelper

    DateTime time
    Microphone microphone
    Audio audio
    SystemHelper helper

    number startTime = time:GetEpochTime()

    // We set the microphone to record up to 1 second of audio between requests for samples.
    microphone:SetSizeInSeconds(1)
    microphone:Record()

    repeat while time:GetEpochTime() - startTime < 5000
        AudioSamples samples = microphone:GetSamples()
        if samples not= undefined
            audio:AddToQueue(samples)
        end
        // Wait for 100 miliseconds before checking for more audio.
        helper:Sleep(100)
    end

    microphone:Stop()

    audio:Play()
    repeat while audio:IsPlaying()
        audio:Stream()
    end
    */
    system action Record

    /*
    The GetSamples action returns the samples that have been recorded by the
    Microphone. If no samples are currently available (either because the
    Microphone is not recording or because no more samples have been captured
    since the last time GetSamples was called) then this returns undefined. As
    such, all output from this action should be tested to ensure it is not
    undefined before use.

    Attribute: Returns The recorded AudioSamples, or undefined if none are available.

    Attribute: Example

    use Libraries.Sound.AudioSamples
    use Libraries.Sound.Microphone
    use Libraries.Sound.Audio
    use Libraries.System.DateTime
    use Libraries.System.SystemHelper

    DateTime time
    Microphone microphone
    Audio audio
    SystemHelper helper

    number startTime = time:GetEpochTime()

    // We set the microphone to record up to 1 second of audio between requests for samples.
    microphone:SetSizeInSeconds(1)
    microphone:Record()

    repeat while time:GetEpochTime() - startTime < 5000
        AudioSamples samples = microphone:GetSamples()
        if samples not= undefined
            audio:AddToQueue(samples)
        end
        // Wait for 100 miliseconds before checking for more audio.
        helper:Sleep(100)
    end

    microphone:Stop()

    audio:Play()
    repeat while audio:IsPlaying()
        audio:Stream()
    end
    */
    system action GetSamples returns AudioSamples

    /*
    The Stop action stops Microphone recording. Once stopped, the Microphone
    will not collect any more AudioSamples, but the last samples that were
    recorded can still be retrieved from GetSamples.

    Attribute: Example

    use Libraries.Sound.AudioSamples
    use Libraries.Sound.Microphone
    use Libraries.Sound.Audio
    use Libraries.System.DateTime
    use Libraries.System.SystemHelper

    DateTime time
    Microphone microphone
    Audio audio
    SystemHelper helper

    number startTime = time:GetEpochTime()

    // We set the microphone to record up to 1 second of audio between requests for samples.
    microphone:SetSizeInSeconds(1)
    microphone:Record()

    repeat while time:GetEpochTime() - startTime < 5000
        AudioSamples samples = microphone:GetSamples()
        if samples not= undefined
            audio:AddToQueue(samples)
        end
        // Wait for 100 miliseconds before checking for more audio.
        helper:Sleep(100)
    end

    microphone:Stop()

    audio:Play()
    repeat while audio:IsPlaying()
        audio:Stream()
    end
    */
    system action Stop

    /*
    The RecordUntilDone action will wait for the given number of seconds and return an
    AudioSamples object containing the recorded audio data over that time. This
    call is blocking, which means program execution must wait until this call is
    finished before it moves to the next line of code in the program.

    Attribute: Parameter seconds How many seconds of audio to record.
    
    Attribute: Returns An AudioSamples object containing the recorded sounds.

    Attribute: Example

    use Libraries.Sound.AudioSamples
    use Libraries.Sound.Microphone
    use Libraries.Sound.Audio

    Microphone microphone

    AudioSamples recording = microphone:RecordUntilDone(5)

    Audio audio
    audio:Load(recording)
    audio:PlayUntilDone()
    */
    action RecordUntilDone(number seconds) returns AudioSamples
        Math math
        integer size = GetSize()
        SetSizeInSeconds(seconds)
        Record()
        SystemHelper helper
        helper:Sleep(cast(integer, math:Round(seconds * 1000)))
        Stop()
        AudioSamples samples = GetSamples()
        SetSize(size)
        return samples
    end

    /*
    The IsRecording action returns whether or not this Microphone is currently
    recording.

    Attribute: Returns Whether or not this Microphone is currently recording.

    Attribute: Example

    use Libraries.Sound.Microphone

    Microphone microphone
    output "Microphone recording yet? " + microphone:IsRecording()
    microphone:Record()
    output "Is the Microphone recording now? " + microphone:IsRecording()
    microphone:Stop()
    output "Is the Microphone still recording? " + microphone:IsRecording()
    */
    system action IsRecording returns boolean

    /*
    The GetSize action returns the number of samples that can be stored in each
    AudioSamples object returned by GetSamples. If recorded audio exceeds the 
    size of the AudioSamples, the beginning of the recorded audio will be cut 
    off. When recording, the Microphone records 44100 samples per second.

    Attribute: Returns The number of samples that can be stored in any AudioSamples returned by GetSamples.

    Attribute: Example

    use Libraries.Sound.Microphone

    Microphone microphone
    output "The microphone stores up to " + microphone:GetSize() + " samples of audio by default."
    output "The microphone records up to " + microphone:GetSizeInSeconds() + " seconds of audio by default."
    */
    system action GetSize returns integer

    /*
    The SetSize action sets the number of samples that can be stored in each
    AudioSamples object returned by GetSamples. If recorded audio exceeds the 
    size of the AudioSamples, the beginning of the recorded audio will be cut 
    off. When recording, the Microphone records 44100 samples per second.

    Attribute: Parameter samples The maximum number of samples that should be stored in each AudioSamples object returned by GetSamples.

    Attribute: Example

    use Libraries.Sound.AudioSamples
    use Libraries.Sound.Microphone
    use Libraries.Sound.Audio
    use Libraries.System.DateTime
    use Libraries.System.SystemHelper

    DateTime time
    Microphone microphone
    Audio audio
    SystemHelper helper

    number startTime = time:GetEpochTime()

    // We set the microphone to record up to 44100 samples of audio between requests for samples.
    microphone:SetSize(44100)
    microphone:Record()

    repeat while time:GetEpochTime() - startTime < 5000
        AudioSamples samples = microphone:GetSamples()
        if samples not= undefined
            audio:AddToQueue(samples)
        end
        // Wait for 100 miliseconds before checking for more audio.
        helper:Sleep(100)
    end

    microphone:Stop()

    audio:Play()
    repeat while audio:IsPlaying()
        audio:Stream()
    end
    */
    system action SetSize(integer samples)

    /*
    The SetSizeInSeconds action sets how many seconds of audio can be stored in
    any AudioSamples objects returned by the GetSamples action. If recorded 
    audio exceeds the size of the AudioSamples, the beginning of the recorded 
    audio will be cut off.

    Attribute: Parameter seconds The maximum number of seconds that should be stored in each AudioSamples object returned by GetSamples.

    Attribute: Example

    use Libraries.Sound.AudioSamples
    use Libraries.Sound.Microphone
    use Libraries.Sound.Audio
    use Libraries.System.DateTime
    use Libraries.System.SystemHelper

    DateTime time
    Microphone microphone
    Audio audio
    SystemHelper helper

    number startTime = time:GetEpochTime()

    // We set the microphone to record up to 1 second of audio between requests for samples.
    microphone:SetSizeInSeconds(1)
    microphone:Record()

    repeat while time:GetEpochTime() - startTime < 5000
        AudioSamples samples = microphone:GetSamples()
        if samples not= undefined
            audio:AddToQueue(samples)
        end
        // Wait for 100 miliseconds before checking for more audio.
        helper:Sleep(100)
    end

    microphone:Stop()

    audio:Play()
    repeat while audio:IsPlaying()
        audio:Stream()
    end
    */
    action SetSizeInSeconds(number seconds)
        Math math
        SetSize((cast(integer, math:Round(44100.0 * seconds))))
    end

    /*
    The GetSizeInSeconds action returns how many seconds of audio can be stored 
    in any AudioSamples objects returned by the GetSamples action. If recorded 
    audio exceeds the size of the AudioSamples, the beginning of the recorded 
    audio will be cut off.

    Attribute: Returns The number of seconds that can be stored in any AudioSamples returned by GetSamples.

    Attribute: Example

    use Libraries.Sound.Microphone

    Microphone microphone
    output "The microphone stores up to " + microphone:GetSize() + " samples of audio by default."
    output "The microphone records up to " + microphone:GetSizeInSeconds() + " seconds of audio by default."
    */
    action GetSizeInSeconds returns number
        return GetSize() / 44100.0
    end

end