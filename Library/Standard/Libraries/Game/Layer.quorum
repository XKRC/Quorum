package Libraries.Game

use Libraries.Game.Graphics.Camera
use Libraries.Interface.Item
use Libraries.Interface.Events.MouseEvent
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.ResizeEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener

class Layer 
    
    boolean visible = true

    boolean automaticResizing = true

    /*
    This action will update all of the items contained within this Layer. The
    given number of seconds will be passed to each updated item. This is
    automatically called by the Game class as needed. Most users will never need
    to use this action directly.
    */
    blueprint action Update(number seconds)

    /*
    This action will draw all items in this Layer on the screen (if they can be
    drawn and they aren't hidden). If the Layer is currently hidden, then this
    action will do nothing. This is automatically called by the Game class as 
    needed. Most users will never need to use this action directly.
    */
    blueprint action Draw

    /*
    This action will hide the Layer. This will prevent the Layer from appearing
    when asked to draw.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable square
            square:LoadFilledRectangle(200, 200)
            
            Layer2D layer
            layer:Add(square)

            AddLayer(layer)
            layer:Hide()
        end

        action Update(number seconds)
        end
    end
    */
    action Hide
        visible = false
    end

    /*
    This action will show the Layer. When Draw is called on a Layer which is
    showing, its items will appear on the screen. Layers begin showing by default.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable square
            square:LoadFilledRectangle(200, 200)
            
            Layer2D layer
            layer:Add(square)

            AddLayer(layer)
            layer:Hide()

            // Since layers are visible by default, it's only necessary to Show
            // them after they've been hidden.
            layer:Show()
        end

        action Update(number seconds)
        end
    end
    */
    action Show
        visible = true
    end

    /*
    This action will return if the current layer is currently visible or not.
    Layers which are showing will be drawn on the screen automatically by the
    Game class. Layers begin showing by default.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Drawable square
            square:LoadFilledRectangle(200, 200)
            
            Layer2D layer
            layer:Add(square)

            AddLayer(layer)

            boolean showing = layer:IsShowing()
            output "layer:IsShowing() returned " + showing

            layer:Hide()

            showing = layer:IsShowing()
            output "After calling Hide(), IsShowing() returned " + showing
        end

        action Update(number seconds)
        end
    end
    */
    action IsShowing returns boolean
        return visible
    end

    /*
    This action will set the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.

    Attribute: Parameter camera The camera that this layer should use.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.OrthographicCamera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            OrthographicCamera camera
            Layer2D layer
            layer:SetCamera(camera)
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end
    */
    blueprint action SetCamera(Camera camera)

    /*
    This action will return the camera being used by this Layer. The camera is used
    to determine what will be drawn on the screen. Objects will be drawn on the
    screen as they are seen by the Layer's set camera.

    Attribute: Returns The camera currently being used by this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Camera

    class Main is Game

        Camera layerCamera = undefined

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layerCamera = layer:GetCamera()
            AddLayer(layer)
        end

        action Update(number seconds)
        end
    end
    */
    blueprint action GetCamera returns Camera

    /*
    This action will notify mouse listeners that are a part of this layer of the
    given mouse event. This is called automatically by the Game engine as 
    needed. Most users will never need to use this action directly.

    Attribute: Parameter event The MouseEvent to send to the MouseListeners.
    Attribute: Returns The Item which intercepted the event, or undefined if no Item received the event.
    */
    blueprint action ProcessMouseEvent(MouseEvent event) returns Item

    /*
    This action will notify touch listeners that are a part of this layer of the
    given touch event. This is called automatically by the Game engine as 
    needed. Most users will never need to use this action directly.

    Attribute: Parameter event The TouchEvent to send to the TouchListeners.
    */
    blueprint action ProcessTouchEvent(TouchEvent event) returns Item

    /*
    This action will add a MouseListener to the layer. When the layer receives a
    mouse event, it will first try to find the topmost item which can handle the
    event. If the event is not handled, then all MouseListeners in the layer 
    will receive the event.

    Attribute: Parameter listener The MouseListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseListener.
        MouseListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action AddMouseListener(MouseListener listener)

    /*
    This action will add a MouseMovementListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseMovementListeners in the layer will receive the event.

    Attribute: Parameter listener The MouseMovementListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseMovementListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseMovementListener.
        MouseMovementListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseMovementListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action AddMouseMovementListener(MouseMovementListener listener)

    /*
    This action will add a MouseWheelListener to the layer. When the layer
    receives a mouse event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    MouseWheelListeners in the layer will receive the event.

    Attribute: Parameter listener The MouseWheelListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseWheelListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseWheelListener.
        MouseWheelListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseWheelListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action AddMouseWheelListener(MouseWheelListener listener)

    /*
    This action will add a TouchListener to the layer. When the layer
    receives a touch event, it will first try to find the topmost item which can
    handle the event. If the event is not handled, then all 
    TouchListeners in the layer will receive the event.

    Attribute: Parameter listener The TouchListener to add to this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.TouchListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from TouchListener.
        TouchListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddTouchListener(myListener)
            AddLayer(layer)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action AddTouchListener(TouchListener listener)
    
    /*
    This action will remove a MouseListener from the layer. The listener will no
    longer receive events from the layer. If the given MouseListener is not on
    the layer before calling this action, then this action will have no effect.

    Attribute: Parameter listener The MouseListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseListener.
        MouseListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseListener(myListener)
            AddLayer(layer)

            layer:RemoveMouseListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action RemoveMouseListener(MouseListener listener)

    /*
    This action will remove a MouseMovementListener from the layer. The listener
    will no longer receive events from the layer. If the given 
    MouseMovementListener is not on the layer before calling this action, then 
    this action will have no effect.

    Attribute: Parameter listener The MouseMovementListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseMovementListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseMovementListener.
        MouseMovementListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseMovementListener(myListener)
            AddLayer(layer)

            layer:RemoveMouseMovementListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action RemoveMouseMovementListener(MouseMovementListener listener)

    /*
    This action will remove a MouseWheelListener from the layer. The listener 
    will no longer receive events from the layer. If the given 
    MouseWheelListener is not on the layer before calling this action, then this
    action will have no effect.

    Attribute: Parameter listener The MouseWheelListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.MouseWheelListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from MouseWheelListener.
        MouseWheelListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddMouseWheelListener(myListener)
            AddLayer(layer)

            layer:RemoveMouseWheelListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action RemoveMouseWheelListener(MouseWheelListener listener)

    /*
    This action will remove a TouchListener from the layer. The listener will no
    longer receive events from the layer. If the given TouchListener is not on
    the layer before calling this action, then this action will have no effect.

    Attribute: Parameter listener The TouchListener to remove from this layer.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Interface.Events.TouchListener

    class Main is Game

        // For most programs, this should be replaced with 
        // a custom class inheriting from TouchListener.
        TouchListener myListener

        action Main
            StartGame()
        end

        action CreateGame
            Layer2D layer
            layer:AddTouchListener(myListener)
            AddLayer(layer)

            layer:RemoveTouchListener(listener)
        end

        action Update(number seconds)
        end

    end

    */
    blueprint action RemoveTouchListener(TouchListener listener)

    /*
    This action sets if the Layer should automatically respond to ResizeEvents.
    If this value is true, then the Layer will automatically adjust the camera
    and resize Items on the Layer when a ResizeEvent occurs.
    */
    action SetAutomaticResizing(boolean resizing)
        automaticResizing = resizing
    end

    /*
    This action returns whether or not the Layer will automatically respond to 
    ResizeEvents. If this value is true, then the Layer will automatically 
    adjust the camera and resize Items on the Layer when a ResizeEvent occurs.
    */
    action GetAutomaticResizing returns boolean
        return automaticResizing
    end

    /*
    This action will resize the Layer to match the dimensions of the provided
    ResizeEvent. This action is called automatically by the Game engine if the
    GetAutomaticResizing() value returns true. Users should not typically need
    to call this action directly.
    */
    blueprint action Resize(ResizeEvent event)

end