package Libraries.Game.Collision

use Libraries.Containers.Array
use Libraries.Game.Collision.CollisionPoint3D
use Libraries.Interface.Item3D
use Libraries.Compute.Vector3
use Libraries.Compute.Math
use Libraries.Compute.Matrix3
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Game.Physics.CollisionPersistentData
use Libraries.Game.Physics.all

/*
This class records at max 4 collision points during one collision between two 
objects. When more collision points are calculated by the program, the program
will keep the collision points that causes the deepest penetration.
This class is also known as the persistent manifold.
*/
class LocalCollisionPoints3D
    public constant integer MAX_COLLISION_POINTS = 4

    Array<CollisionPoint3D> points  //this array tells you what kind of tact was made

    Item3D body0
    Item3D body1
    integer pointCount = 0
    
    integer index1A = 0

    on create
        repeat MAX_COLLISION_POINTS times
            CollisionPoint3D point
            points:Add(point)
        end
    end

    /*
    This action records the 3D objects that are involved in the collision into
    this LocalCollisionPoints3D class and reset the number of collision points
    recorded to 0 and the index of this LocalCollisionPoints3D (if there is ever
    an array of LocalCollisionPoints3D) to 0.
    Attribute: Parameter body0 The first item.
    Attribute: Parameter body1 The second item.
    */
    action Set(Item3D body0, Item3D body1)
        me:body0 = body0
        me:body1 = body1
        pointCount = 0
        index1A = 0
    end

    /*
    This action returns the CollisionPoint3D and its index that will be replaced
    when there are more than 4 CollisionPoint3Ds that needs to be stored inside
    this LocalCollisionPoints3D.
    Attribute: Parameter point The collision point that will be replaced.
    Attribute: Returns the index of the collision point that will be replaced.
    */
    private action SortCachedPoints(CollisionPoint3D point) returns integer
        integer maxPenetrationIndex = -1
        number maxPenetration = point:GetDistance()
        integer i = 0
        repeat while i < MAX_COLLISION_POINTS
            if points:Get(i):GetDistance() < maxPenetration
                maxPenetrationIndex = i
                maxPenetration = points:Get(i):GetDistance()
            end
    
            i = i + 1
        end

        number res0 = 0
        number res1 = 0
        number res2 = 0
        number res3 = 0
        if maxPenetrationIndex not= 0
            Vector3 a0
            a0:Set(point:GetLocalPointA())
            a0:Subtract(points:Get(1):GetLocalPointA())

            Vector3 b0
            b0:Set(points:Get(3):GetLocalPointA())
            b0:Subtract(points:Get(2):GetLocalPointA())

            Vector3 cross
            cross:Set(a0)
            cross:CrossProduct(b0)

            res0 = cross:LengthSquared()
        end

        if maxPenetrationIndex not= 1
            Vector3 a1
            a1:Set(point:GetLocalPointA())
            a1:Subtract(points:Get(0):GetLocalPointA())

            Vector3 b1
            b1:Set(points:Get(3):GetLocalPointA())
            b1:Subtract(points:Get(2):GetLocalPointA())

            Vector3 cross
            cross:Set(a1)
            cross:CrossProduct(b1)
            
            res1 = cross:LengthSquared()
        end

        if maxPenetrationIndex not= 2
            Vector3 a2
            a2:Set(point:GetLocalPointA())
            a2:Subtract(points:Get(0):GetLocalPointA())

            Vector3 b2
            b2:Set(points:Get(3):GetLocalPointA())
            b2:Subtract(points:Get(1):GetLocalPointA())
            
            Vector3 cross
            cross:Set(a2)
            cross:CrossProduct(b2)

            res2 = cross:LengthSquared()
        end

        if maxPenetrationIndex not= 3
            Vector3 a3
            a3:Set(point:GetLocalPointA())
            a3:Subtract(points:Get(0):GetLocalPointA())
            
            Vector3 b3
            b3:Set(points:Get(2):GetLocalPointA())
            b3:Subtract(points:Get(1):GetLocalPointA())
            
            Vector3 cross
            cross:Set(a3)
            cross:CrossProduct(b3)

            res3 = cross:LengthSquared()
        end

        Math math
        res0 = math:AbsoluteValue(res0)
        res1 = math:AbsoluteValue(res1)
        res2 = math:AbsoluteValue(res2)
        res3 = math:AbsoluteValue(res3)

        integer maxIndex = -1
        number maxValue = 0
        maxValue = maxValue:GetMinimumValue()

        if res0 > maxValue
            maxIndex = 0
            maxValue = res0
        end

        if res1 > maxValue
            maxIndex = 1
            maxValue = res1
        end

        if res2 > maxValue
            maxIndex = 2
            maxValue = res2
        end

        if res3 > maxValue
            maxIndex = 3
            maxValue = res3
        end

        return maxIndex
    end

    /*
    This action returns the first 3D object that is involved in the collision
    recorded in this LocalCollisionPoints3D.
    Attribute: Returns the first 3D object that is involved in the collision
    recorded in this LocalCollisionPoints3D.
    */
    action GetBody0 returns Item3D
        return body0
    end

    /*
    This action returns the second 3D object that is involved in the collision
    recorded in this LocalCollisionPoints3D.
    Attribute: Returns the second 3D object that is involved in the collision
    recorded in this LocalCollisionPoints3D.
    */
    action GetBody1 returns Item3D
        return body1
    end

    /*
    This action records the 3D objects that are involved in the collision into
    this LocalCollisionPoints3D class.
    Attribute: Parameter body0 The first object that is involved in the collision.
    Attribute: Parameter body1 The second object that is involved in the collision.
    */
    action SetBodies(Item3D body0, Item3D body1)
        me:body0 = body0
        me:body1 = body1
    end

    /*
    This action returns number of collision points being recorded by this
    LocalCollisionPoints3D.
    Attribute: Returns the number of collision points being recorded by this
    LocalCollisionPoints3D.
    */
    action GetPointCount returns integer
        return pointCount
    end

    /*
    This action returns a specific collision point based on the array index
    that you passed in.
    Attribute: Parameter index Array index of the collision point that you want to access.
    Attribute: Returns the specific collision point based on the array index
    that you passed in.
    */
    action GetCollisionPoint(integer index) returns CollisionPoint3D
        return points:Get(index)
    end

    /*
    This action returns the index of a collision point stored inside this
    LocalCollisionPoints3D that is closest to the "CollisionPoint3D newPoint"
    that you passed in.
    Attribute: Parameter newPoint The collision point that you want to find the closest point that is already in the current LocalCollisionPoints3D
    Attribute: Returns the index of a collision point stored inside this LocalCollisionPoints3D that is closest to the "CollisionPoint3D newPoint."
    */
    action GetCacheEntry(CollisionPoint3D newPoint) returns integer
        number shortestDistance = GetCollisionBreakingThreshold() * GetCollisionBreakingThreshold()
        integer size = GetPointCount()
        integer nearestPoint = -1
        Vector3 diffA

        integer i = 0
        repeat while i < size
            CollisionPoint3D mp = points:Get(i)

            diffA:Set(mp:GetLocalPointA())
            diffA:Subtract(newPoint:GetLocalPointA())

            number distanceToCollisionPoint = diffA:DotProduct(diffA)
            if distanceToCollisionPoint < shortestDistance
                shortestDistance = distanceToCollisionPoint
                nearestPoint = i
            end

            i = i + 1
        end

        return nearestPoint
    end

    /*
    This action clears all of the data about forces, impulses, etc. applied at
    a collision point.
    Attribute: Parameter point The collision point of interest.
    */
    action ClearPersistentData(CollisionPoint3D point)
        CollisionPersistentData cpd = point:GetPersistentData()
        if cpd not= undefined
            point:SetPersistentData(undefined)
        end
    end

    /*
    This action adds a new collision point to this LocalCollisionPoints3D.
    Attribute: Parameter newPoint The collision point to be added.
    */
    action AddCollisionPoint(CollisionPoint3D newPoint) returns integer
        integer insertIndex = GetPointCount()
        if insertIndex = MAX_COLLISION_POINTS
            if MAX_COLLISION_POINTS >= 4
                insertIndex = SortCachedPoints(newPoint)
            else
                insertIndex = 0
            end

            ClearPersistentData(points:Get(insertIndex))
        else
            pointCount = pointCount + 1
        end
        points:Get(insertIndex):Set(newPoint)
        return insertIndex
    end

    /*
    This action deletes a collision point from this LocalCollisionPoints3D.
    Attribute: Parameter index The index of the collision point that should be deleted from the current LocalCollisionPoints3D.
    */
    action RemoveCollisionPoint(integer index)
        ClearPersistentData(points:Get(index))

        integer lastUsedIndex = GetPointCount() - 1
        if index not= lastUsedIndex
            points:Get(index):Set(points:Get(lastUsedIndex))
            points:Get(lastUsedIndex):SetPersistentData(undefined)
            points:Get(lastUsedIndex):SetAppliedImpulse(0)
            points:Get(lastUsedIndex):SetLateralFrictionInitialized(false)
            points:Get(lastUsedIndex):SetAppliedImpulseLateralA(0)
            points:Get(lastUsedIndex):SetAppliedImpulseLateralB(0)
            points:Get(lastUsedIndex):SetLifeTime(0)
        end

        pointCount = pointCount - 1
    end

    /*
    This action switches out a collision point stored at the "insertIndex" of this
    LocalCollisionPoints3D with a "newPoint" that you passed in.
    Attribute: Parameter newPoint The collision point that will replace another collision point.
    Attribute: Parameter insertIndex The index to put this new collision point.
    */
    action ReplaceCollisionPoint(CollisionPoint3D newPoint, integer insertIndex)
        integer lifeTime = points:Get(insertIndex):GetLifeTime()
        number appliedImpulse = points:Get(insertIndex):GetAppliedImpulse()
        number appliedLateralImpulse1 = points:Get(insertIndex):GetAppliedImpulseLateralA()
        number appliedLateralImpulse2 = points:Get(insertIndex):GetAppliedImpulseLateralB()

        CollisionPersistentData cache = points:Get(insertIndex):GetPersistentData()

        points:Get(insertIndex):Set(newPoint)
        
        points:Get(insertIndex):SetPersistentData(cache)
        points:Get(insertIndex):SetAppliedImpulse(appliedImpulse)
        points:Get(insertIndex):SetAppliedImpulseLateralA(appliedLateralImpulse1)
        points:Get(insertIndex):SetAppliedImpulseLateralB(appliedLateralImpulse2)
        points:Get(insertIndex):SetLifeTime(lifeTime)
    end

    /*
    This action checks whether the distances between objects A and B is small
    enough for these two objects to be considered as colliding.
    Attribute: Parameter point The collision point to check.
    Attribute: Returns true if the objcts are colliding at the collision point.
    */
    private action ValidCollisionDistance(CollisionPoint3D point) returns boolean
        return point:GetDistance() <= GetCollisionBreakingThreshold()
    end

    /*
    This action changes the global coordinates of the collision points on objects
    A and B.
    Attribute: Parameter transformA The position of the first object.
    Attribute: Parameter transformB The position of the second object.
    */
    action RefreshCollisionPoints(PhysicsPosition3D transformA, PhysicsPosition3D transformB)
        Vector3 tmp
        integer i = GetPointCount() - 1

        repeat while i >= 0
            CollisionPoint3D collisionPoint = points:Get(i)
            
            collisionPoint:GetWorldPositionOnA():Set(collisionPoint:GetLocalPointA())
            transformA:Transform(collisionPoint:GetWorldPositionOnA())

            collisionPoint:GetWorldPositionOnB():Set(collisionPoint:GetLocalPointB())
            transformB:Transform(collisionPoint:GetWorldPositionOnB())

            tmp:Set(collisionPoint:GetWorldPositionOnA())
            tmp:Subtract(collisionPoint:GetWorldPositionOnB())
            collisionPoint:SetDistance(tmp:DotProduct(collisionPoint:GetWorldNormalOnB()))

            collisionPoint:SetLifeTime(collisionPoint:GetLifeTime() + 1)

            i = i - 1
        end

        number distance2 = 0
        Vector3 projectedDifference
        Vector3 projectedPoint

        i = GetPointCount() - 1
        repeat while i >= 0
            CollisionPoint3D collisionPoint = points:Get(i)

            if not ValidCollisionDistance(collisionPoint)
                RemoveCollisionPoint(i)
            else
                tmp:Set(collisionPoint:GetWorldNormalOnB())
                tmp:Scale(collisionPoint:GetDistance())
                projectedPoint:Set(collisionPoint:GetWorldPositionOnA())
                projectedPoint:Subtract(tmp)
                projectedDifference:Set(collisionPoint:GetWorldPositionOnB())
                projectedDifference:Subtract(projectedPoint)
                distance2 = projectedDifference:DotProduct(projectedDifference)
                if distance2 > GetCollisionBreakingThreshold() * GetCollisionBreakingThreshold()
                    RemoveCollisionPoint(i)
                end
            end

            i = i - 1
        end
    end

    /*
    This action deletes all of the collision points that is stored inside this
    LocalCollisionPoints3D class.
    */
    action ClearCollisionPoints
        integer i = 0
        repeat while i < pointCount
            ClearPersistentData(points:Get(i))
            i = i + 1
        end
        pointCount = 0
    end

    /*
    This action returns the maximum distance between the two objects for the 
    two objects to still be considered as touching or colliding.
    Attribute: Returns 0.2
    */
    action GetCollisionBreakingThreshold returns number
        return 0.2
    end

    /*
    This action returns what index this LocalCollisionPoints3D resides in an array
    if this LocalCollisionPoints3D was ever push into an array of LocalCollisionPoints3Ds.
    Attribute: Returns what index this LocalCollisionPoints3D resides in an array.
    */
    action GetIndexA returns integer
        return index1A
    end

    /*
    This action sets what index this LocalCollisionPoints3D resides in an array
    when this LocalCollisionPoints3D is inserted into an array of LocalCollisionPoints3D.
    Attribute: Parameter index The index that this LocalCollisionPoints3D resides in, in an array
    */
    action SetIndexA(integer index)
        index1A = index
    end
end