use Libraries.Compute.Vector2
use Libraries.Game.Collision.CollisionIdentifier2D

package Libraries.Game.Collision

/*
This class contains the one estimated local collision point for a 2D collision from the
perspective of the reference object that is involved in the collision. This class
also records what kind of impulses should be applied to the objects to resolve
the collision.
This class is also known as manifold points. 
This class is used internally by LocalCollisionPoints2D.
*/
class CollisionPoint2D
    Vector2 localPoint          //one collision point with respect to the object that is not the reference object                             
                                  //for a circle-circle collision: if the reference object is a circleA, this would be the estimated "contact point" from the perspective of circleB, which would be the local center of circleB
                                  //for a polygon-circle collision, the reference object would be a polygon (polygonA), so "localPoint" would be the local center of circleB from the perspective of circleB
                                  //for a polygon-polygon collision, depending on if the "LocalCollisionPoints2D" is of type FACE_A or FACE_B
                                    //FACE_A: this means the reference object is polygonA, therefore, this "localPoint" would be the clip point of polygonB from the perspective of polygonB
                                    //FACE_B: this means the reference object is polygonB, therefore, this "localPoint" would be the clip point of polygonA from the perspective of polygonA (flipped)
    number normalImpulse = 0    //the magnitude of the impulse that should be applied to separate the two objects in collision  
    number tangentImpulse = 0   //the magnitude of impulse that should be applied to simulate the friction between the two objects during collision
    CollisionIdentifier2D id    //identifies what type of collision is involved

    /*
    This action sets the current CollisionPoint2D using another CollisionPoint2D.
    Attribute: Parameter point The other CollisionPoint2D.
    */
    action Set(CollisionPoint2D point)
        me:localPoint:Set(point:localPoint)
        me:normalImpulse = point:normalImpulse
        me:tangentImpulse = point:tangentImpulse
        me:id:Set(point:id)
    end

    /*
    This action sets the local point.
    Attribute: Parameter localPoint One collision point with respect to the object that is not the reference object.
    */
    action SetLocalPoint(Vector2 localPoint)
        me:localPoint:Set(localPoint)
    end

    /*
    This action returns the local point.
    Attribute: Returns one collision point with respect to the object that is not the reference object.
    */
    action GetLocalPoint returns Vector2
        return localPoint
    end

    /*
    This action sets the normal impulse.
    Attribute: Parameter normalImpulse The magnitude of the impulse that should be applied to separate the two objects in collision.
    */
    action SetNormalImpulse(number normalImpulse)
        me:normalImpulse = normalImpulse
    end

    /*
    This action returns the normal impulse.
    Attribute: Returns the magnitude of the impulse that should be applied to separate the two objects in collision.
    */
    action GetNormalImpulse returns number
        return normalImpulse
    end

    /*
    This action sets the tangential impulse.
    Attribute: Parameter tangentImpulse The magnitude of impulse that should be applied to simulate the friction between the two objects during collision.
    */
    action SetTangentImpulse(number tangentImpulse)
        me:tangentImpulse = tangentImpulse
    end

    /*
    This action returns the tangential impulse.
    Attribute: Returns the magnitude of impulse that should be applied to simulate the friction between the two objects during collision.
    */
    action GetTangentImpulse returns number
        return tangentImpulse
    end

    /*
    This action returns what type of collision was involved.
    Attribute: Returns what type of collision was involved stored inside CollisionIdentifier2D.
    */
    action GetIdentifier returns CollisionIdentifier2D
        return id
    end
end