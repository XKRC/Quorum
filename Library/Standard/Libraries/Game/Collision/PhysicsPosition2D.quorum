use Libraries.Compute.Vector2
use Libraries.Compute.Math

package Libraries.Game.Collision


/*
This class stores coordinate systems in 2D space, where the coordinate system
represent the position of the 2D item and the tilt of the 2D item with 
respect to your screen.
NOTE: this class can be seen as the class that stores a 3x3 transformation matrix.
*/
class PhysicsPosition2D
    Vector2 position  //the local coordinate's origin (doesn't have to be the center of the item) relative to the global coordinates
    //angle == how much the local coordinate has been rotated relative to the global coordinates
    number sine = 0 //math:Sine(angle)
    number cosine = 1   //math:Cosine(angle)

    Math math
    
    /*
    This action sets the physics positions using another object of PhysicsPosition2D.

    Attribute: Parameter other The other PhysicsPosition2D that we will be copying from.
    */
    action Set(PhysicsPosition2D other)
        me:position:Set(other:position)
        me:sine = other:sine
        me:cosine = other:cosine
    end

    /*
    This action sets the physics position of the 2D object using the passed in 
    position and sets the tilt of the 2D object using the angle passed in.

    Attribute: Parameter position The position of the 2D object to be stored.
    Attribute: Parameter angle The tilt of the 2D object to be stored.
    */
    action Set(Vector2 position, number angle)
        me:position:Set(position)
        me:sine = math:Sine(angle)
        me:cosine = math:Cosine(angle)
    end

    /*
    This action gets the location of the 2D object (the 2D object's local origin)
    with respect to the global coordinates.

    Attribute: Returns the current position of the 2D object.
    */
    action GetPosition returns Vector2
        return position
    end

    /*
    This action sets the position of the 2D object (the 2D object's local origin
    with respect to the global coordinates).

    Attribute: Parameter position The position of the 2D object to be stored.
    */
    action SetPosition(Vector2 position)
        me:position = position
    end

    /*
    This action gets the tilt of the 2D object in radians.

    Attribute: Returns the tilt of the 2D object in radians.
    */
    action GetAngle returns number
        return math:InverseTangent(cosine, sine)
    end

    /*
    This action gets the sine of the tilt of the 2D object.
    To learn more about sine, you can visit the tutorial page by MathIsFun:
    https://www.mathsisfun.com/sine-cosine-tangent.html
    Attribute: Returns the sine of the tilt of the 2D object.
    */
    action GetSine returns number
        return sine
    end

    /*
    This action sets the sine of the tilt of the 2D object.
    To learn more about sine, you can visit the tutorial page by MathIsFun:
    https://www.mathsisfun.com/sine-cosine-tangent.html

    Attribute: Parameter the sine of the tilt of the 2D object.
    */
    action SetSine(number sine)
        me:sine = sine
    end

    /*
    This action gets the cosine of the tilt of the 2D object described by this
    PhysicsPosition2D.
    To learn more about cosine, you can visit the tutorial page by MathIsFun:
    https://www.mathsisfun.com/sine-cosine-tangent.html

    Attribute: Returns the cosine of the tilt of the 2D object.
    */
    action GetCosine returns number
        return cosine
    end

    /*
    This action sets the cosine of the tilt of the 2D object described by this
    PhysicsPosition2D.

    To learn more about sine, you can visit the tutorial page by MathIsFun:
    https://www.mathsisfun.com/sine-cosine-tangent.html

    Attribute: Parameter cosine The cosine of the tilt of the 2D object to be stored.
    */
    action SetCosine(number cosine)
        me:cosine = cosine
    end

    /*
    This action sets the tilt of the 2D object described by this PhysicsPosition2D
    to 0 and align the 2D object with the global origin.
    */
    action SetToIdentity
        position:SetZero()
        sine = 0
        cosine = 1
    end

    /*
    Given a point (Vector2 vector) relative to the local coordinates of a 2D object
    described by "PhysicsPosition2D transform," this
    action computes that point relative to the global coordinates.
    The result is returned instead of changed within the function.

    Attribute: Parameter transform The position and tilt of the 2D object.
    Attribute: Parameter vector The point that is described from the point of view of the 2D object.

    Attribute: Returns the point described from the point of view of someone sitting on the origin of the glocal coordinates.
    */
    action Multiply(PhysicsPosition2D transform, Vector2 vector) returns Vector2
        Vector2 result
        result:SetX((transform:cosine * vector:GetX() - transform:sine * vector:GetY()) + transform:position:GetX())
        result:SetY((transform:sine * vector:GetX() + transform:cosine * vector:GetY()) + transform:position:GetY())
        return result
    end

    /*
    Given a point (Vector2 vector) relative to the center of this item (PhysicsPosition2D transform), this action computes
    and returns that point in screen coordinates (Vector2 out).
    This action stores the result inside of "Vector2 out."

    Attribute: Parameter transform The position and tilt of the 2D object.
    Attribute: Parameter vector The point that is described from the point of view of the 2D object.
    Attribute: Parameter out The point described from the point of view of someone sitting on the origin of the glocal coordinates.
    */
    action MultiplyToOut(PhysicsPosition2D transform, Vector2 vector, Vector2 out)
        number tempY = (transform:sine * vector:GetX() + transform:cosine * vector:GetY()) + transform:position:GetY()
        out:SetX((transform:cosine * vector:GetX() - transform:sine * vector:GetY()) + transform:position:GetX())
        out:SetY(tempY)
    end



    /*
    Given a vector "Vector2 vector" that is in global coordinates,
    this action computes what "Vector2 vector" will be at relative to
    the object that has the positions at "PhysicsPosition2D transform."

    Attribute: Parameter transform The position and tilt of the 2D object.
    Attribute: Parameter vector The point described from the point of view of someone sitting on the origin of the glocal coordinates.

    Attribute: Returns the point described from the point of view of the 2D object.
    */
    action MultiplyAndTranslate(PhysicsPosition2D transform, Vector2 vector) returns Vector2
        number px = vector:GetX() - transform:position:GetX()
        number py = vector:GetY() - transform:position:GetY()
        Vector2 result
        result:SetX((transform:cosine * px + transform:sine * py))
        result:SetY((-1 * transform:sine * px + transform:cosine * py))
        return result
    end


    /*
    If the 2D object B's location is described from the point of view of the object "A," and this point of view
    is stored inside "PhysicsPosition2D transformB," and that the location of A is described from someone sitting at
    the global origin, and this point of view is stored inside "PhysicsPosition2D transformA," then this action
    finds out what would be the position and tilt of object B from someone that is sitting at the global origin.
    In mathematical terms, this would be T_A * T_B, where T_A and T_B are both
    transformation matrices. 

    Attribute: Parameter transformA The position of object A from the point of view of someone at the global origin.
    Attribute: Parameter transformB The position of object B from the point of view of object A.
    
    Attribute: Returns the position of object B from the point of view from someone at the global origin.
    */
    action Multiply(PhysicsPosition2D transformA, PhysicsPosition2D transformB) returns PhysicsPosition2D
        PhysicsPosition2D result
        result:sine = transformA:cosine * transformB:sine + transformA:sine * transformB:cosine    //changed the "-" to a "+"
        result:cosine = transformA:cosine * transformB:cosine - transformA:sine * transformB:sine
        result:position:SetX(transformA:cosine * transformB:position:GetX() - transformA:sine * transformB:position:GetY())
        result:position:SetY(transformA:sine * transformB:position:GetX() + transformA:cosine * transformB:position:GetY())
        result:position:Add(transformA:position)
        
        return result
    end


    /* 
    This action computes what is the tilt and position of object B 
    described by "PhysicsPosition2D transformB" relative to
    object A described by "PhysicsPosition2D transformA."
    Currently, this action is not used in any other classes.
    
    Attribute: Parameter transformA The position of A relative to the global origin.
    Attribute: Parameter transformB The position of B relative to the global origin.
    Attribute: Returns the position of B relative to the position of A.
    */
    action MultiplyAndTranslate(PhysicsPosition2D transformA, PhysicsPosition2D transformB) returns PhysicsPosition2D
        PhysicsPosition2D result
        result:sine = transformA:cosine * transformB:sine - transformA:sine * transformB:cosine 
        result:cosine = transformA:cosine * transformB:cosine + transformA:sine * transformB:sine
        Vector2 pool
        pool:Set(transformB:position):Subtract(transformA:position)
        result:position:SetX(transformA:cosine * pool:GetX() + transformA:sine * pool:GetY())
        result:position:SetY(-1 * transformA:sine * pool:GetX() + transformA:cosine * pool:GetY())

        return result
    end
end