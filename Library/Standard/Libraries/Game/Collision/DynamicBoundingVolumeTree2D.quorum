use Libraries.Interface.Item2D
use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Containers.Stack
use Libraries.Compute.Math
use Libraries.Game.Collision.Item2DNode
use Libraries.Game.Collision.DynamicBoundingVolumeTreeNode2D

package Libraries.Game.Collision

/*
DynamicBoundingVolumeTree2D is the tree structure for storing the bounding
boxes for collidable Item2D objects. The tree is a complete binary
tree and stores the bounding boxes in a hierarchal structure with the parent
node containing a bounding box that bounds the bounding boxes of both of its
children.
This class is used internally by BroadphaseCollision2D.

Attribute: Example
use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Collision.Item2DNode

    DynamicBoundingVolumeTree2D tree
    BoundingBox2D boundingBox1
    BoundingBox2D boundingBox2

    Item2DNode item1
    Item2DNode item2
    
    integer id1 = tree:CreateNode(boundingBox1, item1)
    integer id2 = tree:CreateNode(boundingBox2, item2)
    output "Tree has height " + tree:GetHeight()

    tree:DestroyNode(id2)
    output "After removing node 2 , tree has height " + tree:GetHeight()
*/
class DynamicBoundingVolumeTree2D
    /* This number is used to make the bounding box of the item in the tree
     slightly bigger than the bounding box passed when creating the node.
     This allows the item to move around in its bounding box a little without
     needing to be reinserted into the tree.
    */
    constant number boundingBoxExtension = 0.1
    constant number boundingBoxMultiplier = 2.0

    public constant integer NULL_NODE = -1

    DynamicBoundingVolumeTreeNode2D root = undefined

    Array<DynamicBoundingVolumeTreeNode2D> nodes
    integer nodeCount = 0
    integer freeList = 0
    integer nodesCapacity = 16

    Math math

    on create
        nodes:SetSize(nodesCapacity)
        integer i = nodesCapacity - 1
        repeat while i >= 0
            DynamicBoundingVolumeTreeNode2D node
            node:SetID(i)
            nodes:Set(i, node)
            if i = nodesCapacity - 1
                node:SetParent(undefined)
            else
                node:SetParent(nodes:Get(i + 1))
            end
            node:SetHeight(-1)
            i = i - 1
        end
    end

    /*
    This action creates a new node for the Dynamic Bounding Volume Tree with the
    given BoundingBox and given Item and inserts the new node as a leaf in the 
    tree.
    This action is used internally.

    Attribute: Parameter boundingBox The BoundingBox2D of the item to be inserted into the tree.

    Attribute: Parameter node The ItemNode2D of the item being inserted into the tree. 

    Attribute: Returns The integer id of the new tree node
    
    Attribute: Example
    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox

        Item2DNode item

        output "This item was added to node number " + tree:CreateNode(boundingBox, item)
    */
    action CreateNode(BoundingBox2D boundingBox, Item2DNode node) returns integer
        DynamicBoundingVolumeTreeNode2D newNode = AllocateNode()
        integer id = newNode:GetID()
        // calculate the bounding box for the node
        BoundingBox2D nodeBoundingBox = newNode:GetBoundingBox()
        Vector2 minimum
        Vector2 maximum
        minimum:SetX(boundingBox:GetMinimum():GetX() - boundingBoxExtension)
        minimum:SetY(boundingBox:GetMinimum():GetY() - boundingBoxExtension)
        maximum:SetX(boundingBox:GetMaximum():GetX() + boundingBoxExtension)
        maximum:SetY(boundingBox:GetMaximum():GetY() + boundingBoxExtension)
        nodeBoundingBox:Set(minimum, maximum)
        newNode:SetItemNode(node)

        // insert into the tree
        InsertLeaf(newNode)

        return id
    end

    /*
    This action removes from the Dynamic Bounding Volume Tree the node with the 
    given node ID.
    This action is used internally.
    
    Attribute: Parameter nodeID The integer id number for the node which is to be removed

    Attribute: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox

        Item2DNode item
        integer id = tree:CreateNode(boundingBox, item)
        output "This item was added to node number " + id

        tree:DestroyNode(id)
        output "Node number " + id + " was removed from the tree."   
    */
    action DestroyNode(integer nodeID)
        if 0 <= nodeID and nodeID < nodesCapacity
            DestroyNode(nodes:Get(nodeID))
        end
    end

    /*
    This action removes the given node from the tree. Only leaf nodes will be 
    removed.
    This action is used internally.

    Attribute: Parameter node The node that is to be removed
    */
    action DestroyNode(DynamicBoundingVolumeTreeNode2D node)        
        // ensure node is a leaf - we only can remove leaf nodes because
        // it doesn't make sense to remove internal nodes
        if node:GetLeftChild() not= undefined
            return now
        end

        RemoveLeaf(node)
        FreeNode(node)
    end

    /*
    This action moves the Item2DNode contained in the node with the given node ID by
    the given displacement vector. If the node moves outside of its existing
    bounding box, then the object is removed from the tree, a new bounding box
    is calculated, and it is reinserted into the tree. Otherwise, the node
    is left where it is in the tree.
    This action is used internally.

    Attribute: Parameter nodeID The id of the node that is to be moved
    
    Attribute: Parameter boundingBox The boundingBox of the node to be moved
    
    Attribute: Parameter displacement The displacement of the node
    
    Attribute: Returns whether the item was removed and reinserted into the tree

    Attribute: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode
    use Libraries.Compute.Vector2

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox
        Vector2 displacement

        Item2DNode item
        integer id = tree:CreateNode(boundingBox, item)
        output "This item was added to node number " + id

        displacement:Set(1, 5)
        if not tree:MoveNode(id, boundingBox, displacement)
            output "The item in node number " + id + " did not need reinserted"
        end
    */
    action MoveNode(integer nodeID, BoundingBox2D boundingBox, Vector2 displacement) returns boolean
        if 0 <= nodeID and nodeID < nodesCapacity
            return MoveNode(nodes:Get(nodeID), boundingBox, displacement)
        end

        return false
    end

    /*
    This action moves the object. If the object moves outside of its existing
    big bounding box, then the object is removed from the tree, a new bounding
    box is calculated, and it is reinserted into the tree. Otherwise, the 
    action returns immediately.

    Attribute: Parameter node The node that is to be moved
    
    Attribute: Parameter boundingBox The boundingBox of the node to be moved
    
    Attribute: Parameter displacement The displacement of the node

    Attribute: Returns Whether the item is reinserted into the tree
    */
    action MoveNode(DynamicBoundingVolumeTreeNode2D node, BoundingBox2D boundingBox, Vector2 displacement) returns boolean
        BoundingBox2D nodeBoundingBox = node:GetBoundingBox()

        // check if the node's big bounding box already contains the passed
        // bounding box - if so, we don't need to move it and can simply return
        // false
        if nodeBoundingBox:GetMinimum():GetX() <= boundingBox:GetMinimum():GetX() and
           nodeBoundingBox:GetMinimum():GetY() <= boundingBox:GetMinimum():GetY() and
           boundingBox:GetMaximum():GetX() <= nodeBoundingBox:GetMaximum():GetX() and
           boundingBox:GetMaximum():GetY() <= nodeBoundingBox:GetMaximum():GetY()
                return false
        end

        // otherwise, we need to remove the node, recalculate the bounding box
        // and reinsert the node
        RemoveLeaf(node)

        // extend the bounding box
        Vector2 minimum = nodeBoundingBox:GetMinimum()
        Vector2 maximum = nodeBoundingBox:GetMaximum()
        minimum:Set(boundingBox:GetMinimum():GetX() - boundingBoxExtension, boundingBox:GetMinimum():GetY() - boundingBoxExtension)
        maximum:Set(boundingBox:GetMaximum():GetX() + boundingBoxExtension, boundingBox:GetMaximum():GetY() + boundingBoxExtension)

        // use the displacement to update the bounding box
        number dx = displacement:GetX() * boundingBoxMultiplier
        number dy = displacement:GetY() * boundingBoxMultiplier

        if dx < 0
            minimum:SetX(minimum:GetX() + dx)
        else
            maximum:SetX(maximum:GetX() + dx)
        end

        if dy < 0
            minimum:SetY(minimum:GetY() + dy)
        else
            maximum:SetY(maximum:GetY() + dy)
        end

        // reinsert into tree with new bounding box
        InsertLeaf(node)
        return true
    end

    /*
    This action returns the Item2DNode contained in the tree node with the given ID
    This is an internal action.

    Attribute: Parameter nodeID The integer id of the tree node containing the Item2DNode to be returned
    
    Attribute: Returns The specified Item2DNode

    Attribute: Example
    
    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)

        Item2DNode result
        result = tree:GetItemNode(id2)
    */
    action GetItemNode(integer nodeID) returns Item2DNode
        if 0 <= nodeID and nodeID < nodesCapacity
            return GetItemNode(nodes:Get(nodeID))
        end
        return undefined
    end

    /*
    This action returns the Item2Dcontained in the given tree node
    This action is used internally
    
    Attribute: Parameter node The tree node containing the Item2DNode to be returned
    
    Attribute: Returns The specified Item2DNode
    */
    action GetItemNode(DynamicBoundingVolumeTreeNode2D node) returns Item2DNode
        return node:GetItemNode()
    end

    /*
    This action returns the bounding box contained in the tree node with the
    given ID. Note that this bounding box is slightly larger than the bounding
    box of the item contained in this node.
    This action is used internally.

    Attribute: Parameter nodeID The integer id of the tree node containing the BoundingBox2D to be returned

    Attribute: Returns the specified BoundingBox2D

    Attribute: Example
    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)

        BoundingBox2D result
        result = tree:GetBoundingBox(id2)
    */
    action GetBoundingBox(integer nodeID) returns BoundingBox2D
        if 0 <= nodeID and nodeID < nodesCapacity
            return GetBoundingBox(nodes:Get(nodeID))
        end
        return undefined
    end
    
    /*
    This action returns the bounding box contained in the given tree node.
    Note that this bounding box is slightly larger than the bounding box
    of the item contained in this node.

    This action is used internally.

    Attribute: Parameter node The tree node containing the BoundingBox2D to be returned

    Attribute: Returns the specified BoundingBox2D
    */
    action GetBoundingBox(DynamicBoundingVolumeTreeNode2D node) returns BoundingBox2D
        return node:GetBoundingBox()
    end

    /*
    This action returns the number of nodes in the DynamicBoundingVolumeTree2D.
    This action is used internally.

    Attribute: Returns the number of nodes in the DynamicBoundingVolumeTree2D

    Attribute: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)

        output "The tree has " + tree:GetNodeCount() + " nodes."
    */
    action GetNodeCount returns integer
        return nodeCount
    end

    /*
    This action queries the tree for bounding boxes that overlap with the given
    bounding box and returns all leafs whose bounding boxes intersect the
    given bounding box in a list.

    Attribute: Parameter broadphase The BroadphaseCollision2D which contains the tree
    to check the BoundingBox2D against

    Attribute: Parameter boundingBox The BoundingBox2D we are checking for overlap with

    Attribute: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode
    use Libraries.Compute.Vector2
    use Libraries.Game.Collision.BroadphaseCollision2D

        BroadphaseCollision2D broadphase
        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Vector2 minimum1
        Vector2 minimum2
        Vector2 maximum1
        Vector2 maximum2

        minimum1:Set(-1,-1)
        minimum2:Set(-2, -2)
        maximum1:Set(0, 0)
        maximum2:Set(-1, -1)
        boundingBox1:Set(minimum1, maximum1)
        boundingBox2:Set(minimum2, maximum2)

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)

        output "The tree has " + tree:GetNodeCount() + " nodes."

        BoundingBox2D overlap
        Vector2 minimumOverlap
        Vector2 maximumOverlap
        minimumOverlap:Set(-1.5, -1.5)
        maximumOverlap:Set(-0.5, -0.5)
        overlap:Set(minimumOverlap, maximumOverlap)

        tree:Query(broadphase, overlap)
    */
    action Query(BroadphaseCollision2D broadphase, BoundingBox2D boundingBox)
        Stack<DynamicBoundingVolumeTreeNode2D> nodeStack
        nodeStack:Push(root)

        repeat while not nodeStack:IsEmpty()
            DynamicBoundingVolumeTreeNode2D node = nodeStack:Pop()
            if node not= undefined
                // does the node's bounding box intersect with the passed bounding
                // box?
                if node:GetBoundingBox():TestOverlap(boundingBox)
                    if node:IsLeaf()
                        boolean proceed = broadphase:ShouldProceed(node:GetID())
                        if not proceed
                            return now
                        end
                    else
                        // Otherwise, add the node's children to the stack so that we
                        // can check for overlap with them next
                       nodeStack:Add(node:GetLeftChild())
                       nodeStack:Add(node:GetRightChild())
                    end                    
                end
            end
        end
    end

    /*
    This action computes the height of the tree
    
    Attribute: Returns the height of the tree

    Attribute: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)
        output "Tree has height " + tree:ComputeHeight()

        tree:DestroyNode(id2)
        output "After removing node 2 , tree has height " + tree:ComputeHeight()
    */
    action ComputeHeight returns integer
        return ComputeHeight(root)
    end

    /*
    This action recursively computes the height of the tree from the given
    node
    */
    private action ComputeHeight(DynamicBoundingVolumeTreeNode2D node) returns integer
        if node:IsLeaf()
            return 0
        end

        integer height1 = ComputeHeight(node:GetLeftChild())
        integer height2 = ComputeHeight(node:GetRightChild())

        integer maxHeight = height1
        if maxHeight < height2
            maxHeight = height2
        end

        return 1 + maxHeight  
    end

    /*
    This action returns the height of the tree
    
    Attribute: Returns the height of the tree

    Attribute: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)
        output "Tree has height " + tree:GetHeight()

        tree:DestroyNode(id2)
        output "After removing node 2 , tree has height " + tree:GetHeight()
    */
    action GetHeight returns integer
        if root = undefined
            return 0
        end

        return root:GetHeight()
    end

    /*
    This action computes the maximum balance of the tree. The maximum balance
    is the maximum difference of the heights of the two children of any node.
    
    Attributes: Returns the maximum balance of the tree

    Atributes: Example

    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2
        BoundingBox2D boundingBox3

        Item2DNode item1
        Item2DNode item2
        Item2DNode item3

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)
        integer id3 = tree:CreateNode(boundingBox3, item3)

        output "Tree has maximum balance " + tree:GetMaximumBalance()    
    */
    action GetMaximumBalance returns integer
        integer maxBalance = 0

        integer i = 0
        repeat while i < nodesCapacity
            DynamicBoundingVolumeTreeNode2D node = nodes:Get(i)
            if node:GetHeight() > 1
                DynamicBoundingVolumeTreeNode2D leftChild = node:GetLeftChild()
                DynamicBoundingVolumeTreeNode2D rightChild = node:GetRightChild()
                
                integer balance = math:AbsoluteValue(rightChild:GetHeight() - leftChild:GetHeight())
                if maxBalance < balance
                    maxBalance = balance
                end
            end
            i = i + 1
        end

        return maxBalance
    end

    /*
    This action computes the ratio of the sum of the node perimeters to the
    root perimeter.

    Attribute: Returns the perimeterRatio of the tree

    Attribute: Example
    
    use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode
    use Libraries.Compute.Vector2

        DynamicBoundingVolumeTree2D tree
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Vector2 minimum1
        Vector2 minimum2
        Vector2 maximum1
        Vector2 maximum2

        minimum1:Set(0, 0)
        minimum2:Set(0.5, 0.5)
        maximum1:Set(1, 1)
        maximum2:Set(1.5, 1.5)
        boundingBox1:Set(minimum1, maximum1)
        boundingBox2:Set(minimum2, maximum2)

        Item2DNode item1
        Item2DNode item2

        integer id1 = tree:CreateNode(boundingBox1, item1)
        integer id2 = tree:CreateNode(boundingBox2, item2)
    
        output "The perimeter ratio is " + tree:GetPerimeterRatio()
    */
    action GetPerimeterRatio returns number
        if root = undefined
            return 0
        end

        DynamicBoundingVolumeTreeNode2D tempRoot = root
        number rootPerimeter = tempRoot:GetBoundingBox():GetPerimeter()
        
        number totalPerimeter = 0
        integer i = 0
        repeat while i < nodesCapacity
            DynamicBoundingVolumeTreeNode2D node = nodes:Get(i)
            if node:GetHeight() >= 0
                totalPerimeter = totalPerimeter + node:GetBoundingBox():GetPerimeter()
            end
            i = i + 1
        end

        return totalPerimeter / rootPerimeter
    end

    /*
    This action allocates a node for the tree.
    */
    private action AllocateNode returns DynamicBoundingVolumeTreeNode2D
        // check if we need to set up more nodes
        if freeList = NULL_NODE
            nodesCapacity = nodesCapacity * 2
            nodes:SetSize(nodesCapacity)
            integer i = nodesCapacity - 1
            repeat while i >= nodeCount
                DynamicBoundingVolumeTreeNode2D node
                node:SetID(i)
                nodes:Set(i, node)
                if i = nodesCapacity - 1
                    node:SetParent(undefined)
                else
                    node:SetParent(nodes:Get(i + 1))
                end
                node:SetHeight(-1)
                i = i - 1
            end
            freeList = nodeCount
        end
        integer nodeID = freeList
        DynamicBoundingVolumeTreeNode2D node = nodes:Get(nodeID)
        if node:GetParent() not= undefined
            freeList = node:GetParent():GetID()
        else
            freeList = NULL_NODE
        end

        node:SetParent(undefined)
        node:SetLeftChild(undefined)
        node:SetRightChild(undefined)
        node:SetHeight(0)
        node:SetItemNode(undefined)
        nodeCount = nodeCount + 1

        return node
    end

    /*
    This action frees a node from the tree for later re-use.
    */
    private action FreeNode(DynamicBoundingVolumeTreeNode2D node)
        if node not= undefined
            if 0 < nodeCount
                if freeList not= NULL_NODE
                    node:SetParent(nodes:Get(freeList))
                else
                    node:SetParent(undefined)
                end
                node:SetHeight(-1)
                freeList = node:GetID()
                nodeCount = nodeCount - 1
            end
        end
    end

    /*
    This action inserts the given node into the tree.

    The broad overview of the algorithm for insertion is as follows:
        Given a node N to insert into the tree
        Find a sibling S for N
        Insert N as a sibling of S by:
            Create a new parent node P
            Replace S in the tree with P
            Make S and N the children of P
            Follow a path from P to the root adjusing the bounding boxes
    */
    private action InsertLeaf(DynamicBoundingVolumeTreeNode2D leaf)
        if root = undefined
            // easy case: insert node at root
            root = leaf
            root:SetParent(undefined)
        else
            // if not easy case, then we need to find the "best" possible
            // sibling for the new node
            BoundingBox2D leafBoundingBox = leaf:GetBoundingBox()
            DynamicBoundingVolumeTreeNode2D temporary = root

            BoundingBox2D combinedBoundingBox

            boolean exitLoop = false
            // search down the tree starting at the root to find the best
            // sibling for the new node N
            repeat while temporary:GetLeftChild() not= undefined and not exitLoop
                DynamicBoundingVolumeTreeNode2D node = temporary
                DynamicBoundingVolumeTreeNode2D leftChild = node:GetLeftChild()
                DynamicBoundingVolumeTreeNode2D rightChild = node:GetRightChild()

                number perimeter = node:GetBoundingBox():GetPerimeter()

                // see how large the bounding box becoems if we extend the
                // current bounding box with the new node's bounding box
                combinedBoundingBox:Combine(node:GetBoundingBox(), leafBoundingBox)
                number combinedPerimeter = combinedBoundingBox:GetPerimeter()

                // the cost of inserting the node N here
                // defined as the sum over all of its children C of the
                // probability of having to do a bounding box intersection test
                // between N and C
                number cost = 2.0 * combinedPerimeter

                // Inheritence Cost: When we replace a node C with a new parent
                // node P and make N and C the children of P, we increase
                // the perimeter of S from its old perimeter to the combined
                // perimeter
                number inheritenceCost = 2.0 * (combinedPerimeter - perimeter)

                // calculate the cost of adding the node to the left child L
                // of C
                number cost1 = 0
                if leftChild:IsLeaf()
                    // if L is a leaf, then the total cost is the combined
                    // bounding box perimeter plus the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, leftChild:GetBoundingBox())
                    cost1 = combinedBoundingBox:GetPerimeter() + inheritenceCost
                else
                    // if L is not a leaf, then the cost is at least the
                    // difference between the new and old perimeters plus
                    // the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, leftChild:GetBoundingBox())
                    number oldPerimeter = leftChild:GetBoundingBox():GetPerimeter()
                    number newPerimeter = combinedBoundingBox:GetPerimeter()
                    cost1 = (newPerimeter - oldPerimeter) + inheritenceCost
                end

                // calculate the cost of adding the node to the right child R
                // of C 
                number cost2 = 0
                if rightChild:IsLeaf()
                    // if R is a leaf, then the total cost is the combined
                    // bounding box perimeter plus the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, rightChild:GetBoundingBox())
                    cost2 = combinedBoundingBox:GetPerimeter() + inheritenceCost
                else
                    // if R is not a leaf, then the cost is at least the
                    // difference between the new and old perimeters plus
                    // the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, rightChild:GetBoundingBox())
                    number oldPerimeter = rightChild:GetBoundingBox():GetPerimeter()
                    number newPerimeter = combinedBoundingBox:GetPerimeter()
                    cost2 = (newPerimeter - oldPerimeter) + inheritenceCost
                end

                if cost < cost1 and cost < cost2
                    // if the cost is less than the cost of inserting the node
                    // into either of the children of C, then C is the best
                    // sibling for N, so we can exit the loop
                    exitLoop = true
                elseif cost1 < cost2
                    // if the cost of inserting it into the left is less than
                    // the cost to insert into the right, continue down the
                    // left child
                    temporary = leftChild
                else
                    // otherwise continue down the right child
                    temporary = rightChild
                end
            end
            
            // create a new parent node P and make N and S the children of P
            DynamicBoundingVolumeTreeNode2D sibling = temporary
            DynamicBoundingVolumeTreeNode2D oldParent = nodes:Get(sibling:GetID()):GetParent()
            DynamicBoundingVolumeTreeNode2D newParent = AllocateNode()
            newParent:SetParent(oldParent)
            newParent:SetItemNode(undefined)
            newParent:GetBoundingBox():Combine(leafBoundingBox, sibling:GetBoundingBox())
            newParent:SetHeight(sibling:GetHeight() + 1)

            if oldParent not= undefined
                // the old parent of S was not the root
                if oldParent:GetLeftChild() = sibling
                    // the new parent should be the left child of the old parent
                    oldParent:SetLeftChild(newParent)
                else
                    // the new parent should be the right child of the old parent
                    oldParent:SetRightChild(newParent)
                end

                newParent:SetLeftChild(sibling)
                newParent:SetRightChild(leaf)
                sibling:SetParent(newParent)
                leaf:SetParent(newParent)
            else
                // the old parent was the root - new parent becomes the root
                newParent:SetLeftChild(sibling)
                newParent:SetRightChild(leaf)
                sibling:SetParent(newParent)
                leaf:SetParent(newParent)
                root = newParent
            end

            // walk back up the tree to the root, adjusting the bounding
            // boxes as we go up the tree
            temporary = leaf:GetParent()
            repeat while temporary not= undefined
                temporary = Balance(temporary)

                DynamicBoundingVolumeTreeNode2D leftChild = temporary:GetLeftChild()
                DynamicBoundingVolumeTreeNode2D rightChild = temporary:GetRightChild()

                integer maxHeight = leftChild:GetHeight()
                if maxHeight < rightChild:GetHeight()
                    maxHeight = rightChild:GetHeight()
                end

                temporary:SetHeight(1 + maxHeight)
                temporary:GetBoundingBox():Combine(leftChild:GetBoundingBox(), rightChild:GetBoundingBox())

                temporary = temporary:GetParent()
            end
        end
    end

    /*
    This action removes the given leaf from the tree
    */
    private action RemoveLeaf(DynamicBoundingVolumeTreeNode2D node)
        if node = root
            root = undefined
            return now
        end

        DynamicBoundingVolumeTreeNode2D nodeParent = node:GetParent()
        DynamicBoundingVolumeTreeNode2D grandParent = nodeParent:GetParent()
        DynamicBoundingVolumeTreeNode2D sibling = undefined
        
        if nodeParent:GetLeftChild() = node
            sibling = nodeParent:GetRightChild()
        else
            sibling = nodeParent:GetLeftChild()
        end

        if grandParent not= undefined
            if grandParent:GetLeftChild() = nodeParent
                grandParent:SetLeftChild(sibling)
            else
                grandParent:SetRightChild(sibling)
            end

            sibling:SetParent(grandParent)
            FreeNode(nodeParent)

            DynamicBoundingVolumeTreeNode2D temporary = grandParent
            repeat while temporary not= undefined
                temporary = Balance(temporary)

                DynamicBoundingVolumeTreeNode2D leftChild = temporary:GetLeftChild()
                DynamicBoundingVolumeTreeNode2D rightChild = temporary:GetRightChild()

                temporary:GetBoundingBox():Combine(leftChild:GetBoundingBox(), rightChild:GetBoundingBox())

                integer maxHeight = leftChild:GetHeight()

                if maxHeight < rightChild:GetHeight()
                    maxHeight = rightChild:GetHeight()
                end
                
                temporary:SetHeight(1 + maxHeight)

                temporary = temporary:GetParent()
            end
        else
            root = sibling
            sibling:SetParent(undefined)
            FreeNode(nodeParent)
        end
    end

    /*
    This action balances the tree and returns the new root of the tree
    */
    private action Balance(DynamicBoundingVolumeTreeNode2D node) returns DynamicBoundingVolumeTreeNode2D
        DynamicBoundingVolumeTreeNode2D A = node
        if A:GetLeftChild() = undefined or A:GetHeight() < 2
            return node
        end

        DynamicBoundingVolumeTreeNode2D iB = A:GetLeftChild()
        DynamicBoundingVolumeTreeNode2D iC = A:GetRightChild()
        DynamicBoundingVolumeTreeNode2D B = iB
        DynamicBoundingVolumeTreeNode2D C = iC

        integer balance = C:GetHeight() - B:GetHeight()
        
        if balance > 1
            DynamicBoundingVolumeTreeNode2D iF = C:GetLeftChild()
            DynamicBoundingVolumeTreeNode2D iG = C:GetRightChild()
            DynamicBoundingVolumeTreeNode2D F = iF
            DynamicBoundingVolumeTreeNode2D G = iG

            C:SetLeftChild(node)
            C:SetParent(A:GetParent())
            A:SetParent(iC)

            if C:GetParent() not= undefined
                if C:GetParent():GetLeftChild() = node
                    C:GetParent():SetLeftChild(iC)
                else
                    C:GetParent():SetRightChild(iC)
                end
            else
                root = iC
            end
            
            if F:GetHeight() > G:GetHeight()
                C:SetRightChild(iF)
                A:SetRightChild(iG)
                G:SetParent(node)

                A:GetBoundingBox():Combine(B:GetBoundingBox(), G:GetBoundingBox())
                C:GetBoundingBox():Combine(A:GetBoundingBox(), F:GetBoundingBox())

                integer maxHeight = B:GetHeight()
                if maxHeight < G:GetHeight()
                    maxHeight = G:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < F:GetHeight()
                    maxHeight = F:GetHeight()
                end
                C:SetHeight(1 + maxHeight)
            else
                C:SetRightChild(iG)
                A:SetRightChild(iF)
                F:SetParent(node)

                A:GetBoundingBox():Combine(B:GetBoundingBox(), F:GetBoundingBox())
                C:GetBoundingBox():Combine(A:GetBoundingBox(), G:GetBoundingBox())

                integer maxHeight = B:GetHeight()
                if maxHeight < F:GetHeight()
                    maxHeight = F:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < G:GetHeight()
                    maxHeight = G:GetHeight()
                end
                C:SetHeight(1 + maxHeight)
            end

            return iC
        end

        if balance < -1
            DynamicBoundingVolumeTreeNode2D iD = B:GetLeftChild()
            DynamicBoundingVolumeTreeNode2D iE = B:GetRightChild()
            DynamicBoundingVolumeTreeNode2D D = iD
            DynamicBoundingVolumeTreeNode2D E = iE

            B:SetLeftChild(node)
            B:SetParent(A:GetParent())
            A:SetParent(iB)

            if B:GetParent() not= undefined
                if B:GetParent():GetLeftChild() = node
                    B:GetParent():SetLeftChild(iB)
                else
                    B:GetParent():SetRightChild(iB)
                end
            else
                root = iB
            end

            if D:GetHeight() > E:GetHeight()
                B:SetRightChild(iD)
                A:SetLeftChild(iE)
                E:SetParent(node)

                A:GetBoundingBox():Combine(C:GetBoundingBox(), E:GetBoundingBox())
                B:GetBoundingBox():Combine(A:GetBoundingBox(), D:GetBoundingBox())

                integer maxHeight = C:GetHeight()
                if maxHeight < E:GetHeight()
                    maxHeight = E:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < D:GetHeight()
                    maxHeight = D:GetHeight()
                end
                B:SetHeight(1 + maxHeight)
            else
                B:SetRightChild(iE)
                A:SetLeftChild(iD)
                D:SetParent(node)

                A:GetBoundingBox():Combine(C:GetBoundingBox(), D:GetBoundingBox())
                B:GetBoundingBox():Combine(A:GetBoundingBox(), E:GetBoundingBox())

                integer maxHeight = C:GetHeight()
                if maxHeight < D:GetHeight()
                    maxHeight = D:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < E:GetHeight()
                    maxHeight = E:GetHeight()
                end
                B:SetHeight(1 + maxHeight)
            end

            return iB
        end

        return node
    end
end