package Libraries.Game.Collision.Narrowphase

use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Collision.Narrowphase.Simplex2D
use Libraries.Game.Collision.Narrowphase.SimplexVertex2D


/*
This class calculates the closest distance between two objects.
The algorithm that this class uses is the GJK algorithm, which finds the distance
between two convex shapes.
*/
class Distance2D 
    constant integer MAX_ITERATIONS = 20

    integer GJK_calls = 0
    integer GJK_iterations = 0
    integer GJK_max_iterations = 20

    Simplex2D simplex   //the current simplex used in the GJK algorithm
    Array<integer> saveA
    Array<integer> saveB
    Vector2 closestPoint
    Vector2 direction
    Vector2 temp
    Vector2 normal

    on create
        repeat MAX_ITERATIONS times
            saveA:Add(0)
            saveB:Add(0)
        end
    end

    /*
    This calculates the minimum distances between two objects and saves the
    result in "DistanceOutput2D out."
    */
    action Distance(DistanceOutput2D out, SimplexCache2D cache, DistanceInput2D in)
        GJK_calls = GJK_calls + 1

        DistanceProxy2D proxyA = in:GetProxyA()
        DistanceProxy2D proxyB = in:GetProxyB()

        PhysicsPosition2D transformA = in:GetTransformA()
        PhysicsPosition2D transformB = in:GetTransformB()

        simplex:ReadCache(cache, proxyA, transformA, proxyB, transformB)

        Array<SimplexVertex2D> vertices = simplex:GetVertices()

        integer saveCount = 0

        simplex:GetClosestPoint(closestPoint)
        number distanceSqr1 = closestPoint:LengthSquared()
        number distanceSqr2 = distanceSqr1

        integer iter = 0
        boolean break = false
        repeat while iter < MAX_ITERATIONS and not break
            saveCount = simplex:GetCount()
            integer i = 0
            repeat while i < saveCount
                saveA:Set(i, vertices:Get(i):GetIndexA())
                saveB:Set(i, vertices:Get(i):GetIndexB())
                i = i + 1
            end

            //find the closest point on the simplex to the origin
            if simplex:GetCount() = 1
                // nothing
            elseif simplex:GetCount() = 2
                simplex:Solve2()
            elseif simplex:GetCount() = 3
                simplex:Solve3()
            else
                // nothing
            end

            if simplex:GetCount() = 3
                break = true
            end

            if not break
                simplex:GetClosestPoint(closestPoint)
                distanceSqr2 = closestPoint:LengthSquared()

                distanceSqr1 = distanceSqr2
                
                simplex:GetSearchDirection(direction)

                if direction:LengthSquared() < 0.00000011920928955078125 * 0.00000011920928955078125
                    break = true
                end
            end

            //using support points to find if there is a new simplex vertex to be added
            if not break
                SimplexVertex2D vertex = vertices:Get(simplex:GetCount())

                direction:Scale(-1)
                temp:SetX(transformA:GetCosine() * direction:GetX() + transformA:GetSine() * direction:GetY())
                temp:SetY(-transformA:GetSine() * direction:GetX() + transformA:GetCosine() * direction:GetY())
                vertex:SetIndexA(proxyA:GetSupport(temp))
                Vector2 v = proxyA:GetVertex(vertex:GetIndexA())
                vertex:GetSupportA():SetX((transformA:GetCosine() * v:GetX() - transformA:GetSine() * v:GetY()) + transformA:GetPosition():GetX())
                vertex:GetSupportA():SetY((transformA:GetSine() * v:GetX() + transformA:GetCosine() * v:GetY()) + transformA:GetPosition():GetY())
                direction:Scale(-1)
                temp:SetX(transformB:GetCosine() * direction:GetX() + transformB:GetSine() * direction:GetY())
                temp:SetY(-transformB:GetSine() * direction:GetX() + transformB:GetCosine() * direction:GetY())
                vertex:SetIndexB(proxyB:GetSupport(temp))
                v = proxyB:GetVertex(vertex:GetIndexB())
                vertex:GetSupportB():SetX((transformB:GetCosine() * v:GetX() - transformB:GetSine() * v:GetY()) + transformB:GetPosition():GetX())
                vertex:GetSupportB():SetY((transformB:GetSine() * v:GetX() + transformB:GetCosine() * v:GetY()) + transformB:GetPosition():GetY())
                vertex:GetSupport():Set(vertex:GetSupportB()):Subtract(vertex:GetSupportA())

                iter = iter + 1
                GJK_iterations = GJK_iterations + 1

                boolean duplicate = false
                integer j = 0
                boolean break1 = false
                repeat while j < saveCount and not break1
                    if vertex:GetIndexA() = saveA:Get(j) and vertex:GetIndexB() = saveB:Get(j)
                        duplicate = true
                        break1 = true
                    end
                    j = j + 1
                end

                if duplicate
                    break = true
                end

                if not break
                    simplex:SetCount(simplex:GetCount() + 1)
                end
            end
        end

        if iter > GJK_max_iterations
            GJK_max_iterations = iter
        end

        simplex:GetWitnessPoints(out:GetPointA(), out:GetPointB())
        out:SetDistance(out:GetPointA():Distance(out:GetPointB()))
        out:SetIterations(iter)

        simplex:WriteCache(cache)

        if in:GetUseRadii()
            number rA = proxyA:GetRadius()
            number rB = proxyB:GetRadius()

            if out:GetDistance() > rA + rB and out:GetDistance() > 0.00000011920928955078125
                out:SetDistance(out:GetDistance() - (rA + rB))
                normal:Set(out:GetPointB()):Subtract(out:GetPointA())
                normal:Normalize()
                temp:Set(normal):Scale(rA)
                out:GetPointA():Add(temp)
                temp:Set(normal):Scale(rB)
                out:GetPointB():Subtract(temp)
            else
                out:GetPointA():Add(out:GetPointB()):Scale(0.5)
                out:GetPointB():Set(out:GetPointA())
                out:SetDistance(0)
            end
        end
    end
end