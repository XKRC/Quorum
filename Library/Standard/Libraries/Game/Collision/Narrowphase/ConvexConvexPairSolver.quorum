package Libraries.Game.Collision.Narrowphase

use Libraries.Compute.Vector3
use Libraries.Game.Collision.Shapes.CollisionShape3D
use Libraries.Game.Collision.Narrowphase.ConvexConvexPenetrationDepthSolver
use Libraries.Game.Collision.Narrowphase.ConvexConvexSimplexSolver
use Libraries.Game.Collision.CollisionPointsResult3D
use Libraries.Compute.Matrix3
use Libraries.Compute.Math
use Libraries.Game.Collision.PhysicsPosition3D

/*
This class contains actions that will help you solve for the closest points between two objects and the distance between these closest points.
*/
class ConvexConvexPairSolver
    // this class is an implementation of the JBullet class GjkPairDetector
    constant number REL_ERROR2 = 0.0000010

    Vector3 cachedSeparatingAxis
    ConvexConvexPenetrationDepthSolver penetrationDepthSolver
    ConvexConvexSimplexSolver simplexSolver
    CollisionShape3D minkowskiA = undefined
    CollisionShape3D minkowskiB = undefined
    boolean ignoreMargin = false

    integer catchDegeneracies = 1
    integer degenerateSimplex = 0
    integer curIter = 0
    integer lastUsedMethod = -1

    Math math

    on create
        me:cachedSeparatingAxis:Set(0, 0, 1)
    end
    
    /*
    This action stores the shapes of object A and B that might be colliding and different solvers that are used to solve this collision.
    */
    action Initialize(CollisionShape3D objectA, CollisionShape3D objectB, ConvexConvexSimplexSolver simplexSolver, ConvexConvexPenetrationDepthSolver penetrationDepthSolver)
        me:cachedSeparatingAxis:Set(0, 0, 1)
        me:penetrationDepthSolver = penetrationDepthSolver
        me:simplexSolver = simplexSolver
        me:minkowskiA = objectA
        me:minkowskiB = objectB
    end

    /*
    This action finds the closest points on object A to B and on object B to A.
    */
    action GetClosestPoints(PhysicsPosition3D transformA, PhysicsPosition3D transformB, number maximumDistanceSquared, CollisionPointsResult3D result, boolean swapResults)
        Vector3 tmp

        number distance = 0
        Vector3 normalInB
        normalInB:Set(0, 0, 0)
        Vector3 pointOnA
        Vector3 pointOnB
        PhysicsPosition3D localTransA
        localTransA:Set(transformA)
        PhysicsPosition3D localTransB
        localTransB:Set(transformB)
        Vector3 positionOffset
        positionOffset:Set(localTransA:GetOrigin()):Add(localTransB:GetOrigin())
        positionOffset:Scale(0.5)
        localTransA:GetOrigin():Subtract(positionOffset)
        localTransB:GetOrigin():Subtract(positionOffset)

        number marginA = minkowskiA:GetMargin()
        number marginB = minkowskiB:GetMargin()

        if ignoreMargin
            marginA = 0
            marginB = 0
        end

        curIter = 0
        integer gGjkMaxIter = 1000
        cachedSeparatingAxis:Set(0, 1, 0)

        boolean isValid = false
        boolean checkSimplex = false
        boolean checkPenetration = true
        degenerateSimplex = 0
        
        lastUsedMethod = -1

        number squaredDistance = 0
        squaredDistance = squaredDistance:GetMaximumValue()
        number delta  = 0
        
        number margin = marginA + marginB

        simplexSolver:Reset()

        Vector3 separatingAxisInA
        Vector3 separatingAxisInB

        Vector3 pInA
        Vector3 qInB

        Vector3 pWorld
        Vector3 qWorld
        Vector3 w

        Vector3 tmpPointOnA
        Vector3 tmpPointOnB
        Vector3 tmpNormalInB

        boolean continue = true
        repeat while continue
            separatingAxisInA:Set(cachedSeparatingAxis):Scale(-1)
            TransposeTransform(separatingAxisInA, separatingAxisInA, transformA:GetBasis())

            separatingAxisInB:Set(cachedSeparatingAxis)
            TransposeTransform(separatingAxisInB, separatingAxisInB, transformB:GetBasis())

            pInA:Set(minkowskiA:LocalGetSupportingVertexWithoutMargin(separatingAxisInA))
            qInB:Set(minkowskiB:LocalGetSupportingVertexWithoutMargin(separatingAxisInB))

            pWorld:Set(pInA)
            localTransA:Transform(pWorld)

            qWorld:Set(qInB)
            localTransB:Transform(qWorld)

            w:Set(pWorld):Subtract(qWorld)

            delta = cachedSeparatingAxis:DotProduct(w)

            // potential exit: they don't overlap
            if (delta > 0) and (delta * delta > squaredDistance * maximumDistanceSquared)
                checkPenetration = false
                continue = false
            end

            if continue
                // exit 0: the new point is already in the simplex, or we don't come any closer
                if simplexSolver:InSimplex(w)
                    degenerateSimplex = 1
                    checkSimplex = true
                    continue = false
                end
            end

            if continue
                number f0 = squaredDistance - delta
                number f1 = squaredDistance * REL_ERROR2

                if f0 <= f1
                    if f0 <= 0
                        degenerateSimplex = 2
                    end
                    checkSimplex = true
                    continue = false
                end
            end

            if continue
                // add current vertex to simplex
                simplexSolver:AddVertex(w, pWorld, qWorld)

                // calculate the closest point to the origin (update vector v)
                if not simplexSolver:Closest(cachedSeparatingAxis)
                    degenerateSimplex = 3
                    checkSimplex = true
                    continue = false
                end
            end

            if continue
                if cachedSeparatingAxis:LengthSquared() < REL_ERROR2
                    degenerateSimplex = 6
                    checkSimplex = true
                    continue = false
                end
            end

            if continue
                number previousSquaredDistance = squaredDistance
                squaredDistance = cachedSeparatingAxis:LengthSquared()

                if previousSquaredDistance - squaredDistance <= 0.000000119209290 * previousSquaredDistance
                    simplexSolver:BackupClosest(cachedSeparatingAxis)
                    checkSimplex = true
                    continue = false
                end
            end
            
            if continue
                if curIter > gGjkMaxIter
                    continue = false
                end
                curIter = curIter + 1
            end

            if continue
                boolean check1 = not simplexSolver:FullSimplex()

                if not check1
                    simplexSolver:BackupClosest(cachedSeparatingAxis)
                    continue = false
                end
            end         
        end

        if checkSimplex
            simplexSolver:ComputePoints(pointOnA, pointOnB)
            normalInB:Set(pointOnA):Subtract(pointOnB)
            number lenSqr = cachedSeparatingAxis:LengthSquared()

            if lenSqr < 0.0001
                degenerateSimplex = 5
            end

            if lenSqr > 0.000000119209290 * 0.000000119209290
                number rlen = 1 / math:SquareRoot(lenSqr)
                normalInB:Scale(rlen)
                number s = math:SquareRoot(squaredDistance)

                tmp:Set(cachedSeparatingAxis):Scale(marginA / s)
                pointOnA:Subtract(tmp)

                tmp:Set(cachedSeparatingAxis):Scale(marginB / s)
                pointOnB:Add(tmp)

                distance = (1 / rlen) - margin
                isValid = true
                
                lastUsedMethod = 1
            else
                lastUsedMethod = 2
            end
        end

        boolean catchDegeneratePenetrationCase = (catchDegeneracies not= 0 and degenerateSimplex not= 0 and (distance + margin < 0.01))

        if checkPenetration and (not isValid or catchDegeneratePenetrationCase)
            boolean isValid2 = penetrationDepthSolver:CalculatePenetrationDepth(simplexSolver, minkowskiA, minkowskiB, localTransA, localTransB, 
                                                                                cachedSeparatingAxis, tmpPointOnA, tmpPointOnB)
            if isValid2
                tmpNormalInB:Set(tmpPointOnB):Subtract(tmpPointOnA)

                number lenSqr = tmpNormalInB:LengthSquared()
                if lenSqr > 0.000000119209290 * 0.000000119209290
                    tmpNormalInB:Scale(1 / math:SquareRoot(lenSqr))
                    tmp:Set(tmpPointOnA):Subtract(tmpPointOnB)
                    number distance2 = -tmp:Length()
                    if not isValid or (distance2 < distance)
                        distance = distance2
                        pointOnA:Set(tmpPointOnA)
                        pointOnB:Set(tmpPointOnB)
                        normalInB:Set(tmpNormalInB)
                        isValid = true
                        lastUsedMethod = 3
                    else

                    end
                else
                    lastUsedMethod = 4
                end
            else
                lastUsedMethod = 5
            end
        end

        if isValid
            tmp:Set(pointOnB):Add(positionOffset)
            result:AddCollisionPoint(normalInB, tmp, distance)
        end
    end

    /*
    This action stores the shape of the first object that might be involved in the collision.
    */
    action SetMinkowskiA(CollisionShape3D minkowskiA)
        me:minkowskiA = minkowskiA
    end

    /*
    This action stores the shape of the second object that might be involved in the collision.
    */
    action SetMinkowskiB(CollisionShape3D minkowskiB)
        me:minkowskiB = minkowskiB
    end

    /*  
    This action stores a vector that could tell you whether the two objects are colliding or not.
    */
    action SetCachedSeparatingAxis(Vector3 separatingAxis)
        me:cachedSeparatingAxis:Set(separatingAxis)
    end

    /*
    This action connects this ConvexConvexPairSolver to a ConvexConvexPenetrationDepthSolver 
    for the actions inside ConvexConvexPenetrationDepthSolver to help with this ConvexConvexPairSolver.
    */
    action SetPenetrationDepthSolver(ConvexConvexPenetrationDepthSolver penetrationDepthSolver)
        me:penetrationDepthSolver = penetrationDepthSolver
    end

    /*
    This action sets whether if you want to have an invisible shell around the objects that might collide or not.
    Having an invisible shell can make computations faster and more accurate.
    */
    action SetIgnoreMargin(boolean ignoreMargin)
        me:ignoreMargin = ignoreMargin
    end

    /*
    This action multiplies a matrix with a vector.
    Mathematically it is dest = mat * vec.
    */
    private action TransposeTransform(Vector3 dest, Vector3 vec, Matrix3 mat)
        number x = tdotx(mat, vec)
        number y = tdoty(mat, vec)
        number z = tdotz(mat, vec)
        dest:SetX(x)
        dest:SetY(y)
        dest:SetZ(z)
    end

    /*
    This action multiplies the first column of a matrix with a vector (dot product).
    */
    private action tdotx(Matrix3 mat, Vector3 vec) returns number
        return mat:row0column0 * vec:GetX() + mat:row1column0 * vec:GetY() + mat:row2column0 * vec:GetZ()
    end

    /*
    This action multiplies the second column of a matrix with a vector (dot product).
    */
    private action tdoty(Matrix3 mat, Vector3 vec) returns number
        return mat:row0column1 * vec:GetX() + mat:row1column1 * vec:GetY() + mat:row2column1 * vec:GetZ()
    end

    /*
    This action multiplies the third column of a matrix with a vector (dot product).
    */
    private action tdotz(Matrix3 mat, Vector3 vec) returns number
        return mat:row0column2 * vec:GetX() + mat:row1column2 * vec:GetY() + mat:row2column2 * vec:GetZ()
    end
end