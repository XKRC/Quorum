package Libraries.Game.Collision.Narrowphase

use Libraries.Containers.Array
use Libraries.Compute.Vector3

/*
This class stores the result from a collision of two convex shapes.
This class is used by ConvexConvexCollisionSolver.
*/
class ConvexConvexCollisionSolverResults 
    public constant integer SEPARATED = 0
    public constant integer PENETRATING = 1
    public constant integer DISTANCE_FAILED = 2
    public constant integer PENETRATION_FAILED = 3

    integer status = SEPARATED
    Array<Vector3> witness
    Vector3 normal
    number depth = 0
    integer penetrationIterations = 0
    integer distanceIterations = 0

    on create
        Vector3 v1
        witness:Add(v1)
        Vector3 v2
        witness:Add(v2)
    end

    /*
    This action returns whether the two objects have penetrated, separated, or if any of the distance or penetration solvers have failed.
    */
    action GetStatus returns integer
        return status
    end

    /*
    This action sets whether the two objects have penetrated, separated, or if any of the distance or penetration solvers have failed.
    */
    action SetStatus(integer status)
        me:status = status
    end

    /*
    This action gets an array that stores the closest points of two colliding objects relative to each other.
    */
    action GetWitness returns Array<Vector3>
        return witness
    end

    /*
    This action returns the direction that you should move the objects so that they are not penetrating anymore.
    */
    action GetNormal returns Vector3
        return normal
    end

    /*
    This action sets the direction that you should move the objects so that they are not penetrating anymore.
    */
    action SetNormal(Vector3 normal)
        me:normal = normal
    end

    /*
    This action returns the depth of penetration when two objects collide.
    */
    action GetDepth returns number
        return depth
    end

    /*
    This action sets the depth of penetration when two objects collide.
    */
    action SetDepth(number depth)
        me:depth = depth
    end

    /*
    This action returns how many iterations that the penetration solver has been in use.
    */
    action GetPenetrationIterations returns integer
        return penetrationIterations
    end

    /*
    This action sets how many iterations that the penetration solver has been in use.
    */
    action SetPenetrationIterations(integer iterations)
        me:penetrationIterations = iterations
    end

    /*
    This action returns how many iterations that the distance solver has been in use.
    */
    action GetDistanceIterations returns integer
        return distanceIterations
    end

    /*
    This action sets how many iterations that the distance solver has been in use.
    */
    action SetDistanceIterations(integer iterations)
        me:distanceIterations = iterations
    end
end