package Libraries.Game.Collision.Narrowphase

use Libraries.Game.Collision.Shapes.CollisionShape3D
use Libraries.Game.Collision.CollisionPointsResult3D
use Libraries.Compute.BitwiseOperations
use Libraries.Containers.Array
use Libraries.Compute.Matrix3
use Libraries.Compute.Vector3
use Libraries.Game.Collision.Narrowphase.ConvexConvexCollisionSolverNode
use Libraries.Compute.Math
use Libraries.Compute.Quaternion
use Libraries.Containers.Table
use Libraries.Game.Collision.Narrowphase.ConvexConvexDistanceSolver
use Libraries.Game.Collision.Narrowphase.ConvexConvexPenetrationSolver
use Libraries.Game.Collision.Narrowphase.ConvexConvexCollisionSolverResults
use Libraries.Game.Collision.PhysicsPosition3D

/*
This class contains actions that lets you know if two objects have collided or not.
*/
class ConvexConvexCollisionSolver
    BitwiseOperations bo
// ****************************************************************************
// GjkEpaSolver actions

    ConvexConvexDistanceSolver gjk

    constant number cst2Pi = 6.283185307179586232
    constant number cstPi = cst2Pi * 0.5
    constant number cstInf = cstPi:GetMaximumValue()
    constant integer GjkMaxIterations = 128
    constant integer hashSize = bo:ShiftLeft(1, 6)
    constant integer hashMask = hashSize - 1
    constant number inSimplexEps = 0.0001
    constant number sqInSimplexEps = inSimplexEps * inSimplexEps
    constant integer EpaMaxIterations = 256
    constant number EpaInfaceEps = 0.01
    constant number EpaAccuracy = 0.001

    /*
    This action lets you know if two objects have collided or not.
    */
    action Collide(CollisionShape3D shape0, PhysicsPosition3D wtrs0, CollisionShape3D shape1, PhysicsPosition3D wtrs1,
                number radialMargin, ConvexConvexCollisionSolverResults results) returns boolean

        results:GetWitness():Get(0):Set(0, 0, 0)
        results:GetWitness():Get(1):Set(0, 0, 0)
        results:GetNormal():Set(0, 0, 0)
        results:SetDepth(0)
        results:SetStatus(results:SEPARATED)
        results:SetPenetrationIterations(0)
        results:SetDistanceIterations(0)

        gjk:Initialize(wtrs0:GetBasis(), wtrs0:GetOrigin(), shape0, wtrs1:GetBasis(), wtrs1:GetOrigin(), shape1, radialMargin + EpaAccuracy)

        boolean collide = gjk:SearchOrigin()
        results:SetDistanceIterations(gjk:GetIterations() + 1)
        if collide
            ConvexConvexPenetrationSolver epa
            epa:Set(gjk)
            number pd = epa:EvaluatePenetrationDepth()
            results:SetPenetrationIterations(epa:GetIterations() + 1)
            if pd > 0
                results:SetStatus(results:PENETRATING)
                results:GetNormal():Set(epa:GetNormal())
                results:SetDepth(pd)
                results:GetWitness():Get(0):Set(epa:GetNearest():Get(0))
                results:GetWitness():Get(1):Set(epa:GetNearest():Get(1))
                return true
            else
                if epa:Failed()
                    results:SetStatus(results:PENETRATION_FAILED)
                end
            end
        else
            if gjk:Failed()
                results:SetStatus(results:DISTANCE_FAILED)
            end
        end

        return false
    end
end