package Libraries.Game.Collision.Narrowphase

use Libraries.Compute.Vector2

/*
This class serves as the container that contains the closest points between
shapes A and B on both shape A and shape B.
*/
class DistanceOutput2D 
    //the closest point on shape A to shape B
    Vector2 pointA
    //the closest point on shape B to shape A
    Vector2 pointB
    //the distance between pointA and pointB
    number distance = 0
    //how many interations of the GJK algorithm was used to solve
    integer iterations = 0

    /*
    This action returns the closest point on shape A to shape B.
    */
    action GetPointA returns Vector2
        return pointA
    end

    /*
    This action sets the closest point on shape A to shape B.
    */
    action SetPointA(Vector2 point)
        pointA = point
    end

    /*
    This action returns the closest point on shape B to shape A.
    */
    action GetPointB returns Vector2
        return pointB
    end

    /*
    This action sets the closest point on shape B to shape A.
    */
    action SetPointB(Vector2 point)
        pointB = point
    end

    /*
    This action returns the distance between the cloest point on shape A 
    to shape B.
    */
    action GetDistance returns number
        return distance
    end

    /*
    This action sets the distance between the cloest point on shape A 
    to shape B.
    */
    action SetDistance(number distance)
        me:distance = distance
    end

    /*
    This action returns how many iterations of the GJK algorithm that was used 
    to solve the distance between shape A and shape B.
    */
    action GetIterations returns integer
        return iterations
    end

    /*
    This action sets how many iterations of the GJK algorithm that was used 
    to solve the distance between shape A and shape B.
    */
    action SetIterations(integer iterations)
        me:iterations = iterations
    end
end