package Libraries.Game.Collision.Narrowphase

use Libraries.Containers.Array
use Libraries.Compute.BitwiseOperations
use Libraries.Compute.Math
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Collision.Sweep2D
use Libraries.Game.Collision.Narrowphase.SimplexCache2D
use Libraries.Game.Collision.Narrowphase.Separation2D
use Libraries.Game.Collision.Narrowphase.DistanceOutput2D
use Libraries.Game.Collision.Narrowphase.DistanceInput2D
use Libraries.Game.Collision.Narrowphase.Distance2D

/*
This class estimates the time of impact between two 2D objects. The time that
this class returns will not be the exact time that the two objects has collided
but the time will be such that we know for sure at that time, the two object
is for sure colliding.
*/
class TimeOfImpact2D
    constant integer MAX_ITERATIONS = 20
    constant integer MAX_ROOT_ITERATIONS = 50

    integer toiCalls = 0
    integer toiIters = 0
    integer toiMaxIters = 0
    integer toiRootIters = 0
    integer toiMaxRootIters = 0

    SimplexCache2D cache
    DistanceInput2D distanceInput
    PhysicsPosition2D xfa
    PhysicsPosition2D xfb
    DistanceOutput2D distanceOutput
    Separation2D separation
    Array<integer> indexes    //indexA and indexB
    Sweep2D sweepA
    Sweep2D sweepB

    Distance2D distance

    BitwiseOperations bo
    Math math

    on create
        indexes:Add(0)
        indexes:Add(0)
    end

    /*
    This action returns the upper bound of when two object has collided by 
    specifying what percentage into the time period between [0, tMax] that
    the object has collided.
    */
    action TimeOfImpact(TimeOfImpactOutput2D out, TimeOfImpactInput2D in)
        toiCalls = toiCalls + 1

        out:SetState(out:UNKNOWN)
        out:SetTime(in:GetTimeMax())

        DistanceProxy2D proxyA = in:GetProxyA()
        DistanceProxy2D proxyB = in:GetProxyB()

        sweepA:Set(in:GetSweepA())
        sweepB:Set(in:GetSweepB())

        sweepA:Normalize()
        sweepB:Normalize()

        number tMax = in:GetTimeMax()

        number totalRadius = proxyA:GetRadius() + proxyB:GetRadius()

        number target = totalRadius - 3.0 * 0.005
        if target < 0.005
            target = 0.005
        end
        number tolerance = 0.25 * 0.005

        number t1 = 0
        integer iter = 0

        cache:SetCount(0)
        distanceInput:SetProxyA(in:GetProxyA())
        distanceInput:SetProxyB(in:GetProxyB())
        distanceInput:SetUseRadii(false)

        // the outer loop progressively attempts to compute new separating axes
        // the loop terminates when an axis is repeated (no progress made)
        boolean progressMade = true
        repeat while progressMade
            sweepA:GetTransform(xfa, t1)
            sweepB:GetTransform(xfb, t1)

            distanceInput:SetTransformA(xfa)
            distanceInput:SetTransformB(xfb)
            distance:Distance(distanceOutput, cache, distanceInput)

            if distanceOutput:GetDistance() <= 0
                out:SetState(out:OVERLAPPED)
                out:SetTime(0)
                progressMade = false
            end

            if progressMade
                if distanceOutput:GetDistance() < target + tolerance
                    out:SetState(out:TOUCHING)
                    out:SetTime(t1)
                    progressMade = false
                end
            end

            if progressMade
                separation:SetProxyA(proxyA)
                separation:SetSweepA(sweepA)
                separation:SetProxyB(proxyB)
                separation:SetSweepB(sweepB)
                separation:Initialize(cache, t1)

                boolean done = false
                number t2 = tMax
                integer pushBackIter = 0

                boolean break = false
                repeat while not break
                    number s2 = separation:FindMinimumSeparation(indexes, t2)

                    if s2 > target + tolerance
                        out:SetState(out:SEPARATED)
                        out:SetTime(tMax)
                        done = true
                        break = true
                    end

                    if not break
                        if s2 > target - tolerance
                            t1 = t2
                            break = true
                        end
                    end

                    if not break
                        number s1 = separation:Evaluate(indexes:Get(0), indexes:Get(1), t1)

                        if s1 < target - tolerance
                            out:SetState(out:FAILED)
                            out:SetTime(t1)
                            done = true
                            break = true
                        end

                        if not break
                            if s1 <= target + tolerance
                                out:SetState(out:TOUCHING)
                                out:SetTime(t1)
                                done = true
                                break = true
                            end
                        end

                        if not break
                            integer rootIterCount = 0
                            number a1 = t1
                            number a2 = t2
                            boolean break1 = false
                            repeat while not break1
                                number t = 0
                                if bo:And(rootIterCount, 1) = 1
                                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1)
                                else
                                    t1 = 0.5 * (a1 + a2)
                                end

                                rootIterCount = rootIterCount + 1
                                toiRootIters = toiRootIters + 1

                                number s = separation:Evaluate(indexes:Get(0), indexes:Get(1), t)

                                if math:AbsoluteValue(s - target) < tolerance
                                    t2 = t
                                    break1 = true
                                end

                                if not break1
                                    if s > target
                                        a1 = t
                                        s1 = s
                                    else
                                        a2 = t
                                        s2 = s
                                    end

                                    if rootIterCount = MAX_ROOT_ITERATIONS
                                        break1 = true
                                    end
                                end
                            end

                            if rootIterCount > toiMaxRootIters
                                toiMaxRootIters = rootIterCount
                            end

                            pushBackIter = pushBackIter + 1

                            if pushBackIter = 8 or rootIterCount = MAX_ROOT_ITERATIONS
                                break = true
                            end
                        end
                    end
                end

                iter = iter + 1
                toiIters = toiIters + 1

                if done
                    progressMade = false
                end

                if not progressMade
                    if iter = MAX_ITERATIONS
                        out:SetState(out:FAILED)
                        out:SetTime(t1)
                        progressMade = false
                    end
                end
            end
        end

        if iter > toiMaxIters
            toiMaxIters = iter
        end
    end
end