package Libraries.Game.Collision.Narrowphase

use Libraries.Compute.Vector3
use Libraries.Containers.Array

/*
This class stores the result from the calculation in the class ConvexConvexSimplexSolver.
Therefore, this class contains what is a closest point from a point of interest to a point,
or a line, or a triangle, or a tetrahedron (and we classify all these shapes under the term Simplex).
*/
class ConvexConvexSubSimplexClosestResult
    Vector3 closestPointOnSimplex

    boolean usedVertexA = false
    boolean usedVertexB = false
    boolean usedVertexC = false
    boolean usedVertexD = false

    Array<number> barycentricCoordinates
    boolean degenerate = false

    on create
        barycentricCoordinates:SetSize(4)
    end

    /*
    This action resets all vertices so that none of them are used.
    */
    action UsedVerticesReset
        usedVertexA = false
        usedVertexB = false
        usedVertexC = false
        usedVertexD = false
    end

    /*
    This action resets all of the variables inside this class.
    */
    action Reset
        degenerate = false
        SetBarycentricCoordinates(0, 0, 0, 0)
        UsedVerticesReset()
    end

    /*
    This action checks if the closest point calculation is valid or not.
    */
    action IsValid returns boolean
        boolean valid = barycentricCoordinates:Get(0) >= 0 and
                        barycentricCoordinates:Get(1) >= 0 and
                        barycentricCoordinates:Get(2) >= 0 and
                        barycentricCoordinates:Get(3) >= 0

        return valid
    end

    /*
    This action sets the numbers that will describe where the point of interest is with respect to the simplex.
    */
    action SetBarycentricCoordinates(number a, number b, number c, number d)
        barycentricCoordinates:Set(0, a)
        barycentricCoordinates:Set(1, b)
        barycentricCoordinates:Set(2, c)
        barycentricCoordinates:Set(3, d)
    end

    /*
    This action returns where the closest point on a simplex is to the point of interest.
    */
    action GetClosestPointOnSimplex returns Vector3
        return closestPointOnSimplex
    end


    /*
    This action sets where the closest point on a simplex is to the point of interest.
    */
    action SetClosestPointOnSimplex(Vector3 point)
        closestPointOnSimplex = point
    end

    /*
    This action lets you know whether the point of interest is close to vertex A or not.
    */
    action UsedVertexA returns boolean
        return usedVertexA
    end

    /*
    This action sets whether the point of interest is close to vertex A or not.
    */
    action SetUsedVertexA(boolean flag)
        usedVertexA = flag
    end

    /*
    This action lets you know whether the point of interest is close to vertex B or not.
    */
    action UsedVertexB returns boolean
        return usedVertexB
    end

    /*
    This action sets whether the point of interest is close to vertex B or not.
    */
    action SetUsedVertexB(boolean flag)
        usedVertexB = flag
    end

    /*
    This action lets you know whether the point of interest is close to vertex C or not.
    */
    action UsedVertexC returns boolean
        return usedVertexC
    end

    /*
    This action sets whether the point of interest is close to vertex C or not.
    */
    action SetUsedVertexC(boolean flag)
        usedVertexC = flag
    end

    /*
    This action lets you know whether the point of interest is close to vertex D or not.
    */
    action UsedVertexD returns boolean
        return usedVertexD
    end

    /*
    This action sets whether the point of interest is close to vertex D or not.
    */
    action SetUsedVertexD(boolean flag)
        usedVertexD = flag
    end

    /*
    This action gets the numbers that will describe where the point of interest is with respect to the simplex.
    */
    action GetBarycentricCoordinates returns Array<number>
        return barycentricCoordinates
    end

    /*
    This action lets you know if a simplex is degenerate or not. For example, a degeneration triangle
    would have vertices A, B, C with two of these vertices being the same point.
    */
    action Degenerate returns boolean
        return degenerate
    end

    /*
    This action sets if a simplex is degenerate or not. For example, a degeneration triangle
    would have vertices A, B, C with two of these vertices being the same point.
    */
    action SetDegenerate(boolean flag)
        degenerate = flag
    end
end