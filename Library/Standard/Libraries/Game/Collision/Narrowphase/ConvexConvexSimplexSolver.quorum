package Libraries.Game.Collision.Narrowphase

use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Game.Collision.Narrowphase.ConvexConvexSubSimplexClosestResult

/*
This action finds the closest point on a object to the origin.
*/
class ConvexConvexSimplexSolver
// ****************************************************************************
// VoroniSimplexSolver class fields and actions

    constant integer VORONI_SIMPLEX_MAX_VERTICES = 5
    
    constant integer VERTA = 0
    constant integer VERTB = 1
    constant integer VERTC = 2
    constant integer VERTD = 3

    integer numVertices = 0

    Array<Vector3> simplexVectorW
    Array<Vector3> simplexPointsP
    Array<Vector3> simplexPointsQ

    Vector3 cachedP1
    Vector3 cachedP2
    Vector3 cachedV
    Vector3 lastW
    boolean cachedValidClosest = false

    ConvexConvexSubSimplexClosestResult cachedBC

    boolean needsUpdate = false

    Math math

    on create
        repeat VORONI_SIMPLEX_MAX_VERTICES times
            Vector3 v1
            Vector3 v2
            Vector3 v3
            simplexVectorW:Add(v1)
            simplexPointsP:Add(v2)
            simplexPointsQ:Add(v3)
        end
    end

    /*
    This action removes a vertex from a simplex (which is the umbrella term for a point, a line, a triangle, or a tetrahedron).
    */
    action RemoveVertex(integer index)
        numVertices = numVertices - 1
        simplexVectorW:Get(index):Set(simplexVectorW:Get(numVertices))
        simplexPointsP:Get(index):Set(simplexPointsP:Get(numVertices))
        simplexPointsQ:Get(index):Set(simplexPointsQ:Get(numVertices))
    end

    /*
    This action ignores the vertices that are unused inside a ConvexConvesSubSimplexClosestResult class, which can hold up to 4 vertices.
    */
    action ReduceVertices(ConvexConvexSubSimplexClosestResult usedVerts)
        if numVertices >= 4 and not usedVerts:UsedVertexD()
            RemoveVertex(3)
        end

        if numVertices >= 3 and not usedVerts:UsedVertexC()
            RemoveVertex(2)
        end

        if numVertices >= 2 and not usedVerts:UsedVertexB()
            RemoveVertex(1)
        end

        if numVertices >= 1 and not usedVerts:UsedVertexA()
            RemoveVertex(0)
        end
    end

    /*
    This action updates the vertex on the current simplex that is closest to the origin and also updates the 
    closest point from the current simplex to the origin.
    */
    action UpdateClosestVectorAndPoints returns boolean
        if needsUpdate
            cachedBC:Reset()

            needsUpdate = false

            if numVertices = 0
                cachedValidClosest = false
            elseif numVertices = 1
                cachedP1:Set(simplexPointsP:Get(0))
                cachedP2:Set(simplexPointsQ:Get(0))
                cachedV:Set(cachedP1):Subtract(cachedP2)
                cachedBC:Reset()
                cachedBC:SetBarycentricCoordinates(1, 0, 0, 0)
                cachedValidClosest = cachedBC:IsValid()
            elseif numVertices = 2
                Vector3 tmp

                Vector3 from = simplexVectorW:Get(0)
                Vector3 to = simplexVectorW:Get(1)
                Vector3 nearest

                Vector3 p
                p:Set(0, 0, 0)
                Vector3 diff
                diff:Set(p):Subtract(from)

                Vector3 v
                v:Set(to):Subtract(from)

                number t = v:DotProduct(diff)

                if t > 0
                    number dotVV = v:DotProduct(v)
                    if t < dotVV
                        t = t / dotVV
                        tmp:Set(v):Scale(t)
                        diff:Subtract(tmp)
                        cachedBC:SetUsedVertexA(true)
                        cachedBC:SetUsedVertexB(true)
                    else
                        t = 1
                        diff:Subtract(v)
                        cachedBC:SetUsedVertexB(true)
                    end
                else
                    t = 0
                    cachedBC:SetUsedVertexA(true)
                end

                cachedBC:SetBarycentricCoordinates(1 - t, t, 0, 0)

                tmp:Set(v):Scale(t)
                nearest:Set(from):Add(tmp)

                tmp:Set(simplexPointsP:Get(1)):Subtract(simplexPointsP:Get(0))
                tmp:Scale(t)
                cachedP1:Set(simplexPointsP:Get(0)):Add(tmp)

                tmp:Set(simplexPointsQ:Get(1)):Subtract(simplexPointsQ:Get(0))
                tmp:Scale(t)
                cachedP2:Set(simplexPointsQ:Get(0)):Add(tmp)

                cachedV:Set(cachedP1):Subtract(cachedP2)

                ReduceVertices(cachedBC)

                cachedValidClosest = cachedBC:IsValid()
            elseif numVertices = 3
                Vector3 tmp1
                Vector3 tmp2
                Vector3 tmp3

                Vector3 p
                p:Set(0, 0, 0)

                Vector3 a = simplexVectorW:Get(0)
                Vector3 b = simplexVectorW:Get(1)
                Vector3 c = simplexVectorW:Get(2)

                ClosestPointTriangle(p, a, b, c, cachedBC)

                tmp1:Set(simplexPointsP:Get(0)):Scale(cachedBC:GetBarycentricCoordinates():Get(0))
                tmp2:Set(simplexPointsP:Get(1)):Scale(cachedBC:GetBarycentricCoordinates():Get(1))
                tmp3:Set(simplexPointsP:Get(2)):Scale(cachedBC:GetBarycentricCoordinates():Get(2))
                cachedP1:Set(tmp1):Add(tmp2):Add(tmp3)

                tmp1:Set(simplexPointsQ:Get(0)):Scale(cachedBC:GetBarycentricCoordinates():Get(0))
                tmp2:Set(simplexPointsQ:Get(1)):Scale(cachedBC:GetBarycentricCoordinates():Get(1))
                tmp3:Set(simplexPointsQ:Get(2)):Scale(cachedBC:GetBarycentricCoordinates():Get(2))
                cachedP2:Set(tmp1):Add(tmp2):Add(tmp3)

                cachedV:Set(cachedP1):Subtract(cachedP2)

                ReduceVertices(cachedBC)
                cachedValidClosest = cachedBC:IsValid()
            elseif numVertices = 4
                Vector3 tmp1
                Vector3 tmp2
                Vector3 tmp3
                Vector3 tmp4

                Vector3 p
                p:Set(0, 0, 0)

                Vector3 a = simplexVectorW:Get(0)
                Vector3 b = simplexVectorW:Get(1)
                Vector3 c = simplexVectorW:Get(2)
                Vector3 d = simplexVectorW:Get(3)

                boolean hasSeparation = ClosestPointTetrahedron(p, a, b, c, d, cachedBC)
                boolean break = false

                if hasSeparation
                    tmp1:Set(simplexPointsP:Get(0)):Scale(cachedBC:GetBarycentricCoordinates():Get(0))
                    tmp2:Set(simplexPointsP:Get(1)):Scale(cachedBC:GetBarycentricCoordinates():Get(1))
                    tmp3:Set(simplexPointsP:Get(2)):Scale(cachedBC:GetBarycentricCoordinates():Get(2))
                    tmp4:Set(simplexPointsP:Get(3)):Scale(cachedBC:GetBarycentricCoordinates():Get(3))
                    cachedP1:Set(tmp1):Add(tmp2):Add(tmp3):Add(tmp4)

                    tmp1:Set(simplexPointsQ:Get(0)):Scale(cachedBC:GetBarycentricCoordinates():Get(0))
                    tmp2:Set(simplexPointsQ:Get(1)):Scale(cachedBC:GetBarycentricCoordinates():Get(1))
                    tmp3:Set(simplexPointsQ:Get(2)):Scale(cachedBC:GetBarycentricCoordinates():Get(2))
                    tmp4:Set(simplexPointsQ:Get(3)):Scale(cachedBC:GetBarycentricCoordinates():Get(3))
                    cachedP2:Set(tmp1):Add(tmp2):Add(tmp3):Add(tmp4)

                    cachedV:Set(cachedP1):Subtract(cachedP2)
                    ReduceVertices(cachedBC)
                else
                    if cachedBC:Degenerate()
                        cachedValidClosest = false
                    else
                        cachedValidClosest = true
                        cachedV:Set(0, 0, 0)
                    end
                    break = true
                end

                if not break
                    cachedValidClosest = cachedBC:IsValid()
                end
            else
                cachedValidClosest = false
            end
        end

        return cachedValidClosest
    end

    /*
    This action finds the closest point on a triangle to the origin.
    */
    private action ClosestPointTriangle(Vector3 p, Vector3 a, Vector3 b, Vector3 c, ConvexConvexSubSimplexClosestResult result) returns boolean
        result:UsedVerticesReset()
        
        Vector3 ab
        ab:Set(b):Subtract(a)

        Vector3 ac
        ac:Set(c):Subtract(a)

        Vector3 ap
        ap:Set(p):Subtract(a)

        number d1 = ab:DotProduct(ap)
        number d2 = ac:DotProduct(ap)

        if d1 <= 0 and d2 <= 0
            result:GetClosestPointOnSimplex():Set(a)
            result:SetUsedVertexA(true)
            result:SetBarycentricCoordinates(1, 0, 0, 0)
            return true
        end

        Vector3 bp
        bp:Set(p):Subtract(b)

        number d3 = ab:DotProduct(bp)
        number d4 = ac:DotProduct(bp)

        if d3 >= 0 and d4 <= d3
            result:GetClosestPointOnSimplex():Set(b)
            result:SetUsedVertexB(true)
            result:SetBarycentricCoordinates(0, 1, 0, 0)
            return true
        end

        number vc = d1*d4 - d3*d2
        if vc <= 0 and d1 >= 0 and d3 <= 0
            number v = d1 / (d1 - d3)
            result:GetClosestPointOnSimplex():Set(ab):Scale(v):Add(a)
            result:SetUsedVertexA(true)
            result:SetUsedVertexB(true)
            result:SetBarycentricCoordinates(1-v, v, 0, 0)
            return true
        end

        Vector3 cp
        cp:Set(p):Subtract(c)

        number d5 = ab:DotProduct(cp)
        number d6 = ac:DotProduct(cp)

        if d6 >= 0 and d5 <= d6
            result:GetClosestPointOnSimplex():Set(c)
            result:SetUsedVertexC(true)
            result:SetBarycentricCoordinates(0, 0, 1, 0)
            return true
        end

        number vb = d5*d2 - d1*d6
        if vb <= 0 and d2 >= 0 and d6 <= 0
            number w = d2 / (d2 - d6)
            result:GetClosestPointOnSimplex():Set(ac):Scale(w):Add(a)
            result:SetUsedVertexA(true)
            result:SetUsedVertexC(true)
            result:SetBarycentricCoordinates(1-w, 0, w, 0)
            return true
        end

        number va = d3*d6 - d5*d4
        if va <= 0 and (d4 - d3) >= 0 and (d5 - d6) >= 0
            number w = (d4 - d3) / ((d4 - d3) + (d5 - d6))

            Vector3 tmp
            tmp:Set(c):Subtract(b)
            result:GetClosestPointOnSimplex():Set(tmp):Scale(w):Add(b)

            result:SetUsedVertexB(true)
            result:SetUsedVertexC(true)
            result:SetBarycentricCoordinates(0, 1-w, w, 0)
            return true
        end

        number denom = 1 / (va + vb + vc)
        number v = vb * denom
        number w = vc * denom

        Vector3 tmp1
        Vector3 tmp2

        tmp1:Set(ab):Scale(v)
        tmp2:Set(ac):Scale(w)
        result:GetClosestPointOnSimplex():Set(a):Add(tmp1):Add(tmp2)
        result:SetUsedVertexA(true)
        result:SetUsedVertexB(true)
        result:SetUsedVertexC(true)
        result:SetBarycentricCoordinates(1-v-w, v, w, 0)

        return true
    end
    
    /*
    This action calculates whether the two points, p and d, are on the same side of the plane
    that contains the points a, b, and c.
    */
    private action PointOutsideOfPlane(Vector3 p, Vector3 a, Vector3 b, Vector3 c, Vector3 d) returns integer
        Vector3 tmp

        Vector3 normal
        normal:Set(b):Subtract(a)
        tmp:Set(c):Subtract(a)
        normal:CrossProduct(tmp)

        tmp:Set(p):Subtract(a)
        number signp = tmp:DotProduct(normal)

        tmp:Set(d):Subtract(a)
        number signd = tmp:DotProduct(normal)

        if signd * signd < ((0.0001 * 0.0001))      //if they are both on the plane
            return -1
        end

        if signp * signd < 0        //if they are on opposite sides of the plane
            return 1
        else
            return 0        //if they are on the same side of the plane
        end
    end

    /*
    This action calculates the closest point from a tetrahedron to the origin.
    */
    private action ClosestPointTetrahedron(Vector3 p, Vector3 a, Vector3 b, Vector3 c, Vector3 d, ConvexConvexSubSimplexClosestResult finalResult) returns boolean
        ConvexConvexSubSimplexClosestResult tempResult
        tempResult:Reset()

        Vector3 tmp
        Vector3 q

        finalResult:GetClosestPointOnSimplex():Set(p)
        finalResult:UsedVerticesReset()
        finalResult:SetUsedVertexA(true)
        finalResult:SetUsedVertexB(true)
        finalResult:SetUsedVertexC(true)
        finalResult:SetUsedVertexD(true)

        integer pointOutsideABC = PointOutsideOfPlane(p, a, b, c, d)
        integer pointOutsideACD = PointOutsideOfPlane(p, a, c, d, b)
        integer pointOutsideADB = PointOutsideOfPlane(p, a, d, b, c)
        integer pointOutsideBDC = PointOutsideOfPlane(p, b, d, c, a)

        if pointOutsideABC < 0 or pointOutsideACD < 0 or pointOutsideADB < 0 or pointOutsideBDC < 0
            finalResult:SetDegenerate(true)
            return false
        end

        if pointOutsideABC = 0 and pointOutsideACD = 0 and pointOutsideADB = 0 and pointOutsideBDC = 0
            return false
        end

        number bestSqDist = 0
        bestSqDist = bestSqDist:GetMaximumValue()

        if pointOutsideABC not= 0
            ClosestPointTriangle(p, a, b, c, tempResult)
            q:Set(tempResult:GetClosestPointOnSimplex())

            tmp:Set(q):Subtract(p)
            number sqDist = tmp:DotProduct(tmp)
            
            if sqDist < bestSqDist
                bestSqDist = sqDist
                finalResult:GetClosestPointOnSimplex():Set(q)
                finalResult:UsedVerticesReset()
                finalResult:SetUsedVertexA(tempResult:UsedVertexA())
                finalResult:SetUsedVertexB(tempResult:UsedVertexB())
                finalResult:SetUsedVertexC(tempResult:UsedVertexC())
                finalResult:SetBarycentricCoordinates(tempResult:GetBarycentricCoordinates():Get(VERTA), 
                                                      tempResult:GetBarycentricCoordinates():Get(VERTB), 
                                                      tempResult:GetBarycentricCoordinates():Get(VERTC), 
                                                      0)
            end
        end

        if pointOutsideACD not= 0
            ClosestPointTriangle(p, a, c, d, tempResult)
            q:Set(tempResult:GetClosestPointOnSimplex())

            tmp:Set(q):Subtract(p)
            number sqDist = tmp:DotProduct(tmp)
            if sqDist < bestSqDist
                bestSqDist = sqDist
                finalResult:GetClosestPointOnSimplex():Set(q)
                finalResult:UsedVerticesReset()
                finalResult:SetUsedVertexA(tempResult:UsedVertexA())
                finalResult:SetUsedVertexC(tempResult:UsedVertexB())
                finalResult:SetUsedVertexD(tempResult:UsedVertexC())
                finalResult:SetBarycentricCoordinates(tempResult:GetBarycentricCoordinates():Get(VERTA),
                                                      0,
                                                      tempResult:GetBarycentricCoordinates():Get(VERTB),
                                                      tempResult:GetBarycentricCoordinates():Get(VERTC))
            end
        end

        if pointOutsideADB not= 0
            ClosestPointTriangle(p, a, d, b, tempResult)
            q:Set(tempResult:GetClosestPointOnSimplex())

            tmp:Set(q):Subtract(p)
            number sqDist = tmp:DotProduct(tmp)
            if sqDist < bestSqDist
                bestSqDist = sqDist
                finalResult:GetClosestPointOnSimplex():Set(q)
                finalResult:UsedVerticesReset()
                finalResult:SetUsedVertexA(tempResult:UsedVertexA())
                finalResult:SetUsedVertexB(tempResult:UsedVertexC())
                finalResult:SetUsedVertexD(tempResult:UsedVertexB())
                finalResult:SetBarycentricCoordinates(tempResult:GetBarycentricCoordinates():Get(VERTA),
                                                      tempResult:GetBarycentricCoordinates():Get(VERTC),
                                                      0,
                                                      tempResult:GetBarycentricCoordinates():Get(VERTB))
            end
        end

        if pointOutsideBDC not= 0
            ClosestPointTriangle(p, b, d, c, tempResult)
            q:Set(tempResult:GetClosestPointOnSimplex())

            tmp:Set(q):Subtract(p)
            number sqDist = tmp:DotProduct(tmp)
            if sqDist < bestSqDist
                bestSqDist = sqDist
                finalResult:GetClosestPointOnSimplex():Set(q)
                finalResult:UsedVerticesReset()
                finalResult:SetUsedVertexB(tempResult:UsedVertexA())
                finalResult:SetUsedVertexC(tempResult:UsedVertexC())
                finalResult:SetUsedVertexD(tempResult:UsedVertexB())
                finalResult:SetBarycentricCoordinates(0,
                                                      tempResult:GetBarycentricCoordinates():Get(VERTA),
                                                      tempResult:GetBarycentricCoordinates():Get(VERTC),
                                                      tempResult:GetBarycentricCoordinates():Get(VERTB))
            end
        end

        if finalResult:UsedVertexA() and finalResult:UsedVertexB() and finalResult:UsedVertexC() and finalResult:UsedVertexD()
            return true
        end

        return true
    end

    /*
    This action resets the ConvexConvexSimplexSolver.
    */
    action Reset
        number value = math:RaiseToPower(10, 30)
        cachedValidClosest = false
        numVertices = 0
        needsUpdate = true
        lastW:Set(value, value, value)
        cachedBC:Reset()
    end

    /*
    This action updates the simplex.
    */
    action AddVertex(Vector3 w, Vector3 p, Vector3 q)
        lastW:Set(w)
        needsUpdate = true

        simplexVectorW:Get(numVertices):Set(w)
        simplexPointsP:Get(numVertices):Set(p)
        simplexPointsQ:Get(numVertices):Set(q)

        numVertices = numVertices + 1
    end

    /*
    This action temporarily stores a vertex on the current simplex that is closest to the origin.
    */
    action Closest(Vector3 v) returns boolean
        boolean success = UpdateClosestVectorAndPoints()
        v:Set(cachedV)
        return success
    end

    /*
    This action returns the maximum distance from the origin to a vertex in the simplex.
    */
    action MaxVertex returns number
        integer i = 0
        integer numverts = numVertices
        number maxV = 0
        repeat while i < numverts
            number curLen2 = simplexVectorW:Get(i):LengthSquared()
            if maxV < curLen2
                maxV = curLen2
            end

            i = i + 1
        end

        return maxV
    end

    /*
    This action returns whether you have a tetrahedron as your current simplex.
    */
    action FullSimplex returns boolean
        return numVertices = 4
    end
    
    /*
    This action tests whether a vertex is inside the current simplex.
    */
    action InSimplex(Vector3 w) returns boolean
        boolean found = false
        integer i = 0
        integer numVerts = numVertices

        repeat while i < numVerts
            if simplexVectorW:Get(i):Equals(w)
                found = true
            end

            i = i + 1
        end

        if w:Equals(lastW)
            return true
        end

        return found
    end

    /*
    This action saves the closest vertex to the origin inside the "Vector3 v."
    */
    action BackupClosest(Vector3 v)
        v:Set(cachedV)
    end
    
    /*
    This action returns whether you have a simplex currently or not.
    */
    action EmptySimplex returns boolean
        return numVertices = 0
    end

    /*
    This action calls the action UpdateClosestVectorAndPoints and stores two different
    points temporarily to be used later. These two points can be anything that you know
    you will need later.
    */
    action ComputePoints(Vector3 p1, Vector3 p2)
        UpdateClosestVectorAndPoints()
        p1:Set(cachedP1)
        p2:Set(cachedP2)
    end

    /*
    This action returns the number of vertices there is in a simplex.
    */
    action GetNumberOfVertices returns number
        return numVertices
    end

    /*
    This action sets the number of vertices there is in a simplex.
    */
    action SetNumberOfVertices(integer numberOfVertices)
        numVertices = numberOfVertices
    end

    action GetSimplexVectorW returns Array<Vector3>
        return simplexVectorW
    end

    action GetSimplexPointsP returns Array<Vector3>
        return simplexPointsP
    end

    action GetSimplexPointsQ returns Array<Vector3>
        return simplexPointsQ
    end

    action GetCachedPointA returns Vector3
        return cachedP1
    end

    action SetCachedPointA(Vector3 point)
        cachedP1 = point
    end

    action GetCachedPointB returns Vector3
        return cachedP2
    end

    action SetCachedPointB(Vector3 point)
        cachedP2 = point
    end

    action GetCachedVector returns Vector3
        return cachedV
    end

    action SetCachedVector(Vector3 vector)
        cachedV = vector
    end

    action GetLastW returns Vector3
        return lastW
    end

    action SetLastW(Vector3 vector)
        lastW = vector
    end

    action IsCachedValidClosest returns boolean
        return cachedValidClosest
    end

    action SetCachedValidClosest(boolean flag)
        cachedValidClosest = flag
    end

    action NeedsUpdate returns boolean
        return needsUpdate
    end

    action SetNeedsUpdate(boolean flag)
        needsUpdate = flag
    end
end