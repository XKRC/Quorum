package Libraries.Game.Collision.Narrowphase

use Libraries.Game.Collision.Narrowphase.ConvexConvexDistanceSolver
use Libraries.Game.Collision.Narrowphase.ConvexConvexFace
use Libraries.Containers.Table
use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Game.Collision.Narrowphase.ConvexConvexVertex

/*
This class contains actions that will help solve how much one shape has penetrated
into another shape.
*/
class ConvexConvexPenetrationSolver
    ConvexConvexDistanceSolver gjk = undefined

    ConvexConvexFace root = undefined
    integer nFaces = 0
    integer iterations = 0
    Table<Vector3> features
    Array<Vector3> nearest
    Vector3 normal
    number depth = 0
    boolean failed = false

    constant number cstInf = depth:GetMaximumValue()
    constant integer EpaMaxIterations = 256
    constant number EpaInfaceEps = 0.01
    constant number EpaAccuracy = 0.001

    Array<integer> mod3
    Table<integer> tetrahedron_fidx
    Table<integer> tetrahedron_eidx

    Table<integer> hexahedron_fidx
    Table<integer> hexahedron_eidx  

    on create
        integer i = 0
        repeat 2 times
            integer j = 0
            repeat 3 times
                Vector3 v
                features:Add(i, j, v)

                j = j + 1
            end
            
            i = i + 1
        end

        repeat 2 times
            Vector3 v
            nearest:Add(v)
        end

        mod3:Add(0)
        mod3:Add(1)
        mod3:Add(2)
        mod3:Add(0)
        mod3:Add(1)

        tetrahedron_fidx:Add(0, 0, 2)
        tetrahedron_fidx:Add(0, 1, 1)
        tetrahedron_fidx:Add(0, 2, 0)

        tetrahedron_fidx:Add(1, 0, 3)
        tetrahedron_fidx:Add(1, 1, 0)
        tetrahedron_fidx:Add(1, 2, 1)

        tetrahedron_fidx:Add(2, 0, 3)
        tetrahedron_fidx:Add(2, 1, 1)
        tetrahedron_fidx:Add(2, 2, 2)

        tetrahedron_fidx:Add(3, 0, 3)
        tetrahedron_fidx:Add(3, 1, 2)
        tetrahedron_fidx:Add(3, 2, 0)

        tetrahedron_eidx:Add(0, 0, 0)
        tetrahedron_eidx:Add(0, 1, 0)
        tetrahedron_eidx:Add(0, 2, 2)
        tetrahedron_eidx:Add(0, 3, 1)

        tetrahedron_eidx:Add(1, 0, 0)
        tetrahedron_eidx:Add(1, 1, 1)
        tetrahedron_eidx:Add(1, 2, 1)
        tetrahedron_eidx:Add(1, 3, 1)

        tetrahedron_eidx:Add(2, 0, 0)
        tetrahedron_eidx:Add(2, 1, 2)
        tetrahedron_eidx:Add(2, 2, 3)
        tetrahedron_eidx:Add(2, 3, 1)

        tetrahedron_eidx:Add(3, 0, 1)
        tetrahedron_eidx:Add(3, 1, 0)
        tetrahedron_eidx:Add(3, 2, 3)
        tetrahedron_eidx:Add(3, 3, 2)

        tetrahedron_eidx:Add(4, 0, 2)
        tetrahedron_eidx:Add(4, 1, 0)
        tetrahedron_eidx:Add(4, 2, 1)
        tetrahedron_eidx:Add(4, 3, 2)

        tetrahedron_eidx:Add(5, 0, 3)
        tetrahedron_eidx:Add(5, 1, 0)
        tetrahedron_eidx:Add(5, 2, 2)
        tetrahedron_eidx:Add(5, 3, 2)

        hexahedron_fidx:Add(0, 0, 2)
        hexahedron_fidx:Add(0, 1, 0)
        hexahedron_fidx:Add(0, 2, 4)

        hexahedron_fidx:Add(1, 0, 4)
        hexahedron_fidx:Add(1, 1, 1)
        hexahedron_fidx:Add(1, 2, 2)

        hexahedron_fidx:Add(2, 0, 1)
        hexahedron_fidx:Add(2, 1, 4)
        hexahedron_fidx:Add(2, 2, 0)

        hexahedron_fidx:Add(3, 0, 0)
        hexahedron_fidx:Add(3, 1, 3)
        hexahedron_fidx:Add(3, 2, 1)

        hexahedron_fidx:Add(4, 0, 0)
        hexahedron_fidx:Add(4, 1, 2)
        hexahedron_fidx:Add(4, 2, 3)

        hexahedron_fidx:Add(5, 0, 1)
        hexahedron_fidx:Add(5, 1, 3)
        hexahedron_fidx:Add(5, 2, 2)

        hexahedron_eidx:Add(0, 0, 0)
        hexahedron_eidx:Add(0, 1, 0)
        hexahedron_eidx:Add(0, 2, 4)
        hexahedron_eidx:Add(0, 3, 0)

        hexahedron_eidx:Add(1, 0, 0)
        hexahedron_eidx:Add(1, 1, 1)
        hexahedron_eidx:Add(1, 2, 2)
        hexahedron_eidx:Add(1, 3, 1)

        hexahedron_eidx:Add(2, 0, 0)
        hexahedron_eidx:Add(2, 1, 2)
        hexahedron_eidx:Add(2, 2, 1)
        hexahedron_eidx:Add(2, 3, 2)

        hexahedron_eidx:Add(3, 0, 1)
        hexahedron_eidx:Add(3, 1, 1)
        hexahedron_eidx:Add(3, 2, 5)
        hexahedron_eidx:Add(3, 3, 2)

        hexahedron_eidx:Add(4, 0, 1)
        hexahedron_eidx:Add(4, 1, 0)
        hexahedron_eidx:Add(4, 2, 2)
        hexahedron_eidx:Add(4, 3, 0)

        hexahedron_eidx:Add(5, 0, 2)
        hexahedron_eidx:Add(5, 1, 2)
        hexahedron_eidx:Add(5, 2, 3)
        hexahedron_eidx:Add(5, 3, 2)

        hexahedron_eidx:Add(6, 0, 3)
        hexahedron_eidx:Add(6, 1, 1)
        hexahedron_eidx:Add(6, 2, 5)
        hexahedron_eidx:Add(6, 3, 0)

        hexahedron_eidx:Add(7, 0, 3)
        hexahedron_eidx:Add(7, 1, 0)
        hexahedron_eidx:Add(7, 2, 4)
        hexahedron_eidx:Add(7, 3, 2)

        hexahedron_eidx:Add(8, 0, 5)
        hexahedron_eidx:Add(8, 1, 1)
        hexahedron_eidx:Add(8, 2, 4)
        hexahedron_eidx:Add(8, 3, 1)
    end

    /*
    This action connects this ConvexConvexPenetrationSolver to a ConvexConvexDistanceSolver.
    */
    action Set(ConvexConvexDistanceSolver gjk)
        me:gjk = gjk
    end

    /*
    This action finds where the point of interest is relative to a face.
    */
    action GetCoordinates(ConvexConvexFace face, Vector3 out) returns Vector3
        Vector3 tmp
        Vector3 tmp1
        Vector3 tmp2

        Vector3 o
        o:Set(face:GetNormal()):Scale(-face:GetDistance())

        Array<number> a

        tmp1:Set(face:GetVertices():Get(0):GetVertex()):Subtract(o)
        tmp2:Set(face:GetVertices():Get(1):GetVertex()):Subtract(o)
        tmp:Set(tmp1):CrossProduct(tmp2)
        a:Add(tmp:Length())

        tmp1:Set(face:GetVertices():Get(1):GetVertex()):Subtract(o)
        tmp2:Set(face:GetVertices():Get(2):GetVertex()):Subtract(o)
        tmp:Set(tmp1):CrossProduct(tmp2)
        a:Add(tmp:Length())

        tmp1:Set(face:GetVertices():Get(2):GetVertex()):Subtract(o)
        tmp2:Set(face:GetVertices():Get(0):GetVertex()):Subtract(o)
        tmp:Set(tmp1):CrossProduct(tmp2)
        a:Add(tmp:Length())

        number sm = a:Get(0) + a:Get(1) + a:Get(2)

        out:Set(a:Get(1), a:Get(2), a:Get(0))
        number scale = 1
        if sm > 0
            scale = sm
        end
        out:Scale(1 / scale)

        return out
    end

    /*
    This action returns the face that is closest to a point of interest.
    */
    action FindBest returns ConvexConvexFace
        ConvexConvexFace bf = undefined

        if root not= undefined
            ConvexConvexFace cf = root
            number bd = cstInf
            repeat while cf not= undefined
                if cf:GetDistance() < bd
                    bd = cf:GetDistance()
                    bf = cf
                end
                cf = cf:GetNext()
            end
        end

        return bf
    end

    /*
    This action sets up the convex face that is made up of the 3 vertices that you passed in
    and returning if these 3 vertices can actually make up a face.
    */
    action Set(ConvexConvexFace f, ConvexConvexVertex a, ConvexConvexVertex b, ConvexConvexVertex c) returns boolean
        Vector3 tmp1
        Vector3 tmp2
        Vector3 tmp3

        Vector3 nrm
        tmp1:Set(b:GetVertex()):Subtract(a:GetVertex())
        tmp2:Set(c:GetVertex()):Subtract(a:GetVertex())   
        nrm:Set(tmp1):CrossProduct(tmp2)          //normal to the face

        number length = nrm:Length()

        tmp1:Set(a:GetVertex()):CrossProduct(b:GetVertex())
        tmp2:Set(b:GetVertex()):CrossProduct(c:GetVertex())
        tmp3:Set(c:GetVertex()):CrossProduct(a:GetVertex())

        boolean valid = tmp1:DotProduct(nrm) >= - EpaInfaceEps and
                        tmp2:DotProduct(nrm) >= - EpaInfaceEps and
                        tmp3:DotProduct(nrm) >= - EpaInfaceEps

        f:GetVertices():Set(0, a)       //set up the convex face that is made up of the 3 vertices
        f:GetVertices():Set(1, b)
        f:GetVertices():Set(2, c)
        f:SetMark(0)
        f:GetNormal():Set(nrm)
        number scale = cstInf
        if length > 0
            scale = length
        end
        f:GetNormal():Scale(1 / scale)
        f:SetDistance(0)
        if 0 < -f:GetNormal():DotProduct(a:GetVertex())
            f:SetDistance(-f:GetNormal():DotProduct(a:GetVertex()))
        end

        return valid
    end

    /*
    This action creates a new face using the 3 vertices that is passed in.
    */
    action NewFace(ConvexConvexVertex a, ConvexConvexVertex b, ConvexConvexVertex c) returns ConvexConvexFace
        ConvexConvexFace pf
        if Set(pf, a, b, c)
            if root not= undefined
                root:SetPrevious(pf)
            end
            pf:SetPrevious(undefined)
            pf:SetNext(root)
            root = pf
            nFaces = nFaces + 1
        else
            pf:SetPrevious(undefined)
            pf:SetNext(undefined)
        end

        return pf
    end

    /*
    This action deletes a face of a polyhedron.
    */
    action Detach(ConvexConvexFace face)
        if face:GetPrevious() not= undefined or face:GetNext() not= undefined
            nFaces = nFaces - 1
            if face = root
                root = face:GetNext()
                root:SetPrevious(undefined)
            else
                if face:GetNext() = undefined
                    face:GetPrevious():SetNext(undefined)
                else
                    face:GetPrevious():SetNext(face:GetNext())
                    face:GetNext():SetPrevious(face:GetPrevious())
                end
            end
            face:SetPrevious(undefined)
            face:SetNext(undefined)
        end
    end

    /*
    This action links two faces of a polyhedron together.
    */
    action Link(ConvexConvexFace f0, integer e0, ConvexConvexFace f1, integer e1)
        f0:GetFaces():Set(e0, f1)
        f1:GetEdges():Set(e1, e0)
        f1:GetFaces():Set(e1, f0)
        f0:GetEdges():Set(e0, e1)
    end

    /*
    This action finds the support for w.
    */
    action Support(Vector3 w) returns ConvexConvexVertex
        ConvexConvexVertex v
        gjk:Support(w, v)
        return v
    end

    /*
    This action builds a polytope that will be used to calculate the direction that we will need to separate the two 
    colliding objects (penetration direction).
    */
    action BuildHorizon(integer markid, ConvexConvexVertex w, ConvexConvexFace f, integer e, Array<ConvexConvexFace> cf, Array<ConvexConvexFace> ff) returns integer
        integer ne = 0
        if f:GetMark() not= markid
            integer e1 = mod3:Get(e + 1)
            if f:GetNormal():DotProduct(w:GetVertex()) + f:GetDistance() > 0
                ConvexConvexFace nf = NewFace(f:GetVertices():Get(e1), f:GetVertices():Get(e), w)
                Link(nf, 0, f, e)
                if cf:Get(0) not= undefined
                    Link(cf:Get(0), 1, nf, 2)
                else
                    ff:Set(0, nf)
                end
                cf:Set(0, nf)
                ne = 1
            else
                integer e2 = mod3:Get(e + 2)
                Detach(f)
                f:SetMark(markid)
                ne = ne + BuildHorizon(markid, w, f:GetFaces():Get(e1), f:GetEdges():Get(e1), cf, ff)
                ne = ne + BuildHorizon(markid, w, f:GetFaces():Get(e2), f:GetEdges():Get(e2), cf, ff)
            end
        end
        
        return ne
    end

    /*
    This action finds how much did one object has penetrated into another object.
    */
    action EvaluatePenetrationDepth returns number
        return EvaluatePenetrationDepth(EpaAccuracy)
    end

    /*
    This action finds how much did one object has penetrated into another object.
    */
    action EvaluatePenetrationDepth(number accuracy) returns number
        Vector3 tmp

        ConvexConvexFace bestFace = undefined
        integer markid = 1
        depth = -cstInf
        normal:Set(0, 0, 0)
        root = undefined
        nFaces = 0
        iterations = 0
        failed = false

        if gjk:EncloseOrigin()
            Table<integer> pfidx_ptr = undefined
            integer pfidx_index = 0
            
            integer nfidx = 0

            Table<integer> peidx_ptr = undefined
            integer peidx_index = 0

            integer neidx = 0
            Array<ConvexConvexVertex> basemkv
            Array<ConvexConvexFace> basefaces

            if gjk:GetOrder() = 3
                //Tetrahedron
                pfidx_ptr = tetrahedron_fidx
                pfidx_index = 0

                nfidx = 4

                peidx_ptr = tetrahedron_eidx
                peidx_index = 0

                neidx = 6                
            elseif gjk:GetOrder() = 4
                //Hexahedron
                pfidx_ptr = hexahedron_fidx
                pfidx_index = 0
                
                nfidx = 6

                peidx_ptr = hexahedron_eidx
                peidx_index = 0

                neidx = 9
            end
         
            integer i = 0
            repeat while i <= gjk:GetOrder()
                ConvexConvexVertex mkv
                basemkv:Add(mkv)
                basemkv:Get(i):Set(gjk:GetSimplex():Get(i))
                i = i + 1
            end

            i = 0
            repeat while i < nfidx
                ConvexConvexFace face = NewFace(basemkv:Get(pfidx_ptr:Get(pfidx_index, 0)), basemkv:Get(pfidx_ptr:Get(pfidx_index, 1)), basemkv:Get(pfidx_ptr:Get(pfidx_index, 2)))
                basefaces:Add(face)
                i = i + 1
                pfidx_index = pfidx_index + 1
            end

            i = 0
            repeat while i < neidx
                Link(basefaces:Get(peidx_ptr:Get(peidx_index, 0)), peidx_ptr:Get(peidx_index, 1), basefaces:Get(peidx_ptr:Get(peidx_index, 2)), peidx_ptr:Get(peidx_index, 3))

                i = i + 1
                peidx_index = peidx_index + 1
            end
        end

        if nFaces = 0
            return depth
        end

        boolean break = false
        repeat while iterations < EpaMaxIterations and not break
            ConvexConvexFace bf = FindBest()

            if bf not= undefined
                tmp:Set(bf:GetNormal()):Scale(-1)
                ConvexConvexVertex w = Support(tmp)
                number d = bf:GetNormal():DotProduct(w:GetVertex()) + bf:GetDistance()
                bestFace = bf
                if d < -accuracy
                    Array<ConvexConvexFace> cf
                    Array<ConvexConvexFace> ff
                    cf:SetSize(10)
                    ff:SetSize(10)
                    integer nf = 0
                    Detach(bf)
                    markid = markid + 1
                    bf:SetMark(markid)
                    integer j = 0
                    repeat while j < 3
                        nf = nf + BuildHorizon(markid, w, bf:GetFaces():Get(j), bf:GetEdges():Get(j), cf, ff)
                        j = j + 1
                    end
                    if nf <= 2
                        break = true
                    end

                    if not break
                        Link(cf:Get(0), 1, ff:Get(0), 2)
                    end
                else
                    break = true
                end
            else
                break = true
            end

            if not break
                iterations = iterations + 1
            end
        end

        if bestFace not= undefined
            Vector3 b
            GetCoordinates(bestFace, b)
            normal:Set(bestFace:GetNormal())
            depth = 0
            if bestFace:GetDistance() > 0
                depth = bestFace:GetDistance()
            end

            integer i = 0
            repeat while i < 2
                number s = 1
                if i not= 0
                    s = -1
                end

                integer j = 0
                repeat while j < 3
                    tmp:Set(bestFace:GetVertices():Get(j):GetRay()):Scale(s)
                    features:Set(i, j, gjk:LocalSupport(tmp, i))

                    j = j + 1
                end

                i = i + 1
            end

            Vector3 tmp1
            Vector3 tmp2
            Vector3 tmp3

            tmp1:Set(features:Get(0, 0)):Scale(b:GetX())
            tmp2:Set(features:Get(0, 1)):Scale(b:GetY())
            tmp3:Set(features:Get(0, 2)):Scale(b:GetZ())
            nearest:Get(0):Set(tmp1):Add(tmp2):Add(tmp3)

            tmp1:Set(features:Get(1, 0)):Scale(b:GetX())
            tmp2:Set(features:Get(1, 1)):Scale(b:GetY())
            tmp3:Set(features:Get(1, 2)):Scale(b:GetZ())
            nearest:Get(1):Set(tmp1):Add(tmp2):Add(tmp3)
            
        else
            failed = true
        end

        return depth
    end

    /*
    This action returns how many iterations did this solver run for.
    */
    action GetIterations returns integer
        return iterations
    end

    /*
    This action returns the direction that you need to push the two objects away to separate the two objects.
    */
    action GetNormal returns Vector3
        return normal
    end

    /*
    This action returns the vertices that makes up a face of a polyhedron that is closest to the origin.
    */
    action GetNearest returns Array<Vector3>
        return nearest
    end

    /*
    This action returns whether if the penetration solver has successfully found a direction that you should push the two objects
    so that they are not penetrating anymore.
    */
    action Failed returns boolean
        return failed
    end
end