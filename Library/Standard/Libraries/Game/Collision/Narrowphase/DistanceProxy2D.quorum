package Libraries.Game.Collision.Narrowphase

use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Game.Collision.Shapes.Circle
use Libraries.Game.Collision.Shapes.Polygon

/*
This class records all of the vertices of a shape, and with these vertices,
this class can calculate the support vertex of a shape to be used by the
DistanceInput2D class.
*/
class DistanceProxy2D 

    /*
    The array that contains the vertices of the shape.
    */
    Array<Vector2> vertices

    integer count = 0   //stores the number of vertices this shape has
    number radius = 0   //stores the radius of the shape
    

    /*
    By default, the maximum number of vertices we can have in 2D is 8, therefore,
    when a DistanceProxy2D is created, there will be storage for potentially
    8 vertices.
    */
    on create
        repeat 8 times
            Vector2 v
            vertices:Add(v)
        end
    end

    /*
    This action loads the vertices of the shape into this DistanceProxy2D object.
    */
    action Set(CollisionShape2D shape, integer index)
        if shape:GetType() = shape:CIRCLE
            Circle circle = cast(Circle, shape)
            vertices:Get(0):Set(circle:GetSupportVertex())
            count = 1
            radius = circle:GetRadius()
        elseif shape:GetType() = shape:POLYGON
            Polygon poly = cast(Polygon, shape)
            count = poly:GetVertexCount()
            radius = poly:GetRadius()
            integer i = 0
            repeat while i < count
                vertices:Get(i):Set(poly:GetVertex(i))
                i = i + 1
            end
        end
    end


    /*
    This action finds a vertex index on the shape that is the best candidate for
    a vector that is in the direction of "Vector2 direction" or almost in 
    the direction of "Vector2 direction."
    To do this, this action takes the dot product of the vertex and the
    "Vector2 direction" such that the candidate has to have a positive dot
    product and has the highest value for the dot product.
    */
    action GetSupport(Vector2 direction) returns integer
        integer bestIndex = 0
        number bestValue = vertices:Get(0):DotProduct(direction)
        integer i = 1
        repeat while i < count
            number value = vertices:Get(i):DotProduct(direction)
            if value > bestValue
                bestIndex = i
                bestValue = value
            end
            i = i + 1
        end
        return bestIndex
    end

    /*
    This action finds a vertex on the shape that is the best candidate for
    a vector that is in the direction of "Vector2 direction" or almost in 
    the direction of "Vector2 direction."
    To do this, this action takes the dot product of the vertex and the
    "Vector2 direction" such that the candidate has to have a positive dot
    product and has the highest value for the dot product.
    */
    action GetSupportVertex(Vector2 direction) returns Vector2
        integer bestIndex = 0
        number bestValue = vertices:Get(0):DotProduct(direction)
        integer i = 1
        repeat while i < count
            number value = vertices:Get(i):DotProduct(direction)
            if value > bestValue
                bestIndex = i
                bestValue = value
            end
            i = i + 1
        end
        return vertices:Get(bestIndex)
    end

    /*
    This action returns how many vertices are in the shape that was used to
    create this DistanceProxy2D.
    */
    action GetVertexCount returns integer
        return count
    end

    /*
    This action returns the radius of the shape that was used to create this 
    DistanceProxy2D.
    */
    action GetRadius returns number
        return radius
    end

    /*
    This action returns the designated vertex that is in the shape that was used
    to create this DistanceProxy2D. 
    */
    action GetVertex(integer index) returns Vector2
        return vertices:Get(index)
    end
end