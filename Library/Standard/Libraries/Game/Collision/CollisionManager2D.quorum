use Libraries.Game.Layer2D
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Game.Collision.BroadphaseCollision2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Game.Collision.Item2DNode
use Libraries.Game.Collision.CollisionEdge2D

package Libraries.Game.Collision


/*
This class can be seen as a "manager" class that uses CollisionEvent2D class
and the BoardphaseCollision2D class to record if a collision occured, to decide
if a collision occured.
This class uses the CollisionEvent2D to record all of the collision that has 
occured during the current physics step. This class also uses the 
BroadphaseCollision2D class to determine whether a possible collision has happened.
*/
class CollisionManager2D
    BroadphaseCollision2D broadphase
    CollisionEvent2D collisionList = undefined
    integer collisionCount = 0
    Array<CollisionListener2D> listeners

    Layer2D myLayer = undefined
    
    /*
    This action sets the 2D layer at which the objects lie on.
    Attribute: Parameter layer The 2D layer at which the objects lie on.
    */
    action SetLayer(Layer2D layer)
        myLayer = layer
    end

    /*
    This action compares the two nodes in the DynamicBoundingVolumeTree2D
    to determine whether the items in the two nodes collide. If the items in the
    two nodes do collide, then the collision will be recorded inside this
    CollisionManager2D.
    Attribute: Parameter nodeA The first node.
    Attribute: Parameter nodeB The second node.
    */
    action AddPair(Item2DNode nodeA, Item2DNode nodeB)
        Item2D itemA = nodeA:GetItem()
        Item2D itemB = nodeB:GetItem()

        integer indexA = nodeA:GetChildIndex()
        integer indexB = nodeB:GetChildIndex()

        if itemA = itemB
            return now
        end

        CollisionEdge2D edge = itemB:GetCollisionList()
        repeat while edge not= undefined
            if edge:GetOther() = itemA
                Item2D iA = edge:GetCollision():GetItemA()
                Item2D iB = edge:GetCollision():GetItemB()
                integer a = edge:GetCollision():GetChildIndexA()
                integer b = edge:GetCollision():GetChildIndexB()
                
                if iA = itemA and a = indexA and iB = itemB and b = indexB
                    return now
                end

                if iA = itemB and a = indexB and iB = itemA and b = indexA
                    return now
                end
            end

            edge = edge:GetNext()
        end

        if not itemA:ShouldCollide(itemB)
            return now
        end

        if not itemB:ShouldCollide(itemA)
            return now
        end

        // create collision event and add to collision event list
        CollisionEvent2D collision
        collision:Initialize(itemA, indexA, itemB, indexB)

        indexA = collision:GetChildIndexA()
        indexB = collision:GetChildIndexB()
        itemA = collision:GetItemA()
        itemB = collision:GetItemB()
        
        collision:SetPrevious(undefined)
        collision:SetNext(collisionList)
        if collisionList not= undefined
            collisionList:SetPrevious(collision)
        end
        collisionList = collision

        // connect collision to itemA
        collision:GetNodeA():SetCollision(collision)
        collision:GetNodeA():SetOther(itemB)

        collision:GetNodeA():SetPrevious(undefined)
        collision:GetNodeA():SetNext(itemA:GetCollisionList())
        if itemA:GetCollisionList() not= undefined
            itemA:GetCollisionList():SetPrevious(collision:GetNodeA())
        end
        itemA:SetCollisionList(collision:GetNodeA())

        // connect collision to itemB
        collision:GetNodeB():SetCollision(collision)
        collision:GetNodeB():SetOther(itemA)

        collision:GetNodeB():SetPrevious(undefined)
        collision:GetNodeB():SetNext(itemB:GetCollisionList())
        if itemB:GetCollisionList() not= undefined
            itemB:GetCollisionList():SetPrevious(collision:GetNodeB())
        end
        itemB:SetCollisionList(collision:GetNodeB())

        collisionCount = collisionCount + 1
    end

    /*
    This action uses the broadphase linked to this CollisionManager2D to test
    if two nodes are colliding.
    */
    action FindNewCollisions
        broadphase:UpdatePairs(me)
    end

    /*
    This action tests deletes a CollisionEvent2D in a doubly linked list of
    CollisionEvent2D. 
    Attribute: Parameter collision The CollisionEvent2D to be deleted.
    */
    action Destroy(CollisionEvent2D collision)
        Item2D itemA = collision:GetItemA()
        Item2D itemB = collision:GetItemB()

        if collision:IsTouching()
            integer i = 0
            repeat while i < listeners:GetSize()
                CollisionListener2D listener = listeners:Get(i)
                listener:FinishCollision(collision)
                i = i + 1
            end
        end

        if collision:GetPrevious() not= undefined
            collision:GetPrevious():SetNext(collision:GetNext())
        end

        if collision:GetNext() not= undefined
            collision:GetNext():SetPrevious(collision:GetPrevious())
        end

        if collision = collisionList
            collisionList = collision:GetNext()
        end

        // remove collision from itemA
        if collision:GetNodeA():GetPrevious() not= undefined
            collision:GetNodeA():GetPrevious():SetNext(collision:GetNodeA():GetNext())
        end

        if collision:GetNodeA():GetNext() not= undefined
            collision:GetNodeA():GetNext():SetPrevious(collision:GetNodeA():GetPrevious())
        end

        if collision:GetNodeA() = itemA:GetCollisionList()
            itemA:SetCollisionList(collision:GetNodeA():GetNext())
        end

        // remove collision from itemB
        if collision:GetNodeB():GetPrevious() not= undefined
            collision:GetNodeB():GetPrevious():SetNext(collision:GetNodeB():GetNext())
        end

        if collision:GetNodeB():GetNext() not= undefined
            collision:GetNodeB():GetNext():SetPrevious(collision:GetNodeB():GetPrevious())
        end

        if collision:GetNodeB() = itemB:GetCollisionList()
            itemB:SetCollisionList(collision:GetNodeB():GetNext())
        end

        collisionCount = collisionCount - 1
    end

    /*
    This action resolve every collision that is recorded in the CollisionEvent2D
    doubly linked list.
    */
    action Collide
        CollisionEvent2D collision = collisionList
        repeat while collision not= undefined
            boolean jump = false
            Item2D itemA = collision:GetItemA()
            Item2D itemB = collision:GetItemB()
            integer indexA = collision:GetChildIndexA()
            integer indexB = collision:GetChildIndexB()

            if not itemA:IsCollidable() or not itemB:IsCollidable()
                CollisionEvent2D cNuke = collision
                collision = cNuke:GetNext()
                Destroy(cNuke)
                jump = true
            end

            // collision filtering
            // this involves, for example, ignoring collisions where both items
            // are declared as static bodies
            // should we allow user-defined collision filtering?

            if not jump
                if not itemA:ShouldCollide(itemB)
                    CollisionEvent2D cNuke = collision
                    collision = cNuke:GetNext()
                    Destroy(cNuke)
                    jump = true
                end
            end

            if not jump
                if not itemB:ShouldCollide(itemA)
                    CollisionEvent2D cNuke = collision
                    collision = cNuke:GetNext()
                    Destroy(cNuke)
                    jump = true
                end
            end

            if not jump
                if itemA:IsPhysicsEnabled() and itemB:IsPhysicsEnabled()
                    boolean activeA = itemA:IsSimulated() and not itemA:IsUnmovable()
                    boolean activeB = itemB:IsSimulated() and not itemB:IsUnmovable()

                    if not activeA and not activeB
                        collision = collision:GetNext()
                        jump = true
                    end
                end
            end

            if not jump
                integer nodeIDA = itemA:GetNodes():Get(indexA):GetNodeID()
                integer nodeIDB = itemB:GetNodes():Get(indexB):GetNodeID()

                boolean overlap = broadphase:TestOverlap(nodeIDA, nodeIDB)

                if not overlap
                    CollisionEvent2D cNuke = collision
                    collision = cNuke:GetNext()
                    Destroy(cNuke)
                else
                    collision:DispatchCollision(listeners)
                    collision = collision:GetNext()
                end
            end
        end
    end

    /*
    This action returns the BroadphaseCollison2D that is used to solve a collision.

    Attribute: Returns The BroadphaseCollision2D that is used to solve a collision.

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.CollisionManager2D

        BroadphaseCollision2D broadphase
        CollisionManager2D collision

        broadphase = collision:GetBroadphase()
    */
    action GetBroadphase returns BroadphaseCollision2D
        return broadphase
    end

    /*
    This action returns the first event in the doubly linked list of 
    CollisionEvent2D.
    Attribute: Returns the first event in the doubly linked list of 
    CollisionEvent2D.
    */
    action GetCollisionList returns CollisionEvent2D
        return collisionList
    end

    /*
    This class returns how many CollisionEvent2D are available in this 
    CollisionManager2D.
    Attribute: Returns how many CollisionEvent2D are available in this 
    CollisionManager2D.
    */
    action GetCollisionCount returns integer
        return collisionCount
    end

    /*
    This action adds a CollisionListener2D to the current CollisionManager2D.
    Attribute: Parameter listener The CollisionListener2D to be added to the current CollisionManager2D.
    */
    action AddCollisionListener(CollisionListener2D listener)
        listeners:Add(listener)
    end

    /*
    This action removes a CollisionListener2D from the current CollisionManager2D.
    Attribute: Parameter listener The CollisionListener2D to be removed from the current CollisionManager2D.
    */
    action RemoveCollisionListener(CollisionListener2D listener)
        listeners:Remove(listener)
    end

    /*
    This action returns all of the CollisionListen2D that is attached to the
    current CollisionManager2D through an array.
    Attribute: Returns all of the CollisionListen2D that is attached to the
    current CollisionManager2D through an array.
    */
    action GetCollisionListeners returns Array<CollisionListener2D>
        return listeners
    end
end