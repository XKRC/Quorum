use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Interface.Item3D
use Libraries.Compute.Vector3
use Libraries.Game.Collision.DynamicBoundingVolumeTree3D
use Libraries.Game.Collision.CollisionPair
use Libraries.Game.BoundingBox
use Libraries.Game.Collision.Item3DNode
use Libraries.Game.Collision.CollisionManager3D

package Libraries.Game.Collision

/*
BroadphaseCollision3D uses the DynamicBoundingVolumeTree3D to compute the pairs 
of two objects that are colliding. Only objects that are collideable are 
compared to see if they collide. This class is used by CollisionManager3D.
*/

class BroadphaseCollision3D 
    /*
    One tree for one broadphase calculation.
    */
    DynamicBoundingVolumeTree3D tree
    integer nodeCount = 0
    
    Array<integer> moveList

    integer moveCount = 0

    Array<CollisionPair> pairList

    integer pairCount = 0

    integer queryNodeID = -1

    /*
    This action adds the BoundingBox and Item3DNode passed in to the "tree" as a
    node to that "tree" in this BoardphaseCollision3D class. The newly added node
    will be assigned an integer identification number.

    Attribute: Parameter boundingBox The BoundingBox of the item to be inserted into the tree.

    Attribute: Parameter item The ItemNode3D of the item being inserted into the tree. 

    Attribute: Returns The integer id of the new tree node
    */
    action CreateNode(BoundingBox boundingBox, Item3DNode item) returns integer
        integer id = tree:CreateNode(boundingBox, item)
        nodeCount = nodeCount + 1
        BufferMove(id)
        return id
    end

    /*
    This action removes the node from the "tree" in this BoardphaseCollision3D
    class with the id passed in.

    Attribute: Parameter id The integer id number for the node which is to be removed
    */
    action DestroyNode(integer id)
        UnbufferMove(id)
        nodeCount = nodeCount - 1
        tree:DestroyNode(id)
    end

    /*
    This action moves the Item3D that is contained in the tree node with the
    given "id" by the given "displacement" vector. If the Item3D moves outside of
    its existing bounding box, then the 3D object is removed from the tree, then a
    new bounding box will be calculated for that 3D object, and the 3D object is
    reinserted into the tree. Otherwise, the node wil stay at where it is in the
    tree.

    Attribute: Parameter id The id of the node that is to be moved.
    
    Attribute: Parameter boundingBox The boundingBox of the node to be moved.
    
    Attribute: Parameter displacement The displacement of the 3D object.
    */
    action MoveNode(integer id, BoundingBox boundingBox, Vector3 displacement)
        boolean buffer = tree:MoveNode(id, boundingBox, displacement)
        if buffer
            BufferMove(id)
        end
    end

    /*
    This action adds the node with the given id to the move list (the list of
    3D objects that needs to be moved because the objects' displacements changed).
    We call this process as "touching the node."

    Attribute: Parameter nodeID The id of the node to be touched. 
    */
    action TouchNode(integer nodeID)
        BufferMove(nodeID)
    end

    /*
    This action returns the Item3DNode contained in the tree node with the given ID
    This is an internal action.

    Attribute: Parameter id The integer id of the tree node containing the Item3DNode to be returned
    
    Attribute: Returns The specified Item3DNode
    */
    action GetItemNode(integer id) returns Item3DNode
        return tree:GetItemNode(id)
    end

    /*
    This action returns the bounding box contained in the tree node with the
    given ID. Note that this bounding box is slightly larger than the bounding
    box of the item contained in this node.
    
    Attribute: Parameter id The integer id of the tree node containing the BoundingBox3D to be returned

    Attribute: Returns the specified BoundingBox3D
    */
    action GetBoundingBox(integer id) returns BoundingBox
        return tree:GetBoundingBox(id)
    end

    /*
    This action checks to see if the bounding boxes of two nodes overlap. 
    This action is used internally.

    Attribute: Parameter idA The integer id of one of the nodes to be checked.
    
    Attribute: Parameter idB The integer id of the other node to be checked.

    Attribute: Returns a boolean value that indicates whether the two nodes overlap.
    */
    action TestOverlap(integer idA, integer idB) returns boolean
        BoundingBox a = tree:GetBoundingBox(idA)
        BoundingBox b = tree:GetBoundingBox(idB)

        if b:GetMinimum():GetX() - a:GetMaximum():GetX() > 0 or b:GetMinimum():GetY() - a:GetMaximum():GetY() > 0 or b:GetMinimum():GetZ() - a:GetMaximum():GetZ() > 0
            return false
        end

        if a:GetMinimum():GetX() - b:GetMaximum():GetX() > 0 or a:GetMinimum():GetY() - b:GetMaximum():GetY() > 0 or a:GetMinimum():GetZ() - b:GetMaximum():GetZ() > 0
            return false
        end

        return true
    end

    /*
    This action returns the number of nodes in the dynamic bounding volume tree.
    This action is used internally.
        
    Attribute: Returns The number of nodes in the tree.
    */
    action GetNodeCount returns integer
        return nodeCount
    end

    /*
    This action returns number of nodes in the DynamicBoundingVolumeTree3D
    tree.
    Attribute: Returns the number of nodes in the DynamicBoundingVolumeTree3D
    tree.
    */
    action CountNodes returns integer
        return tree:CountNodes()
    end

    /*
    This action updates the list of collideable pairs from the tree. 
    This action is used internally

    Attribute: Parameter collision The CollisionManager3D containing the relevant 
    collision information.
    */
    action UpdatePairs(CollisionManager3D collision)
        pairCount = 0
        pairList:Empty()

        integer i = 0
        repeat while i < moveCount
            queryNodeID = moveList:Get(i)
            if queryNodeID not= -1
                BoundingBox boundingBox = tree:GetBoundingBox(queryNodeID)
                tree:Query(me, boundingBox)
            end
            i = i + 1
        end

        moveCount = 0
        moveList:Empty()

        pairList:Sort()
        i = 0
        repeat while i < pairCount
            CollisionPair primaryPair = pairList:Get(i)
            Item3DNode dataA = tree:GetItemNode(primaryPair:GetIDA())
            Item3DNode dataB = tree:GetItemNode(primaryPair:GetIDB())

            collision:AddPair(dataA, dataB)
            i = i + 1
            
            boolean continue = true
            repeat while i < pairCount and continue
                CollisionPair otherPair = pairList:Get(i)
                if otherPair:GetIDA() not= primaryPair:GetIDA() or otherPair:GetIDB() not= primaryPair:GetIDB()
                    continue = false
                else
                    i = i + 1
                end
            end
        end
    end

    /*
    This action finds whether if any bounding boxes in the tree overlaps with the
    bounding box that is passed in.
    
    Attribute: Parameter broadphase The BroadphaseCollision2D which contains the tree
    to check the BoundingBox2D against

    Attribute: Parameter boundingBox The BoundingBox2D we are checking for overlap with
    */
    action Query(BroadphaseCollision3D broadphase, BoundingBox boundingBox)
        tree:Query(broadphase, boundingBox)
    end
    
    /*
    This action returns the height of the tree.
    
    Attribute: Returns the height of the tree
    */
    action GetTreeHeight returns integer
        return tree:GetHeight()
    end

    /*
    This action computes the maximum balance of the tree. The maximum balance
    is the maximum difference of the heights of the two children of any node.
    
    Attributes: Returns the maximum balance of the tree.
    */
    action GetTreeBalance returns integer
        return tree:GetMaximumBalance()
    end
    
    /*
    This action computes the quality of the tree (the ratio of the sum of the 
    node perimeters to the root perimeter).

    Attribute: Returns the perimeter ratio of the tree
    */
    action GetTreeQuality returns number
        return tree:GetPerimeterRatio()
    end

    /*
    This action adds the node with the id of "integer id" to a list of nodes
    that should be moved with a certain displacement.
    Attribute: Parameter id Identifier for a node.
    */
    private action BufferMove(integer id)
        moveList:Add(id)
        moveCount = moveCount + 1
    end

    /*
    This action gets ride of the node with the id of "integer id" from a list of nodes
    that should be moved with a certain displacement.
    Attribute: Parameter id Identifier for a node.
    */
    private action UnbufferMove(integer id)
        integer i = 0
        repeat while i < moveCount
            if moveList:Get(i) = id
                moveList:Set(i, -1)
            end
            i = i + 1
        end
    end

    /*
    This action adds the given node to the pair list with the query node, if the
    given node is not the query node. 
    This action is used internally.     
    
    Attribute: Parameter id The integer id of the node to be paired

    Attribute: Returns whether the should proceed (always true)
    */
    action ShouldProceed(integer id) returns boolean
        if id = queryNodeID
            return true
        end
        
        CollisionPair pair
        
        if id < queryNodeID
            pair:SetIDA(id)
            pair:SetIDB(queryNodeID)
        else
            pair:SetIDA(queryNodeID)
            pair:SetIDB(id)
        end

        pairList:Add(pair)

        pairCount = pairCount + 1
        return true
    end
end