use Libraries.Compute.Vector2
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Matrix4

package Libraries.Game.Collision

/*
This class represents a 2D box that bounds an 2D item. The box approximates
the size of the 2D items.
The box is defined by two Vector2 objects which represent the maximum and 
minimum points of the item. 
This class is used throughout the Collision libraries to monitor collisions.
The box is not allowed to rotate, therefore, we call these boxes "axis-aligned 
bounding boxes".

Attribute: Example

use Libraries.Game.Collision.BoundingBox2D
use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The center of the bounding box is (" + boundingBox:GetCenterX() 
            + ", " + boundingBox:GetCenterY() + ") "
*/
class BoundingBox2D 
    /*
    calcVector and math are objects used for internal calculations.
    */
    Vector2 calcVector
    Math math

    /*
    minimum represents the minimum point (bottom left vertex) of the bounding box relative to the global coordinates
    */
    Vector2 minimum
    /*
    maximum represents the maximum point (top right vertex) of the bounding box relative to the global coordinates
    */
    Vector2 maximum

    /*
    center represents the center point of the bounding box
    */
    Vector2 center
    /*
    The X value of dimensions represents the width of the bounding box
    The Y value of dimensions represents the height of the bounding box.
    */
    Vector2 dimensions
    
    /*
    GetCenter will return a Vector2 object containing the point at the center
    of the BoundingBox2D.

    Attribute: Returns the center point of the BoundingBox2D as a Vector2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)
    Vector2 center = boundingBox:GetCenter()

    output "The center of the bounding box is (" + center:GetX() 
            + ", " + center:GetY() + ") "
    */ 
    action GetCenter returns Vector2
        Vector2 new
        new:Set(center)
        return new
    end

    /*
    GetCenterX will return the X coordinate of the center of the BoundingBox2D.

    Attribute: Returns the X coordinate of the center point of the BoundingBox2D.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The center of the bounding box is (" + boundingBox:GetCenterX() 
            + ", " + boundingBox:GetCenterY() + ") "
    */    
    action GetCenterX returns number
        return center:GetX()
    end

    /*
    GetCenterY will return the Y coordinate of the center of the BoundingBox2D.

    Attribute: Returns the Y coordinate of the center point of the BoundingBox2D.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The center of the bounding box is (" + boundingBox:GetCenterX() 
            + ", " + boundingBox:GetCenterY() + ") "
    */    
    action GetCenterY returns number
        return center:GetY()
    end

    /*
    GetDimensions will return the width and height of the BoundingBox2D stored within a 
    Vector2 object.

    Attribute: Returns the width and height of the BoundingBox2D stored as the X 
    and Y coordinates of the Vector2 object, respectively.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)
    Vector2 dimensions = boundingBox:GetDimensions()

    output "The bounding box is " + dimensions:GetX() 
            + " wide by " + dimensions:GetY() + " tall. "
    */
    action GetDimensions returns Vector2
        Vector2 new
        new:Set(dimensions)
        return new
    end

    /*
    This action re-calculates the center and the dimensions of the BoundingBox2D.
    This action is used internally. Note that center and dimensions are calculated when 
    minimum and maximum are set. 
    */
    action CalculateDimensions
        center:Set(minimum)
        center:Add(maximum)
        center:Scale(0.5)   //the center is calculated using the mid-point formula between two points

        dimensions:Set(maximum)
        dimensions:Subtract(minimum)
    end

    /*
    GetWidth will return the width of the BoundingBox2D.

    Attribute: Returns the width of the BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The bounding box is " + boundingBox:GetWidth() 
            + " wide by " + boundingBox:GetHeight() + " tall. "
    */
    action GetWidth returns number
        return dimensions:GetX()
    end

    /*
    GetHeight will return the height of the BoundingBox2D.

    Attribute: Returns the height of the BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The bounding box is " + boundingBox:GetWidth() 
            + " wide by " + boundingBox:GetHeight() + " tall. "
    */
    action GetHeight returns number
        return dimensions:GetY()
    end

    /*
    GetMinimum will return the "minimum" point of the BoundingBox2D. This is
    specifically the point of the BoundingBox2D with the lowest X and Y
    values. The point will be returned as a Vector2.

    Attribute: Returns the minimum point of the BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The minimum of the bounding box is (" + boundingBox:GetMinimum():GetX() 
            + ", " + boundingBox:GetMinimum():GetY() + ")"
    */
    action GetMinimum returns Vector2
        return minimum
    end

    /*
    GetMaximum will return the "maximum" point of the BoundingBox2D. This is
    specifically the point of the BoundingBox2D with the highest X and Y
    values. The point will be returned as a Vector2.

    Attribute: Returns the maximum point of the BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    output "The maximum of the bounding box is (" + boundingBox:GetMaximum():GetX() 
            + ", " + boundingBox:GetMaximum():GetY() + ")"
    */
    action GetMaximum returns Vector2
        return maximum
    end

    /*
    The Copy action will return a new BoundingBox2D with the same bounds as this
    BoundingBox2D.

    Attribute: Returns an equivalent bounding box

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    BoundingBox2D copy 
    copy:Set(boundingBox:Copy())
    */
    action Copy returns BoundingBox2D
        BoundingBox2D temp
        temp:Set(me)
        return temp
    end

    /*
    When provided with a BoundingBox2D as a parameter, the Set action will set the
    BoundingBox2D to match the bounds of the parameter.

    Attribute: Parameter bounds The BoundingBox2D to set this bounding box equivalent to

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)

    BoundingBox2D copy 
    copy:Set(boundingBox:Copy())
    */
    action Set(BoundingBox2D bounds)
        Set(bounds:GetMinimum(), bounds:GetMaximum())
    end

    /*
    The Set action can be provided with a pair of vectors to set the bounds of
    this BoundingBox2D. The first vector should represent the "minimum" point of
    the bounds, or the point with the lowest X and Y values. The second
    vector should represent the "maximum" point of the bounds, or the point with
    the highest X and Y values. This action will also calculate the center and 
    dimensions of the BoundingBox2D given the maximum and minimum points. 

    Attribute: Parameter min The Vector2D representing the minimum point of the bounds
    
    Attribute: Parameter max The Vector2D representing the maximum point of the bounds

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)

    boundingBox:Set(minimum, maximum)
    */
    action Set(Vector2 min, Vector2 max)
        number minX = min:GetX()
        number minY = min:GetY()

        number maxX = max:GetX()
        number maxY = max:GetY()

        if maxX < minX
            minX = maxX
            maxX = min:GetX()
        end

        if maxY < minY
            minY = maxY
            maxY = min:GetY()
        end

        minimum:Set(minX, minY)
        maximum:Set(maxX, maxY)

        center:Set(minimum)
        center:Add(maximum)
        center:Scale(0.5)

        dimensions:Set(maximum)
        dimensions:Subtract(minimum)
    end

    /*
    This action will set the BoundingBox2D to the minimum possible size that 
    contains all of the points in the given array.

    Attribute: Parameter points The array of points to be contained in the 
    BoundingBox2D.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 point1   //the minimum point of the boundingBox
    Vector2 point2   //the maximum point of the boundingBox
    Vector2 outlier  //the outlier in addition to the original boundingBox
    point1:Set(-1, -1)
    point2:Set(1, 1)
    outlier:Set(5, 2)

    Array<Vector2> points
    //you would want to include the minimum and the maximum points of the 
    //original bounding box if you want to add an extra outlier 
    //(another way to do this is to use the Extend(Vector2 point) action)

    //but if you just want to bound a series of points, you just have to insert 
    //the points that you want the box to bound 
    
    points:Add(point1)
    points:Add(point2)
    points:Add(outlier)

    boundingBox:Set(points)

    output "The box, including the outlier, is centered at (" + boundingBox:GetCenterX() 
            + ", " + boundingBox:GetCenterY() + ") with a width of " 
            +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Set(Array<Vector2> points)
        Invalidate()   //destroys the oritinal boundingBox
        
        integer counter = 0
        repeat points:GetSize() times
            Extend(points:Get(counter))  //let the bounding box include the point at points:Get(counter)
            counter = counter + 1
        end
    end

    /*
    This action will invalidate the BoundingBox2D, setting its minimum values to
    positive infinity and setting its maximum values to negative infinity.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    Vector2 newMaximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()
    
    newMaximum:Set(5, 2)
    
    boundingBox:Invalidate()
    boundingBox:Extend(minimum)
    boundingBox:Extend(newMaximum)
    

    output "The box, with the new maximum, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    
    */
    action Invalidate
        number temp = 0
        temp = temp:GetPositiveInfinityValue()
        minimum:Set(temp, temp)
        temp = temp:GetNegativeInfinityValue()
        maximum:Set(temp, temp)

        center:Set(0, 0)
        dimensions:Set(0, 0)
    end

    /*
    This action will extend the BoundingBox2D to include the given point.

    Attribute: Parameter point The point that is to be included in the extended
    BoundingBox2D.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    Vector2 outlier
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()
    
    outlier:Set(5, 2)
    boundingBox:Extend(outlier)

    output "The box, including the outlier, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Extend(Vector2 point)

        number tempX = minimum:GetX()
        number tempY = minimum:GetY()

        if point:GetX() < tempX
            tempX = point:GetX()
        end

        if point:GetY() < tempY
            tempY = point:GetY()
        end

        minimum:Set(tempX, tempY)

        tempX = maximum:GetX()
        tempY = maximum:GetY()

        if point:GetX() > tempX
            tempX = point:GetX()
        end

        if point:GetY() > tempY
            tempY = point:GetY()
        end

        maximum:Set(tempX, tempY)

        Set(minimum, maximum)
    end

    /*
    This action will extend the BoundingBox2D to contain the provided bounds.

    Attribute: Parameter bounds The bounding box that this bounding box is to be
    extended to include. 

    Attribute: Example
    
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    Vector2 maximum2
    Vector2 minimum2
    maximum2:Set(2, 2)
    minimum2:Set(1.5, 1.5)
    BoundingBox2D addition
    addition:Set(minimum2, maximum2)

    boundingBox:Extend(addition)
     
    output "The box, with the additional bounds, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Extend(BoundingBox2D bounds)
        Extend(bounds:GetMinimum())
        Extend(bounds:GetMaximum())
    end

    /*
    This action will extend the BoundingBox2D to contain a circle denoted by a
    center point and a radius.

    Attribute: Parameter center The center point of the circle to be included in
    the extended BoundingBox2D

    Attribute: Parameter radius the radius of the circle to be included in the 
    extended BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    Vector2 circleCenter
    circleCenter:Set(1, 1)
    number radius = 1.5

    boundingBox:Extend(circleCenter, radius)
     
    output "The box, now also containing the circle, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Extend(Vector2 center, number radius)

        number tempX = minimum:GetX()
        number tempY = minimum:GetY()

        if (center:GetX() - radius) < tempX
            tempX = center:GetX() - radius
        end

        if (center:GetY() - radius) < tempY
            tempY = center:GetY() - radius
        end

        minimum:Set(tempX, tempY)

        tempX = maximum:GetX()
        tempY = maximum:GetY()

        if (center:GetX() + radius) > tempX
            tempX = center:GetX() + radius
        end
        
        if (center:GetY() + radius) > tempY
            tempY = center:GetY() + radius
        end

        maximum:Set(tempX, tempY)

        Set(minimum, maximum)
    end

    /*
    This action will extend the BoundingBox2D to contain the point at the given
    X and Y coordinates.

    Attribute: Parameter x The x value of the point to be included
    
    Attribute: Parameter y The y value of the point to be included

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum

    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()
    
    number outlierX = 5
    number outlierY = 2
    boundingBox:Extend(outlierX, outlierY)

    output "The box, including the outlier, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Extend(number x, number y)
        number tempX = minimum:GetX()
        number tempY = minimum:GetY()

        if x < tempX
            tempX = x
        end

        if y < tempY
            tempY = y
        end

        minimum:Set(tempX, tempY)

        tempX = maximum:GetX()
        tempY = maximum:GetY()
        
        if x > tempX
            tempX = x
        end

        if y > tempY
            tempY = y
        end

        maximum:Set(tempX, tempY)

        Set(minimum, maximum)
    end

    /*
    This action will clear out the values of the BoundingBox2D, resetting all of
    its values to zero.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum

    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()
    
    boundingBox:Clear()
    
    output "After clearing, the box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()
    */
    action Clear
        minimum:Set(0, 0)
        maximum:Set(0, 0)
        Set(minimum, maximum)
    end

    /*
    This action will return whether or not the BoundingBox2D defines a real,
    2-dimensional area. This requires all of the values of the "minimum" point
    to be less than the values of the "maximum" point.

    Attribute: Returns whether the bounding box is valid. 

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum

    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    if boundingBox:IsValid()
        output "The box is valid"
    else 
        output "The box is invalid"
    end

    output "Invalidating..."
    boundingBox:Invalidate()
    
    if boundingBox:IsValid()
        output "The box is valid"
    else 
        output "The box is invalid"
    end    
    */
    action IsValid returns boolean
        return minimum:GetX() < maximum:GetX() and minimum:GetY() < maximum:GetY()
    end

    /*
    This action will test to see if this BoundingBox2D totally contains a given
    BoundingBox. If any part of the given BoundingBox2D is outside this one, it
    will return false.

    Attribute: Parameter bounds The bounding box to be checked against this 
    bounding box. 

    Attribute: Returns whether the given bounding box is completely contained in
    this bounding box.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    BoundingBox2D addition
    Vector2 minimum2
    Vector2 maximum2
    minimum:Set(2, 2)
    maximum:Set(1.5, 1.5)
    addition:Set(minimum, maximum)

    if not boundingBox:Contains(addition)
        boundingBox:Extend(addition)
    end
     
    output "The box, with the addition, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Contains(BoundingBox2D bounds) returns boolean
        if not IsValid()   //check if there is a bounding box first
            return false
        end

        Vector2 min = bounds:GetMinimum()
        Vector2 max = bounds:GetMaximum()

        return minimum:GetX() <= min:GetX() and minimum:GetY() <= min:GetY()
            and maximum:GetX() >= max:GetX() and maximum:GetX() >= max:GetY()
    end

    /*
    This action will test to see if the point indicated by the given Vector2 is
    contained inside this BoundingBox2D.

    Attribute: Parameter point The point to check for within the bounds of this 
    BoundingBox2D

    Attribute: Returns whether the point is contained in this BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    Vector2 outlier
    outlier:Set(5,2)

    if not boundingBox:Contains(outlier)
        boundingBox:Extend(outlier)
    end
     
    output "The box, with the outlier, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Contains(Vector2 point) returns boolean
        if not IsValid()
            return false
        end

        return minimum:GetX() <= point:GetX() and minimum:GetY() <= point:GetY()
            and maximum:GetX() >= point:GetX() and maximum:GetY() >= point:GetY()
    end

    /*
    This action will test to see if this BoundingBox2D intersects with the given
    BoundingBox2D.

    Attribute: Parameter bounds The bounding box to be checked for intersection 
    against this bounding box. 

    Attribute: Returns whether the given bounding box intersects this bounding box.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    BoundingBox2D addition
    Vector2 minimum2
    Vector2 maximum2
    minimum:Set(2, 2)
    maximum:Set(0.9, 0.9)
    addition:Set(minimum, maximum)

    if boundingBox:Intersects(addition)
        boundingBox:Extend(addition)
    end
     
    output "The box, with the addition, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()
    */
    action Intersects(BoundingBox2D bounds) returns boolean
        if not IsValid()
            return false
        end

        // This is tested using the Separating Axis Theorem.

        number lx = math:AbsoluteValue(center:GetX() - bounds:GetCenter():GetX())
        number sumx = (dimensions:GetX() / 2) + (bounds:GetDimensions():GetX() / 2)

        number ly = math:AbsoluteValue(center:GetY() - bounds:GetCenter():GetY())
        number sumy = (dimensions:GetY() / 2) + (bounds:GetDimensions():GetY() / 2)
        
        //if the distance between the centers (in both x and y directions) 
        //are less than their combined mid-lengths, then they will be intersecting
        return lx <= sumx and ly <= sumy
    end

    /*
    This action returns the perimeter of the BoundingBox2D.

    Attribute: Returns the perimeter of this BoundingBox2D

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box has perimeter " + boundingBox:GetPerimeter()
    */
    action GetPerimeter returns number
        return 2.0 * (maximum:GetX() - minimum:GetX() + maximum:GetY() - minimum:GetY())
    end

    /*
    This action tests for overlap between the given BoundingBox2D and this BoundingBox2D

    Attribute: Parameter boundingBox The bounding box to be checked for overlap 
    with this bounding box. 

    Attribute: Returns whether the given bounding box overlaps with this bounding box.

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    BoundingBox2D addition
    Vector2 minimum2
    Vector2 maximum2
    minimum:Set(2, 2)
    maximum:Set(0.9, 0.9)
    addition:Set(minimum, maximum)

    if boundingBox:TestOverlap(addition)
        boundingBox:Extend(addition)
    end
     
    output "The box, with the addition, is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and a height of " + boundingBox:GetHeight()    
    */
    action TestOverlap(BoundingBox2D boundingBox) returns boolean
        if boundingBox:GetMinimum():GetX() - maximum:GetX() > 0 or boundingBox:GetMinimum():GetY() - maximum:GetY() > 0
            return false
        end

        if minimum:GetX() - boundingBox:GetMaximum():GetX() > 0 or minimum:GetY() - boundingBox:GetMaximum():GetY() > 0
            return false
        end

        return true
    end

    /*
    This action combines two given boundingBox to create the bounds of this BoundingBox2D. 
    CalculateDimensions() should be called after this action to get center, width, and height.

    Attribute: Parameter box1 The first box to be combined
    
    Attribute: Parameter box2 The second box to be combined

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Compute.Vector2
    use Libraries.Containers.Array

    BoundingBox2D boundingBox
    Vector2 minimum
    Vector2 maximum
    minimum:Set(-1, -1)
    maximum:Set(1, 1)
    boundingBox:Set(minimum, maximum)

    output "The box is centered at (" + boundingBox:GetCenterX() 
        + ", " + boundingBox:GetCenterY() + ") with a width of " 
        +  boundingBox:GetWidth() + " and an height of " + boundingBox:GetHeight()

    BoundingBox2D addition
    Vector2 minimum2
    Vector2 maximum2
    minimum:Set(2, 2)
    maximum:Set(0.9, 0.9)
    addition:Set(minimum, maximum)

    output "The second box is centered at (" + addition:GetCenterX() 
        + ", " + addition:GetCenterY() + ") with a width of " 
        +  addition:GetWidth() + " and a height of " + addition:GetHeight()

    BoundingBox2D result
    result:Combine(boundingBox, addition)
    result:CalculateDimensions()

    output "The box, resulting from the combination, is centered at (" + result:GetCenterX() 
        + ", " + result:GetCenterY() + ") with a width of " 
        +  result:GetWidth() + " and a height of " + result:GetHeight()
    */
    action Combine(BoundingBox2D box1, BoundingBox2D box2)
        if box1:GetMinimum():GetX() < box2:GetMinimum():GetX()
            minimum:SetX(box1:GetMinimum():GetX())
        else
            minimum:SetX(box2:GetMinimum():GetX())
        end

        if box1:GetMinimum():GetY() < box2:GetMinimum():GetY()
            minimum:SetY(box1:GetMinimum():GetY())
        else
            minimum:SetY(box2:GetMinimum():GetY())
        end

        if box1:GetMaximum():GetX() > box2:GetMaximum():GetX()
            maximum:SetX(box1:GetMaximum():GetX())
        else
            maximum:SetX(box2:GetMaximum():GetX())
        end

        if box1:GetMaximum():GetY() > box2:GetMaximum():GetY()
            maximum:SetY(box1:GetMaximum():GetY())
        else
            maximum:SetY(box2:GetMaximum():GetY())
        end
    end
end