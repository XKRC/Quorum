use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Game.Collision.CollisionPoint2D

package Libraries.Game.Collision


/*
This class records the all of the local collision points during one collision
using the array called "points," from the perspective of one of the 2D object 
that is involved in the collision. This 2D object will be called as a reference 
object (because all of the local collision points are recorded from the 
perspective of that 2D object).
Collision points will be evaluated when a CollisionEvent2D occurs, where the 
CollisionEvent2D uses the narrow phase evaluation to calculate where the
collision points that are relative to the reference object (defined above).
This class is also known as manifolds.
This class is used by GlobalCollisionPoints2D.
*/
class LocalCollisionPoints2D
    public constant integer MAX_COLLISION_POINTS = 2

    public constant integer CIRCLES = 0 //when two circles collide, both 2D objects are going to be circles
                                        //the reference object will be selected as circleA
    public constant integer FACE_A = 1  //when circle collide with polygon -OR- polygon collide with polygon
                                        //the "type" of the LocalCollisionPoints2D is selected as FACE_A when A is the reference polygon
                                        //in a circle-polygon collision, the polygon will be selected as the reference object
                                        
    public constant integer FACE_B = 2  //when polygon collides with polygon
                                        //the "type" of the LocalCollisionPoints2D is selected as FACE_B when B is the reference polygon

    /*
    This records all of the local collision points from the point of view of the 
    reference object that is involved in the collision. The amount of items in 
    this array tells you whether the contact is a line (2 CollisionPoint2D) or
    just a point (1 CollisionPoint2D object in the array).
    */
    Array<CollisionPoint2D> points

    /*
    This is the actual direction (with respect to the reference object) at which
    you should apply the normal impulse to the objects to separate the objects.
    In the case where the reference object is a circle (circleA), localNormal
    can't be used.
    In the case where the reference object is a polygon, localNormal would be
    the direction of normal impulse in reference to that polygon pointing away
    from the polygon.
    */
    Vector2 localNormal
    
    /*
    This is used to reduce the collision that caused 2 CollisionPoint2Ds into
    one local point (with respect to the reference object) as the estimated 
    point of contact.
    In the case where the reference object is a circle, this would be the local
    center of circleA.
    In the case where the reference object is a polygon, this would be the local
    center of that polygon.
    */
    Vector2 localPoint

    /*
    This is the number of CollisionPoint2D objects that is inside the array
    named "points." 1 indicates that the collision caused a point contact, and
    2 indicates that the collision caused a line contact.
    */
    integer pointCount = 0

    integer type = 1

    on create
        points:SetMaxSize(MAX_COLLISION_POINTS)
        repeat MAX_COLLISION_POINTS times
            CollisionPoint2D point
            points:Add(point)
        end
    end

    /*
    This action sets the current LocalCollisionPoints2D with another LocalCollisionPoints2D.
    Attribute: Parameter other The other LocalCollisionPoints2D to copy from.
    */
    action Set(LocalCollisionPoints2D other)
        localNormal:Set(other:localNormal)
        localPoint:Set(other:localPoint)
        pointCount = other:pointCount
        type = other:type

        integer i = 0
        repeat other:pointCount times
            CollisionPoint2D new
            CollisionPoint2D old = other:points:Get(i)
            new:Set(old)
            me:points:Set(i, new)
            i = i + 1
        end
    end

    /*
    This action returns all of the collision points stored inside this LocalCollisionPoints2D from the point of view of the 
    reference object that is involved in the collision. The amount of items in 
    the returning array tells you whether the contact is a line (2 CollisionPoint2D) or
    just a point (1 CollisionPoint2D object in the array).
    Attribute: Returns all of the collision points stored inside this LocalCollisionPoints2D.
    */
    action GetPoints returns Array<CollisionPoint2D>
            return points
    end

    /*
    This action returns the actual direction (with respect to the reference object) at which
    you should apply the normal impulse to the objects to separate the objects.
    In the case where the reference object is a circle (circleA), localNormal
    can't be used.
    In the case where the reference object is a polygon, localNormal would be
    the direction of normal impulse in reference to that polygon pointing away
    from the polygon.

    Attribute: Returns the direction that you should apply the normal impulse to the objects to separate the objects.
    */
    action GetLocalNormal returns Vector2
        return localNormal
    end

    /*
    This action sets the direction that you should apply the normal impulse to the objects to separate the objects.

    Attribute: Parameter normal The direction that you should apply the normal impulse to the objects to separate the objects.
    */
    action SetLocalNormal(Vector2 normal)
        localNormal = normal
    end

    /*
    This action returns the estimated point of contact.
    In the case where the reference object is a circle, this would be the local
    center of circleA.
    In the case where the reference object is a polygon, this would be the local
    center of that polygon.
    Attribute: Returns the estimated point of contact.
    */
    action GetLocalPoint returns Vector2
        return localPoint
    end

    /*
    This action sets the estimated point of contact.
    Attribute: Parameter point The estimated point of contact.
    */
    action SetLocalPoint(Vector2 point)
        localPoint = point
    end

    /*
    This action returns how many collision points there is between two objects.
    1 indicates that the collision caused a point contact, and
    2 indicates that the collision caused a line contact.
    Attribute: Returns how many collision points there is between two objects.
    */
    action GetPointCount returns integer
        return pointCount
    end

    /*
    This action sets how many collision points there is between two objects.
    Attribute: Parameter count How many collision points there is between two objects.
    */
    action SetPointCount(integer count)
        pointCount = count
    end

    /*
    This action returns the type of the collision. 
    Here are possible types in a code box for better viewing:
    Attribute: Example
        CIRCLES = 0 //when two circles collide, both 2D objects are going to be circles
                        //the reference object will be selected as circleA
        FACE_A = 1  //when circle collide with polygon -OR- polygon collide with polygon
                        //the "type" of the LocalCollisionPoints2D is selected as FACE_A when A is the reference polygon
                        //in a circle-polygon collision, the polygon will be selected as the reference object

        FACE_B = 2  //when polygon collides with polygon
                        //the "type" of the LocalCollisionPoints2D is selected as FACE_B when B is the reference polygon
    */
    action GetType returns integer
        return type
    end

    /*
    This action sets the type of collision.
    Attribute: Parameter type The type of collision.
    */
    action SetType(integer type)
        me:type = type
    end
end