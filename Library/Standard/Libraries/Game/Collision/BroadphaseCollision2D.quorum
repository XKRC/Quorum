use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Interface.Item2D
use Libraries.Compute.Vector2
use Libraries.Game.Collision.DynamicBoundingVolumeTree2D
use Libraries.Game.Collision.CollisionPair
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Collision.Item2DNode
use Libraries.Game.Collision.CollisionManager2D

package Libraries.Game.Collision

/*
BroadphaseCollison2D computes collision pairs. Pairs are generated for collideable 
objects that may touch. This class contains a DynamicBoundingVolumeTree2D which it
uses to compute the pairs. This class is used for interactions with that tree. 
This class is used internally by CollisonManager2D.

Attribute: Example 

use Libraries.Game.Collision.BroadphaseCollision2D
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Collision.Item2DNode
use Libraries.Compute.Vector2

    BroadphaseCollision2D broadphase
    BoundingBox2D boundingBox1
    BoundingBox2D boundingBox2
    BoundingBox2D boundingBox3

    Item2DNode item1
    Item2DNode item2
    Item2DNode item3

    BoundingBox2D queryBox
    Vector2 minimum
    Vector2 maximum

    integer id1 = broadphase:CreateNode(boundingBox1, item1)
    integer id2 = broadphase:CreateNode(boundingBox2, item2)
    integer id3 = broadphase:CreateNode(boundingBox3, item3)

    minimum:Set(-1,-1)
    maximum:Set(1,1)
    queryBox:Set(minimum, maximum)

    broadphase:Query(broadphase, queryBox)
*/
class BroadphaseCollision2D 
    /*
    For one broadphase calculation, you would have only one tree to search
    through for potential collision.
    */
    DynamicBoundingVolumeTree2D tree
    integer nodeCount = 0
    
    Array<integer> moveList
    integer moveCount = 0

    Array<CollisionPair> pairList
    integer pairCount = 0

    integer queryNodeID = -1

    /*
    This action creates a new node for the Dynamic Bounding Volume Tree with the
    given BoundingBox and given Item and inserts the new node as a leaf in the 
    tree.
    This action is used internally.

    Attribute: Parameter boundingBox The BoundingBox2D of the item to be inserted into the tree.

    Attribute: Parameter item The ItemNode2D of the item being inserted into the tree. 

    Attribute: Returns The integer id of the new tree node
    
    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox

        Item2DNode item

        output "This item was added to node number " + broadphase:CreateNode(boundingBox, item)
    */
    action CreateNode(BoundingBox2D boundingBox, Item2DNode item) returns integer
        integer id = tree:CreateNode(boundingBox, item)
        nodeCount = nodeCount + 1
        BufferMove(id)
        return id
    end
    /*
    This action removes from the Dynamic Bounding Volume Tree the node with the 
    given node ID.
    This action is used internally.
    
    Attribute: Parameter id The integer id number for the node which is to be removed

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox

        Item2DNode item
        integer id = broadphase:CreateNode(boundingBox, item)
        output "This item was added to node number " + id

        broadphase:DestroyNode(id)
        output "Node number " + id + " was removed from the tree."   
    */
    action DestroyNode(integer id)
        UnbufferMove(id)
        nodeCount = nodeCount - 1
        tree:DestroyNode(id)
    end
/*
    This action moves the Item2D contained in the tree node with the given 
    node ID by the given displacement vector. If the node moves outside of its 
    existing bounding box, then the object is removed from the tree, a new 
    bounding box is calculated, and it is reinserted into the tree. Otherwise, 
    the node is left where it is in the tree.
    This action is used internally.

    Attribute: Parameter id The id of the node that is to be moved.
    
    Attribute: Parameter boundingBox The boundingBox of the node to be moved.
    
    Attribute: Parameter displacement The displacement of the 2D object.

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode
    use Libraries.Compute.Vector2

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox
        Vector2 displacement

        Item2DNode item
        integer id = broadphase:CreateNode(boundingBox, item)
        output "This item was added to node number " + id

        displacement:Set(1, 5)
        broadphase:MoveNode(id, boundingBox, displacement)
    */
    action MoveNode(integer id, BoundingBox2D boundingBox, Vector2 displacement)
        boolean buffer = tree:MoveNode(id, boundingBox, displacement)
        if buffer
            BufferMove(id)
        end
    end

    /*
    This action adds the node with the given id to the move list. 
    This action is used internally.

    Attribute: Parameter nodeID The id of the node to be touched. 

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox

        Item2DNode item
        integer id = broadphase:CreateNode(boundingBox, item)

        broadphase:TouchNode(id)
    */
    action TouchNode(integer nodeID)
        BufferMove(nodeID)
    end
    
    /*
    This action returns the Item2DNode contained in the tree node with the given ID
    This is an internal action.

    Attribute: Parameter id The integer id of the tree node containing the Item2DNode to be returned
    
    Attribute: Returns The specified Item2DNode

    Attribute: Example
    
    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)

        Item2DNode result
        result = broadphase:GetItemNode(id2)
    */
    action GetItemNode(integer id) returns Item2DNode
        return tree:GetItemNode(id)
    end

    /*
    This action returns the bounding box contained in the tree node with the
    given ID. Note that this bounding box is slightly larger than the bounding
    box of the item contained in this node.
    This action is used internally.

    Attribute: Parameter id The integer id of the tree node containing the BoundingBox2D to be returned

    Attribute: Returns the specified BoundingBox2D

    Attribute: Example
    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)

        BoundingBox2D result
        result = broadphase:GetBoundingBox(id2)
    */
    action GetBoundingBox(integer id) returns BoundingBox2D
        return tree:GetBoundingBox(id)
    end
    
    /*
    This action checks to see if the bounding boxes of two nodes overlap. 
    This action is used internally.

    Attribute: Parameter idA The integer id of one of the nodes to be checked.
    
    Attribute: Parameter idB The integer id of the other node to be checked.

    Attribute: Returns a boolean value that indicates whether the two nodes overlap.

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)

        boolean result = false
        result = broadphase:TestOverlap(id1, id2)
        if result
            output "Nodes " + id1 + " and " + id2 + " overlap."
        else
            output "No overlap."
        end    
    */
    action TestOverlap(integer idA, integer idB) returns boolean
        BoundingBox2D a = tree:GetBoundingBox(idA)
        BoundingBox2D b = tree:GetBoundingBox(idB)

        if b:GetMinimum():GetX() - a:GetMaximum():GetX() > 0 or b:GetMinimum():GetY() - a:GetMaximum():GetY() > 0
            return false
        end

        if a:GetMinimum():GetX() - b:GetMaximum():GetX() > 0 or a:GetMinimum():GetY() - b:GetMaximum():GetY() > 0
            return false
        end

        return true
    end

    /*
    This action returns the number of nodes in the dynamic bounding volume tree.
    This action is used internally.
        
    Attribute: Returns the number of nodes in the tree

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)


        output "There are " + broadphase:GetNodeCount() + " nodes in the tree."
    */
    action GetNodeCount returns integer
        return nodeCount
    end

    /*
    This action updates the list of collideable pairs from the tree. 
    This action is used internally

    Attribute: Parameter collision The CollisionManager2D containing the relevant 
    collision information.

    Attribute: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.CollisionManager2D

        BroadphaseCollision2D broadphase
        CollisionManager2D collision

        broadphase:UpdatePairs(collision)
    */
    action UpdatePairs(CollisionManager2D collision)
        pairCount = 0
        pairList:Empty()

        integer i = 0
        repeat while i < moveCount
            queryNodeID = moveList:Get(i)
            if queryNodeID not= -1
                BoundingBox2D boundingBox = tree:GetBoundingBox(queryNodeID)
                tree:Query(me, boundingBox)
            end
            i = i + 1
        end

        moveCount = 0
        moveList:Empty()

        pairList:Sort()
        i = 0
        repeat while i < pairCount
            CollisionPair primaryPair = pairList:Get(i)
            Item2DNode dataA = tree:GetItemNode(primaryPair:GetIDA())
            Item2DNode dataB = tree:GetItemNode(primaryPair:GetIDB())

            collision:AddPair(dataA, dataB)
            i = i + 1
            
            boolean continue = true
            repeat while i < pairCount and continue
                CollisionPair otherPair = pairList:Get(i)
                if otherPair:GetIDA() not= primaryPair:GetIDA() or otherPair:GetIDB() not= primaryPair:GetIDB()
                    continue = false
                else
                    i = i + 1
                end
            end
        end
    end

    /*
    This action queries the tree for bounding boxes that overlap with the given
    bounding box.

    Attribute: Parameter broadphase The BroadphaseCollision2D which contains the tree
    to check the BoundingBox2D against

    Attribute: Parameter boundingBox The BoundingBox2D we are checking for overlap with

    Attribute: Example

    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode
    use Libraries.Compute.Vector2
    use Libraries.Game.Collision.BroadphaseCollision2D

        BroadphaseCollision2D broadphase

        BoundingBox2D overlap
        Vector2 minimumOverlap
        Vector2 maximumOverlap
        minimumOverlap:Set(-1.5, -1.5)
        maximumOverlap:Set(-0.5, -0.5)
        overlap:Set(minimumOverlap, maximumOverlap)

        tree:Query(broadphase, overlap)
    */
    action Query(BroadphaseCollision2D broadphase, BoundingBox2D boundingBox)
        tree:Query(broadphase, boundingBox)
    end

    /*
    This action returns the height of the tree
    
    Attribute: Returns the height of the tree

    Attribute: Example
    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Item2DNode item1
        Item2DNode item2

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)
        output "Tree has height " + broadphase:GetTreeHeight()

        broadphase:DestroyNode(id2)
        output "After removing node 2 , tree has height " + broadphase:GetTreeHeight()
    */
    action GetTreeHeight returns integer
        return tree:GetHeight()
    end

    /*
    This action computes the maximum balance of the tree. The maximum balance
    is the maximum difference of the heights of the two children of any node.
    
    Attributes: Returns the maximum balance of the tree

    Atributes: Example

    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2
        BoundingBox2D boundingBox3

        Item2DNode item1
        Item2DNode item2
        Item2DNode item3

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)
        integer id3 = broadphase:CreateNode(boundingBox3, item3)

        output "Tree has maximum balance " + broadphase:GetTreeBalance() 
    */
    action GetTreeBalance returns integer
        return tree:GetMaximumBalance()
    end

    /*
    This action computes the quality of the tree (the ratio of the sum of the 
    node perimeters to the root perimeter).

    Attribute: Returns the perimeter ratio of the tree

    Attribute: Example
    
    use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode
    use Libraries.Compute.Vector2

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2

        Vector2 minimum1
        Vector2 minimum2
        Vector2 maximum1
        Vector2 maximum2

        minimum1:Set(0, 0)
        minimum2:Set(0.5, 0.5)
        maximum1:Set(1, 1)
        maximum2:Set(1.5, 1.5)
        boundingBox1:Set(minimum1, maximum1)
        boundingBox2:Set(minimum2, maximum2)

        Item2DNode item1
        Item2DNode item2

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)
    
        output "The perimeter ratio is " + tree:GetPerimeterRatio()
    */
    action GetTreeQuality returns number
        return tree:GetPerimeterRatio()
    end

    /*
    This action adds the node with the id of "integer id" to a list of nodes
    that should be moved with a certain displacement.
    */
    private action BufferMove(integer id)
        moveList:Add(id)
        moveCount = moveCount + 1
    end

    /*
    This action gets ride of the node with the id of "integer id" from a list of nodes
    that should be moved with a certain displacement.
    */
    private action UnbufferMove(integer id)
        integer i = 0
        repeat while i < moveCount
            if moveList:Get(i) = id
                moveList:Set(i, -1)
            end
            i = i + 1
        end
    end

    /*
    This action adds the given node to the pair list with the query node, if the
    given node is not the query node. 
    This action is used internally.     
    
    Attribute: Parameter id The integer id of the node to be paired

    Attribute: Returns whether the should proceed (always true)

    Attribute: Example

        use Libraries.Game.Collision.BroadphaseCollision2D
    use Libraries.Game.Collision.BoundingBox2D
    use Libraries.Game.Collision.Item2DNode

        BroadphaseCollision2D broadphase
        BoundingBox2D boundingBox1
        BoundingBox2D boundingBox2
        BoundingBox2D boundingBox3

        Item2DNode item1
        Item2DNode item2
        Item2DNode item3

        integer id1 = broadphase:CreateNode(boundingBox1, item1)
        integer id2 = broadphase:CreateNode(boundingBox2, item2)
        integer id3 = broadphase:CreateNode(boundingBox3, item3)

        boolean result = broadphase:ShouldProceed(id2)    
    */
    action ShouldProceed(integer id) returns boolean
        if id = queryNodeID
            return true
        end
        
        CollisionPair pair
        
        if id < queryNodeID
            pair:SetIDA(id)
            pair:SetIDB(queryNodeID)
        else
            pair:SetIDA(queryNodeID)
            pair:SetIDB(id)
        end

        pairList:Add(pair)

        pairCount = pairCount + 1
        return true
    end
end