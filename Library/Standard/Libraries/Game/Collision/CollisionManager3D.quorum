use Libraries.Game.Layer3D
use Libraries.Containers.Array
use Libraries.Interface.Item3D
use Libraries.Game.Collision.BroadphaseCollision3D
use Libraries.Interface.Events.CollisionEvent3D
use Libraries.Interface.Events.CollisionListener3D
use Libraries.Language.Object
use Libraries.Game.Collision.Item3DNode
use Libraries.Game.Collision.CollisionEdge3D

package Libraries.Game.Collision

/*
This class can be seen as a "manager" class that uses CollisionEvent3D class
and the BoardphaseCollision3D class to record if a collision occured, to decide
if a collision occured.
This class uses the CollisionEvent3D to record all of the collision that has 
occured during the current physics step. This class also uses the 
BroadphaseCollision3D class to determine whether a possible collision has happened.
*/
class CollisionManager3D
    BroadphaseCollision3D broadphase
    CollisionEvent3D collisionList = undefined
    integer collisionCount = 0
    Array<CollisionListener3D> listeners

    Layer3D myLayer = undefined

    /*
    This action sets the 3D layer which the objects lie on.
    Attribute: Parameter layer The 3D layer which the objects lie on.
    */
    action SetLayer(Layer3D layer)
        myLayer = layer
    end

    /*
    This action compares the two nodes in the DynamicBoundingVolumeTree3D
    to determine whether the items in the two nodes collide. If the items in the
    two nodes do collide, then the collision will be recorded inside this
    CollisionManager3D.
    Attribute: Parameter nodeA The first node.
    Attribute: Parameter nodeB The second node.
    */
    action AddPair(Item3DNode nodeA, Item3DNode nodeB)
        Item3D itemA = nodeA:GetItem()
        Item3D itemB = nodeB:GetItem()

        integer indexA = nodeA:GetChildIndex()
        integer indexB = nodeB:GetChildIndex()

        if itemA = itemB
            return now
        end

        CollisionEdge3D edge = itemB:GetCollisionList()
        repeat while edge not= undefined
            if edge:GetOther() = itemA
                Item3D iA = edge:GetCollision():GetItemA()
                Item3D iB = edge:GetCollision():GetItemB()
                integer a = edge:GetCollision():GetChildIndexA()
                integer b = edge:GetCollision():GetChildIndexB()
                
                if iA = itemA and a = indexA and iB = itemB and b = indexB
                    return now
                end

                if iA = itemB and a = indexB and iB = itemA and b = indexA
                    return now
                end
            end

            edge = edge:GetNext()
        end

        // create collision event and add to collision event list
        CollisionEvent3D collision
        collision:Initialize(itemA, indexA, itemB, indexB)
        
        collision:SetPrevious(undefined)
        collision:SetNext(collisionList)
        if collisionList not= undefined
            collisionList:SetPrevious(collision)
        end
        collisionList = collision

        // connect collision to itemA
        collision:GetNodeA():SetCollision(collision)
        collision:GetNodeA():SetOther(itemB)

        collision:GetNodeA():SetPrevious(undefined)
        collision:GetNodeA():SetNext(itemA:GetCollisionList())
        if itemA:GetCollisionList() not= undefined
            itemA:GetCollisionList():SetPrevious(collision:GetNodeA())
        end
        itemA:SetCollisionList(collision:GetNodeA())

        // connect collision to itemB
        collision:GetNodeB():SetCollision(collision)
        collision:GetNodeB():SetOther(itemA)

        collision:GetNodeB():SetPrevious(undefined)
        collision:GetNodeB():SetNext(itemB:GetCollisionList())
        if itemB:GetCollisionList() not= undefined
            itemB:GetCollisionList():SetPrevious(collision:GetNodeB())
        end
        itemB:SetCollisionList(collision:GetNodeB())

        collisionCount = collisionCount + 1
    end

    /*
    This action uses the broadphase linked to this CollisionManager3D to test
    if two nodes are colliding.
    */
    action FindNewCollisions
        broadphase:UpdatePairs(me)
    end

    /*
    This action tests deletes a CollisionEvent3D in a doubly linked list of
    CollisionEvent3D. 
    Attribute: Parameter collision The CollisionEvent3D to be deleted.
    */
    action Destroy(CollisionEvent3D collision)
        Item3D itemA = collision:GetItemA()
        Item3D itemB = collision:GetItemB()

        if collision:IsTouching()
            integer i = 0
            repeat while i < listeners:GetSize()
                CollisionListener3D listener = listeners:Get(i)
                listener:FinishCollision(collision)
                i = i + 1
            end
        end

        collision:GetCollisionPoints():ClearCollisionPoints()

        if collision:GetPrevious() not= undefined
            collision:GetPrevious():SetNext(collision:GetNext())
        end

        if collision:GetNext() not= undefined
            collision:GetNext():SetPrevious(collision:GetPrevious())
        end

        if collision = collisionList
            collisionList = collision:GetNext()
        end

        // remove collision from itemA
        if collision:GetNodeA():GetPrevious() not= undefined
            collision:GetNodeA():GetPrevious():SetNext(collision:GetNodeA():GetNext())
        end

        if collision:GetNodeA():GetNext() not= undefined
            collision:GetNodeA():GetNext():SetPrevious(collision:GetNodeA():GetPrevious())
        end

        if collision:GetNodeA() = itemA:GetCollisionList()
            itemA:SetCollisionList(collision:GetNodeA():GetNext())
        end

        // remove collision from itemB
        if collision:GetNodeB():GetPrevious() not= undefined
            collision:GetNodeB():GetPrevious():SetNext(collision:GetNodeB():GetNext())
        end

        if collision:GetNodeB():GetNext() not= undefined
            collision:GetNodeB():GetNext():SetPrevious(collision:GetNodeB():GetPrevious())
        end

        if collision:GetNodeB() = itemB:GetCollisionList()
            itemB:SetCollisionList(collision:GetNodeB():GetNext())
        end

        collisionCount = collisionCount - 1
    end

    /*
    This action resolve every collision that is recorded in the CollisionEvent3D
    doubly linked list.
    */
    action Collide
        CollisionEvent3D collision = collisionList
        repeat while collision not= undefined
            boolean jump = false
            Item3D itemA = collision:GetItemA()
            Item3D itemB = collision:GetItemB()
            integer indexA = collision:GetChildIndexA()
            integer indexB = collision:GetChildIndexB()

            if not itemA:IsCollidable() or not itemB:IsCollidable()
                CollisionEvent3D cNuke = collision
                collision = cNuke:GetNext()
                Destroy(cNuke)
                jump = true
            end

            // collision filtering
            // this involves, for example, ignoring collisions where both items
            // are declared as static bodies
            // should we allow user-defined collision filtering?

            if not jump
                integer nodeIDA = itemA:GetNode(indexA):GetNodeID()
                integer nodeIDB = itemB:GetNode(indexB):GetNodeID()

                boolean overlap = broadphase:TestOverlap(nodeIDA, nodeIDB)

                if not overlap
                    CollisionEvent3D cNuke = collision
                    collision = cNuke:GetNext()
                    Destroy(cNuke)
                else
                    collision:DispatchCollision(listeners)
                    collision = collision:GetNext()
                end
            end
        end
    end

    /*
    This action returns the BroadphaseCollision3D that is used by this CollisionManager3D.

    Attribute: Returns the BroadphaseCollision3D that is used to solve a collision.
    */
    action GetBroadphase returns BroadphaseCollision3D
        return broadphase
    end

    /*
    This action returns the first event in the doubly linked list of 
    CollisionEvent2D.
    Attribute: Returns the first CollisionEvent2D.
    */
    action GetCollisionList returns CollisionEvent3D
        return collisionList
    end

    /*
    This class returns how many CollisionEvent3D is available in this 
    CollisionManager3D.
    Attribute: Returns the number of CollisionEvent3Ds.
    */
    action GetCollisionCount returns integer
        return collisionCount
    end

    /*
    This action adds a CollisionListener3D to the current CollisionManager3D.
    Attribute: Parameter listener The CollisionListener3D to be added.
    */
    action AddCollisionListener(CollisionListener3D listener)
        listeners:Add(listener)
    end

    /*
    This action removes a CollisionListener3D from the current CollisionManager3D.
    Attribute: Parameter listener The CollisionListener3D to be deleted.
    */
    action RemoveCollisionListener(CollisionListener3D listener)
        listeners:Remove(listener)
    end
end