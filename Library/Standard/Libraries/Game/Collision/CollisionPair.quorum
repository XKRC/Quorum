use Libraries.Language.Support.CompareResult

package Libraries.Game.Collision


/*
This class is contains a pair of items that might be colliding with each other. 
The items can be 2D objects xor 3D objects, where each item is identified by
the node number that the item is in in the dynamic bounding volume tree.
This class is used internally by BroadphaseCollision2D and BroadphaseCollision3D.
*/
class CollisionPair
    integer nodeIDA = -1
    integer nodeIDB = -1

    /*
    This action records the identifiers of the node that each item is in on a DynamicBoundingVolumeTree.
    Attribute: Parameter nodeIDA The node number of the first item.
    Attribute: Parameter nodeIDB The node number of the second item.
    */
    action Set(integer nodeIDA, integer nodeIDB)
        me:nodeIDA = nodeIDA
        me:nodeIDB = nodeIDB
    end

    /*
    This action returns the node number of the first item.
    Attribute: Returns the node number of the first item.
    */
    action GetIDA returns integer
        return nodeIDA
    end

    /*
    This action sets the node number of the first item.
    Attribute: Parameter id The node number of the first item.
    */
    action SetIDA(integer id)
        nodeIDA = id
    end

    /*
    This action returns the node number of the second item.
    Attribute: Returns the node number of the second item.
    */
    action GetIDB returns integer
        return nodeIDB
    end

    /*
    This action sets the node number of the second item.
    Attribute: Parameter id The node number of the second item.
    */
    action SetIDB(integer id)
        nodeIDB = id
    end


    /*
    This action is used to compare two CollisionPair objects to sort the collision
    pairs based on node numbers.
    Attribute: Parameter otherPair The CollisionPair to compare to.
    Attribute: Returns whether the current CollisionPair is SMALLER, EQUAL, or LARGER than the otherPair.
    */
    action Compare(CollisionPair otherPair) returns CompareResult
        CompareResult result
        if me:nodeIDA < otherPair:nodeIDA
            result:result = result:SMALLER
            return result
        end

        if me:nodeIDA = otherPair:nodeIDA
            if me:nodeIDB < otherPair:nodeIDB
                result:result = result:SMALLER
                return result
            elseif me:nodeIDB = otherPair:nodeIDB
                result:result = result:EQUAL
                return result
            else
                result:result = result:LARGER
                return result
            end
        end

        result:result = result:LARGER
        return result
    end
end