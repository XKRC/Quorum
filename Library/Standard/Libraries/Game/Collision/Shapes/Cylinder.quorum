package Libraries.Game.Collision.Shapes

use Libraries.Game.Collision.Shapes.CollisionShape3D
use Libraries.Containers.Array
use Libraries.Compute.Vector3
use Libraries.Compute.Math
use Libraries.Compute.Plane
use Libraries.Compute.BitwiseOperations
use Libraries.Compute.Matrix3
use Libraries.Game.BoundingBox
use Libraries.Game.Collision.PhysicsPosition3D

/*
This class describes the cylinder shape in 3D.
*/
class Cylinder is CollisionShape3D
    Array<Vector3> directions
    Array<Vector3> supporting

    Vector3 localBoundingBoxMinimum
    Vector3 localBoundingBoxMaximum
    boolean isLocalBoundingBoxValid = false

    integer upAxis = 1  //by default the axis of the cylinder aligns with the y-axis

    on create
        parent:CollisionShape3D:SetType(parent:CollisionShape3D:CYLINDER)

        parent:CollisionShape3D:localScaling:Set(1, 1, 1)
        
        repeat 6 times
            Vector3 direction
            Vector3 support
            
            directions:Add(direction)
            supporting:Add(support)
        end

        directions:Get(0):Set(1, 0, 0)
        directions:Get(1):Set(0, 1, 0)
        directions:Get(2):Set(0, 0, 1)
        directions:Get(3):Set(-1, 0, 0)
        directions:Get(4):Set(0, -1, 0)
        directions:Get(5):Set(0, 0, -1)

        localBoundingBoxMinimum:Set(1, 1, 1)
        localBoundingBoxMaximum:Set(-1, -1, -1)
    end

    /*
    This action approximates the inertia of the cylinder with an inertia of a
    box. The mass moment of inertia is also calculated relative to the local
    origin of the cylinder.
    */
    action CalculateLocalInertia(number mass, Vector3 inertia)
        Vector3 halfExtents = GetHalfExtentsWithMargin()

        number lx = 2 * halfExtents:GetX()
        number ly = 2 * halfExtents:GetY()
        number lz = 2 * halfExtents:GetZ()

        inertia:Set(mass / 12 * (ly * ly + lz * lz), mass / 12 * (lx * lx + lz * lz), mass / 12 * (lx * lx + ly * ly))
    end

    /*
    This action finds the bounding box that would bound the Cylinder in its
    current position.
    */
    action ComputeBoundingBox(BoundingBox boundingBox, PhysicsPosition3D transform)
        number margin = GetMargin()

        Vector3 localHalfExtents
        localHalfExtents:Set(localBoundingBoxMaximum)
        localHalfExtents:Subtract(localBoundingBoxMinimum)
        localHalfExtents:Scale(0.5)

        localHalfExtents:SetX(localHalfExtents:GetX() + margin)
        localHalfExtents:SetY(localHalfExtents:GetY() + margin)
        localHalfExtents:SetZ(localHalfExtents:GetZ() + margin)

        Vector3 localCenter
        localCenter:Set(localBoundingBoxMaximum)
        localCenter:Add(localBoundingBoxMinimum)
        localCenter:Scale(0.5)

        Math math

        Matrix3 abs_b
        abs_b:Set(transform:GetBasis()) //the rotational part of the current cylinder shape
        abs_b:Set(math:AbsoluteValue(abs_b:row0column0), math:AbsoluteValue(abs_b:row0column1), math:AbsoluteValue(abs_b:row0column2),
                  math:AbsoluteValue(abs_b:row1column0), math:AbsoluteValue(abs_b:row1column1), math:AbsoluteValue(abs_b:row1column2),
                  math:AbsoluteValue(abs_b:row2column0), math:AbsoluteValue(abs_b:row2column1), math:AbsoluteValue(abs_b:row2column2))


        Vector3 center
        transform:Transform(center)   //should transform the local center instead 

        Vector3 extent
        Vector3 temp

        temp:Set(abs_b:row0column0, abs_b:row0column1, abs_b:row0column2)
        extent:SetX(temp:DotProduct(localHalfExtents))
        temp:Set(abs_b:row1column0, abs_b:row1column1, abs_b:row1column2)
        extent:SetY(temp:DotProduct(localHalfExtents))
        temp:Set(abs_b:row2column0, abs_b:row2column1, abs_b:row2column2)
        extent:SetZ(temp:DotProduct(localHalfExtents))

        Vector3 boundingBoxMinimum
        Vector3 boundingBoxMaximum

        boundingBoxMinimum:Set(center)
        boundingBoxMinimum:Subtract(extent)
        boundingBoxMaximum:Set(center)
        boundingBoxMaximum:Add(extent)

        boundingBox:Set(boundingBoxMinimum, boundingBoxMaximum) //this would be the bounding box in global coordinates
    end

    /*
    This action sets the properties of this cylinder using passed in sizes.
    */
    action Set(number width, number height, number depth)
        Vector3 halfExtents
        halfExtents:Set(width / 2, height / 2, depth / 2)
        Set(halfExtents)
    end

    /*
    This action is used by "action Set(number width, number height, number depth)"
    to ensure the halfExtents vector is correct.
    */
    private action Set(Vector3 halfExtents)
        Vector3 margin
        margin:Set(GetMargin(), GetMargin(), GetMargin())
        parent:CollisionShape3D:implicitShapeDimensions:Set(halfExtents:GetX() * parent:CollisionShape3D:localScaling:GetX(), 
                                                            halfExtents:GetY() * parent:CollisionShape3D:localScaling:GetY(), 
                                                            halfExtents:GetZ() * parent:CollisionShape3D:localScaling:GetZ())
        parent:CollisionShape3D:implicitShapeDimensions:Subtract(margin)
        upAxis = 1
        RecalculateLocalBoundingBox()
    end

    /*
    This action specified which axis does the cylinder's height aligns with.
    */
    action SetUpAxis(integer upAxis)
        me:upAxis = upAxis
    end

    /*
    This action returns a vector that records information about the cylinder's
    height and radius with an offset.
    */
    action GetHalfExtentsWithMargin returns Vector3
        Vector3 halfExtents = GetHalfExtentsWithoutMargin()
        Vector3 margin
        margin:Set(GetMargin(), GetMargin(), GetMargin())
        halfExtents:Add(margin)
        return halfExtents
    end

    /*
    This action returns a vector that records information about the cylinder's
    height and radius without an offset.
    Half extents stores <height, radius, -> when the cylinder is aligned in the x direction.
    Half extents stores <radius, -, height> when the cylinder is aligned in the z direction.
    Hald extents stores <radius, height, -> when the cylinder is aligned in the y direction.
    */
    action GetHalfExtentsWithoutMargin returns Vector3
        Vector3 out
        out:Set(parent:CollisionShape3D:implicitShapeDimensions)
        return out
    end

    /*
    This action finds the vertex with an offset (margin) of the 3D shape that is
    furthest away in a direction specified by "Vector3 vector".    
    */
    action LocalGetSupportingVertex(Vector3 vector) returns Vector3
        Vector3 supVertex = LocalGetSupportingVertexWithoutMargin(vector)

        if GetMargin() not= 0
            Vector3 vecnorm
            vecnorm:Set(vector)

            if vecnorm:LengthSquared() < 0.000000119209290 * 0.000000119209290
                vecnorm:Set(-1, -1, -1)
            end
            vecnorm:Normalize()
            Vector3 temp
            temp:Set(supVertex)
            supVertex:Set(vecnorm)
            supVertex:Scale(GetMargin())
            supVertex:Add(temp)
        end

        return supVertex
    end

    /*
    This action finds the vertex that is furthest away in a direction specified
    by "Vector3 vector" that doesn't have an offset.
    */
    action LocalGetSupportingVertexWithoutMargin(Vector3 vector) returns Vector3
        if upAxis = 0
            return CylinderLocalSupportX(GetHalfExtentsWithoutMargin(), vector)
        elseif upAxis = 1
            return CylinderLocalSupportY(GetHalfExtentsWithoutMargin(), vector)
        else
            return CylinderLocalSupportZ(GetHalfExtentsWithoutMargin(), vector)
        end
    end

    /*
    This action sets the offset of the box that will bound the object to 
    prevent objects going through each other graphically.
    */
    action SetMargin(number margin)
        Vector3 oldMargin
        oldMargin:Set(GetMargin(), GetMargin(), GetMargin())
        Vector3 implicitShapeDimensionsWithMargin
        implicitShapeDimensionsWithMargin:Set(parent:CollisionShape3D:implicitShapeDimensions)
        implicitShapeDimensionsWithMargin:Add(oldMargin)

        parent:CollisionShape3D:SetMargin(margin)
        Vector3 newMargin
        newMargin:Set(GetMargin(), GetMargin(), GetMargin())
        parent:CollisionShape3D:implicitShapeDimensions:Set(implicitShapeDimensionsWithMargin)
        parent:CollisionShape3D:implicitShapeDimensions:Subtract(newMargin)
    end

    /*
    This action returns one of the 6 planes that made up the bounding box for 
    this cylinder.
    */
    action GetPlane(Vector3 planeNormal, Vector3 planeSupport, integer i)
        Plane plane
        GetPlaneEquation(plane, i)
        planeNormal:Set(plane:GetNormal())
        Vector3 temp
        temp:Set(planeNormal)
        temp:Scale(-1)
        planeSupport:Set(LocalGetSupportingVertex(temp))
    end

    /*
    This action returns the number of planes of the cylinder. Since we will be
    approximating the cylinder with a bounding box, therefore, there will be
    6 planes surrounding this cylinder.
    */
    action GetNumberOfPlanes returns integer
        return 6
    end

    /*
    This action returns the number of vertices of the cylinder. Since we will be
    approximating the cylinder with a bounding box, therefore, there will be
    8 vertices surrounding this cylinder.
    */
    action GetNumberOfVertices returns integer
        return 8
    end

    /*
    This action returns the number of edges of the cylinder. Since we will be
    approximating the cylinder with a bounding box, therefore, there will be
    12 edges surrounding this cylinder.
    */
    action GetNumberOfEdges returns integer
        return 12
    end

    /*
    This action returns the vertex of the cylinder specified by the integer "i,"
    which will really be the vertex of the bounding box that surrounds the cylinder
    because we are approximating the cylinder with a bounding box.
    */
    action GetVertex(integer i, Vector3 vertex)
        BitwiseOperations bo
        Vector3 halfExtents = GetHalfExtentsWithoutMargin()
        
        vertex:Set(halfExtents:GetX() * (1 - (bo:And(i, 1))) - halfExtents:GetX() * (bo:And(i, 1)),
                   halfExtents:GetY() * (1 - bo:ShiftRight(bo:And(i, 2), 1)) - halfExtents:GetY() * bo:ShiftRight(bo:And(i, 2), 1),
                   halfExtents:GetZ() * (1 - bo:ShiftRight(bo:And(i, 4), 2)) - halfExtents:GetZ() * bo:ShiftRight(bo:And(i, 4), 2))
    end


    /*
    This action finds the plane equation of the bounding boxes that surrounds 
    the cylinder shape because we are approximating the cylinder with a box.
    */
    action GetPlaneEquation(Plane plane, integer i)
        Vector3 halfExtents = GetHalfExtentsWithoutMargin()

        if i = 0
            plane:Set(1, 0, 0, -1 * halfExtents:GetX())
        elseif i = 1
            plane:Set(-1, 0, 0, -1 * halfExtents:GetX())
        elseif i = 2
            plane:Set(0, 1, 0, -1 * halfExtents:GetY())
        elseif i = 3
            plane:Set(0, -1, 0, -1 * halfExtents:GetY())
        elseif i = 4
            plane:Set(0, 0, 1, -1 * halfExtents:GetZ())
        elseif i = 5
            plane:Set(0, 0, -1, -1 * halfExtents:GetZ())
        end
    end

    /*
    This action gets the "i"th edge of the cylinder, which is approximated by
    a bounding box, so this action gets the "i"th edge of that bounding box.
    The result will be put inside "Vector3 pa" and "Vector3 pb" for the vertices
    of each edge.
    */
    action GetEdge(integer i, Vector3 pa, Vector3 pb)
        integer edgeVertex0 = 0
        integer edgeVertex1 = 0

        if i = 0
            edgeVertex0 = 0
            edgeVertex1 = 1
        elseif i = 1
            edgeVertex0 = 0
            edgeVertex1 = 2
        elseif i = 2
            edgeVertex0 = 1
            edgeVertex1 = 3
        elseif i = 3
            edgeVertex0 = 2
            edgeVertex1 = 3
        elseif i = 4
            edgeVertex0 = 0
            edgeVertex1 = 4
        elseif i = 5
            edgeVertex0 = 1
            edgeVertex1 = 5
        elseif i = 6
            edgeVertex0 = 2
            edgeVertex1 = 6
        elseif i = 7
            edgeVertex0 = 3
            edgeVertex1 = 7
        elseif i = 8
            edgeVertex0 = 4
            edgeVertex1 = 5
        elseif i = 9
            edgeVertex0 = 4
            edgeVertex1 = 6
        elseif i = 10
            edgeVertex0 = 5
            edgeVertex1 = 7
        elseif i = 11
            edgeVertex0 = 6
            edgeVertex1 = 7
        end

        GetVertex(edgeVertex0, pa)
        GetVertex(edgeVertex1, pb)
    end

    /*
    This action tests if the point described by "Vector3 point" is inside
    the cylinder with the specified "tolerance."    
    */
    action IsInside(Vector3 point, number tolerance) returns boolean
        Vector3 halfExtents = GetHalfExtentsWithoutMargin()

        boolean result = (point:GetX() <= (halfExtents:GetX() + tolerance)) and
                         (point:GetX() >= (-1 * halfExtents:GetX() - tolerance)) and
                         (point:GetY() <= (halfExtents:GetY() + tolerance)) and
                         (point:GetY() >= (-1 * halfExtents:GetY() - tolerance)) and
                         (point:GetZ() <= (halfExtents:GetZ() + tolerance)) and
                         (point:GetZ() >= (-1 * halfExtents:GetZ() - tolerance))

        return result
    end

    /*
    This action is used by "action LocalGetSupportingVertexWithoutMargin"
    to find the vertex that is furthest away in a direction specified
    by "Vector3 vector" that doesn't have an offset when the cylinder's height
    aligns with the x axis.
    */ 
    action CylinderLocalSupportX(Vector3 halfExtents, Vector3 vector) returns Vector3
        return CylinderLocalSupport(halfExtents, vector, 0, 1, 0, 2)
    end

    /*
    This action is used by "action LocalGetSupportingVertexWithoutMargin"
    to find the vertex that is furthest away in a direction specified
    by "Vector3 vector" that doesn't have an offset when the cylinder's height
    aligns with the y axis.
    */ 
    action CylinderLocalSupportY(Vector3 halfExtents, Vector3 vector) returns Vector3
        return CylinderLocalSupport(halfExtents, vector, 1, 0, 1, 2)
    end

    /*
    This action is used by "action LocalGetSupportingVertexWithoutMargin"
    to find the vertex that is furthest away in a direction specified
    by "Vector3 vector" that doesn't have an offset when the cylinder's height
    aligns with the z axis.
    */ 
    action CylinderLocalSupportZ(Vector3 halfExtents, Vector3 vector) returns Vector3
        return CylinderLocalSupport(halfExtents, vector, 2, 0, 2, 1)
    end

    /*
    This action is used by "action CylinderLocalSupportZ", "action CylinderLocalSupportY", 
    and "action CylinderLocalSupportX" to find the vertex that is furthest away 
    in a direction specified by "Vector3 vector".
    */ 
    private action CylinderLocalSupport(Vector3 halfExtents, Vector3 vector, integer cylinderUpAxis, integer XX, integer YY, integer ZZ) returns Vector3
        Vector3 out
        number radius = GetCoordinate(halfExtents, XX)

        number halfHeight = GetCoordinate(halfExtents, cylinderUpAxis)

        number d = 0
        Math math
        number s = math:SquareRoot(GetCoordinate(vector, XX) * GetCoordinate(vector, XX) + GetCoordinate(vector, ZZ) * GetCoordinate(vector, ZZ))

        if s not= 0
            d = radius / s
            SetCoordinate(out, XX, GetCoordinate(vector, XX) * d)
            number value = halfHeight
            if GetCoordinate(vector, YY) < 0
                value = -halfHeight
            end
            SetCoordinate(out, YY, value)
            SetCoordinate(out, ZZ, GetCoordinate(vector, ZZ) * d)
            return out
        else
            SetCoordinate(out, XX, radius)
            number value = halfHeight
            if GetCoordinate(vector, YY) < 0
                value = -halfHeight
            end
            SetCoordinate(out, YY, value)
            SetCoordinate(out, ZZ, 0)
            return out
        end
    end

    /*
    This actoin returns the 0th (x), 1st (y), 2nd (z) coordinate of the vector
    passed in.
    */
    private action GetCoordinate(Vector3 vector, integer coordinate) returns number
        if coordinate = 0
            return vector:GetX()
        elseif coordinate = 1
            return vector:GetY()
        else
            return vector:GetZ()
        end
    end

    /*
    This actoin sets the 0th (x), 1st (y), 2nd (z) coordinate of the vector
    passed in.
    */
    private action SetCoordinate(Vector3 vector, integer coordinate, number value)
        if coordinate = 0
            vector:SetX(value)
        elseif coordinate = 1
            vector:SetY(value)
        else
            vector:SetZ(value)
        end
    end

    /*
    This action returns which axis the height of the cylinder is aligned to.
    */
    action GetUpAxis returns integer
        return upAxis
    end

    /*
    This action returns the radius of the cylinder.
    */
    action GetRadius returns number
        if upAxis = 0
            return GetHalfExtentsWithMargin():GetY()
        elseif upAxis = 1
            return GetHalfExtentsWithMargin():GetX()
        else
            return GetHalfExtentsWithMargin():GetX()
        end
    end

    /*
    This action calculates the preferred number of directions to check if another object
    has penetrated this cylinder.
    */
    action GetNumberPreferredPenetrationDirections returns integer
        return 6
    end

    /*
    This action calculates one of the directions to check if another object has
    penetrated this box.
    */
    action GetPreferredPenetrationDirection(integer index, Vector3 penetrationVector)
        if index = 0
            penetrationVector:Set(1, 0, 0)
        elseif index = 1
            penetrationVector:Set(-1, 0, 0)
        elseif index = 2
            penetrationVector:Set(0, 1, 0)
        elseif index = 3
            penetrationVector:Set(0, -1, 0)
        elseif index = 4
            penetrationVector:Set(0, 0, 1)
        elseif index = 5
            penetrationVector:Set(0, 0, -1)
        end
    end

    /*
    This action sets another cylinder to have the properties of the current
    cylinder.
    */
    action Copy returns CollisionShape3D
        Cylinder cylinder
        cylinder:upAxis = upAxis
        cylinder:Set(parent:CollisionShape3D:implicitShapeDimensions)
        cylinder:parent:CollisionShape3D:localScaling:Set(parent:CollisionShape3D:localScaling)
        return cylinder
    end

    /*
    This action calculates the bounding box of the cylinder. The coordinates of
    the bounding box will be specified in local coordinates.
    */
    action RecalculateLocalBoundingBox
        isLocalBoundingBoxValid = true

        BatchedUnitVectorGetSupportingVertexWithoutMargin(directions, supporting, 6)

        integer i = 0
        repeat while i < 3
            SetCoordinate(localBoundingBoxMaximum, i, GetCoordinate(supporting:Get(i), i) + parent:CollisionShape3D:collisionMargin)
            SetCoordinate(localBoundingBoxMinimum, i, GetCoordinate(supporting:Get(i + 3), i) + parent:CollisionShape3D:collisionMargin)
            i = i + 1
        end
    end

    /*
    This action is used by "action RecalculateLocalBoundingBox" to calculate the
    coordinates of the bounding box that will surround this cylinder.
    */
    private action BatchedUnitVectorGetSupportingVertexWithoutMargin(Array<Vector3> vectors, Array<Vector3> supportVerticesOut, integer numVectors)
        integer i = 0
        repeat while i < numVectors
            if upAxis = 0
                supportVerticesOut:Get(i):Set(CylinderLocalSupportX(GetHalfExtentsWithoutMargin(), vectors:Get(i)))
            elseif upAxis = 1
                supportVerticesOut:Get(i):Set(CylinderLocalSupportY(GetHalfExtentsWithoutMargin(), vectors:Get(i)))
            else
                supportVerticesOut:Get(i):Set(CylinderLocalSupportZ(GetHalfExtentsWithoutMargin(), vectors:Get(i)))
            end

            i = i + 1
        end
    end


    /*
    This action returns how many children shapes are attached to this box.
    */
    action GetChildCount returns integer
        return 1
    end

    /*
    This action scales the cylinder from its original configuration.
    */
    action SetLocalScaling(Vector3 scaling)
        Vector3 oldMargin
        oldMargin:Set(GetMargin(), GetMargin(), GetMargin())
        Vector3 implicitShapeDimensionsWithMargin
        implicitShapeDimensionsWithMargin:Set(parent:CollisionShape3D:implicitShapeDimensions)
        implicitShapeDimensionsWithMargin:Add(oldMargin)
        Vector3 unScaledImplicitShapeDimensionsWithMargin
        unScaledImplicitShapeDimensionsWithMargin:Set(implicitShapeDimensionsWithMargin:GetX() / parent:CollisionShape3D:localScaling:GetX(),
                                                      implicitShapeDimensionsWithMargin:GetY() / parent:CollisionShape3D:localScaling:GetY(),
                                                      implicitShapeDimensionsWithMargin:GetZ() / parent:CollisionShape3D:localScaling:GetZ())
        parent:CollisionShape3D:SetLocalScaling(scaling)

        parent:CollisionShape3D:implicitShapeDimensions:Set(unScaledImplicitShapeDimensionsWithMargin:GetX() * parent:CollisionShape3D:localScaling:GetX(),
                                                            unScaledImplicitShapeDimensionsWithMargin:GetY() * parent:CollisionShape3D:localScaling:GetY(),
                                                            unScaledImplicitShapeDimensionsWithMargin:GetZ() * parent:CollisionShape3D:localScaling:GetZ())
        parent:CollisionShape3D:implicitShapeDimensions:Subtract(oldMargin)
    end

    /*
    This action scales the cylinder from the current size.
    */
    action Scale(Vector3 scale)
        Vector3 oldScaling
        parent:CollisionShape3D:GetLocalScaling(oldScaling)
        oldScaling:Scale(scale)

        SetLocalScaling(oldScaling)        
    end
end