use Libraries.Compute.Vector2
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Physics.Mass2D

package Libraries.Game.Collision.Shapes

/*
This class includes the features for all of the 2D shapes that could be used
to determine collision with other 2D shapes.

Please see the Circle and the Polygon class for the implementation of the
blueprints in this class.
*/
class CollisionShape2D
    public constant integer CIRCLE = 0
    public constant integer EDGE = 1
    public constant integer POLYGON = 2
    public constant integer CHAIN = 3

    //the default type is POLYGON
    integer type = POLYGON

    number radius = 0
    
    /*
    This action sets the type of the shape that will be used to collide with 
    another 2D shape.
    */
    action SetType(integer type)
        me:type = type
    end

    /*
    This action gets the type of the shape that is used to collide with another
    2D shape.
    */
    action GetType returns integer
        return type
    end

    /*
    This action sets the radius of the shape.
    */
    action SetRadius(number radius)
        me:radius = radius
    end

    /*
    This action returns the radius of the shape.

    Attribute: Return Returns the radius of the shape.
    */
    action GetRadius returns number
        return radius
    end

    /*
    Child Shape: a more primitive shape (circle, rectangle, edge) that makes up 
    this shape.

    Attribute: Return Returns the number of child that makes up a shape.
    */
    blueprint action GetChildCount returns integer

    /*
    For convex shapes, this will see if the "Vector2 point," in global coordiantes,
    that you passed in is a point inside that convex shape.
    
    Attribute: Parameter transform The position and tilt of the 2D shape relative to the global coodinates.

    Attribute: Parameter point The point of interest in global coordinates.

    Attribute: Return Returns if the point of interest is inside the shape.
    */
    blueprint action TestPoint(PhysicsPosition2D transform, Vector2 point) returns boolean

    /*
    When you pass in the location of the 2D object (PhysicsPosition2D transform),
    this action will help you return what the bounding box "BoundingBox2D boundingBox"
    will look like for the shape's child #"integer childIndex".

    Attribute: Parameter boundingBox The bounding box for the child shape will be returned through this parameter.

    Attribute: Parameter transform The position and tilt of the 2D shape relative to the global coordinates.

    Attribute: Parameter childIndex The child shape number.
    */
    blueprint action ComputeBoundingBox(BoundingBox2D boundingBox, PhysicsPosition2D transform, integer childIndex)
    
    /*
    This action finds the mass of a 2D object based on the shape of the object
    and the design of the object.

    Attribute: Parameter mass The mass data computed for this object will be returned through this parameter.
    
    Attribute: Parameter desntiy The density of the 2D mass. [Units: kg/m^2]
    */
    blueprint action ComputeMass(Mass2D mass, number density)

    /*
    This action finds the distance of a point relative to the edge of the shape.

    Attribute: Parameter transform The tilt and the position of the shape.
    Attribute: Parameter point The point of interest.
    Attribute: Parameter childIndex This parameter is not relevant for the Circle and Polygon class.
    Attribute: Parameter normalOut The normal vector pointing from the center of the shape to the point of interest.
    */
    blueprint action ComputeDistance(PhysicsPosition2D transform, Vector2 point, integer childIndex, Vector2 normalOut) returns number

    /*
    This action returns a copy of this CollisionShape2D.
    */
    blueprint action Copy returns CollisionShape2D

    /*
    This action scales the CollisionShape2D in both x and y directions for polygons
    and scales the a circle uniformly.
    
    Attribute: Parameter scaleX How much you want to squeeze the circle or polygon in x direction.

    Attribute: Parameter scaleY How much you want to squeeze the polygon in the y direction.
    */
    blueprint action Scale(number scaleX, number scaleY)

    /*
    This action finds the area of a CollisionShape2D.
    */
    blueprint action ComputeArea returns number
end