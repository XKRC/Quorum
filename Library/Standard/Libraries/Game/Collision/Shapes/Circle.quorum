use Libraries.Compute.Vector2
use Libraries.Compute.Math
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Collision.BoundingBox2D
use Libraries.Game.Physics.Mass2D

package Libraries.Game.Collision.Shapes

/* 
This class extends the CollisionShape2D by rewritting specific actions that 
are blueprint actions in CollisionShape2D for the shape of a circle.
This class records all of the properties of a circle should have. To display 
the circle with the properties that you've set, you have to use 
"use Libraries.Game.Graphics.Drawable".
*/
class Circle is CollisionShape2D
    Vector2 point  //the centroid of the circle relative to the circle's local coordinants.

    Math math

    //when you create this "property holder" for a circle, 
    //you have to reset the default by changing the shape to CIRCLE
    on create
        parent:CollisionShape2D:SetType(parent:CollisionShape2D:CIRCLE)
    end

    /* 
    This action creates a copy of another circle shape using the properties
    of the current circle properties.
    */
    action Copy returns CollisionShape2D
        Circle shape
        shape:point:SetX(me:point:GetX())
        shape:point:SetY(me:point:GetY())
        shape:SetRadius(parent:CollisionShape2D:GetRadius())
        return shape
    end


    /* 
    Because we don't want to change a circle into an oval shape, so this action 
    will use the first number that you passed in to change the size of the 
    circle so that the circle will still be a circle after the change.
    */
    action Scale(number scaleX, number scaleY)
        SetRadius(GetRadius() * scaleX)
    end

    /*
    Because a circle is a primitive shape, therefore, it is its own child (think
    of it as a circle makes up a circle).
    */
    action GetChildCount returns integer
        return 1
    end

    /*
    This action returns the centroid of the circle relative to the circle's local
    coordinates.
    */
    action GetSupportVertex returns Vector2
        return point
    end

    /*
    This action returns 1 for a circle.
    */
    action GetVertexCount returns integer
        return 1
    end

    /*
    This action returns the centroid of the circle relative to the circle's local
    coordinates.
    */
    action GetVertex(integer index) returns Vector2
        return point
    end


    /*
    This action tests if a point of interest is inside the circular shape.

    Attribute: Parameter transform The position and the tilt of the circulat shape relative to the global coordinates.
    
    Attribute: Parameter point The point of interest written in global coordinates.

    */
    action TestPoint(PhysicsPosition2D transform, Vector2 point) returns boolean
        number cosine = transform:GetCosine()
        number sine = transform:GetSine()
        number x = transform:GetPosition():GetX()
        number y = transform:GetPosition():GetY()

        //calculating the vector of point of interest (in global coordinates) - the centroid of circle (in global coordinates)
        number diffX = -1 * (cosine * me:point:GetX() - sine * me:point:GetY() + x - point:GetX())
        number diffY = -1 * (sine * me:point:GetX() + cosine * me:point:GetY() + y - point:GetY())

        //if the length(<diffX, diffY>)^2 <= radius^2, then that means that <diffX, diffY> vector lies inside the circle
        return diffX * diffX + diffY * diffY <= parent:CollisionShape2D:GetRadius() * parent:CollisionShape2D:GetRadius()
    end

    action ComputeDistance(PhysicsPosition2D transform, Vector2 point, integer childIndex, Vector2 normalOut) returns number
        //get the centroid of the circle relative to the global coordinates
        number centerX = transform:GetCosine() * me:point:GetX() - transform:GetSine() * me:point:GetY() + transform:GetPosition():GetX()
        number centerY = transform:GetSine() * me:point:GetX() + transform:GetCosine() * me:point:GetY() + transform:GetPosition():GetY()
        
        //get the vector (in global coordinates) whose head is at the point of interest and tail at the centroid of the circle 
        number dx = point:GetX() - centerX
        number dy = point:GetY() - centerY

        //calculate the distance between the point of interest and the centroid of the circle
        number d1 = math:SquareRoot(dx * dx + dy * dy)

        //returns the unit vector that points to the point of interest from the centroid of the circle
        normalOut:SetX(dx * 1 / d1)
        normalOut:SetY(dy * 1 / d1)

        //returns the distance of the point relative to the outside edges of the circle
        return d1 - parent:CollisionShape2D:GetRadius()
    end



    action ComputeBoundingBox(BoundingBox2D boundingBox, PhysicsPosition2D transform, integer childIndex)
        //get the centroid of the circle shape relative to the global coordinates
        number px = transform:GetCosine() * me:point:GetX() - transform:GetSine() * me:point:GetY() + transform:GetPosition():GetX()
        number py = transform:GetSine() * me:point:GetX() + transform:GetCosine() * me:point:GetY() + transform:GetPosition():GetY()
        
        //the bottom left of the boundingBox will be on the bottom left of the circle
        boundingBox:GetMinimum():SetX(px - parent:CollisionShape2D:GetRadius())
        boundingBox:GetMinimum():SetY(py - parent:CollisionShape2D:GetRadius())
        //the top right of the boundingBox will be on the top right of the circle
        boundingBox:GetMaximum():SetX(px + parent:CollisionShape2D:GetRadius())
        boundingBox:GetMaximum():SetY(py + parent:CollisionShape2D:GetRadius())
        boundingBox:CalculateDimensions()  //let the boundingBox initialize its own variables
    end



    /*
    This action calculates the mass of the circle. The action assumes that the 
    density of the circle is constant at every point on the circle, therefore,
    the center of mass of the circle is just at the center of the circle.
    */
    action ComputeMass(Mass2D mass, number density)
        mass:SetMass(density * math:pi * GetRadius() * GetRadius())
        mass:GetCenter():SetX(point:GetX())
        mass:GetCenter():SetY(point:GetY())
        //calculate the mass rotation of inertia about the origin of the local 
        //coordinates of the circle using the Parallel-Axis Theorem
        mass:SetInertia(mass:GetMass() * (0.5 * GetRadius() * GetRadius() + (point:GetX() * point:GetX() + point:GetY() * point:GetY())))
    end


    /*
    This action calculates the area of the circle.
    */
    action ComputeArea returns number
        return math:pi * GetRadius() * GetRadius()
    end
end