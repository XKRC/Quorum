package Libraries.Game.Collision.Shapes

use Libraries.Compute.Vector3
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Game.BoundingBox

/*
This class is used by Box, Cylinder, and Sphere classes to record some of the
properties that Box, Cylinder, and Sphere have in common.
*/
class CollisionShape3D
    public constant integer MAX_PREFERRED_PENETRATION_DIRECTIONS = 10

    public constant integer SPHERE = 0
    public constant integer BOX = 1
    public constant integer CYLINDER = 2

    Vector3 localScaling
    Vector3 implicitShapeDimensions
    number collisionMargin = 0.04  //the offset of the box that will bound the object to prevent objects going through each other graphically
    integer numberPreferredPenetrationDirections = 0

    integer type = 0

    on create
        implicitShapeDimensions:Set(1, 1, 1)
        localScaling:Set(1, 1, 1)
    end

    blueprint action ComputeBoundingBox(BoundingBox boundingBox, PhysicsPosition3D transform)
    
    /*
    This action finds the center (relative to the object's local origin)
    and the radius of a sphere that would bound the object that is at its 
    current position.
    */
    action GetBoundingSphere(Vector3 center) returns number
        Vector3 temp1
        Vector3 temp2
        PhysicsPosition3D transform
        transform:SetToIdentity()
        BoundingBox boundingBox

        ComputeBoundingBox(boundingBox, transform)

        temp1:Set(boundingBox:GetMaximum())
        temp1:Subtract(boundingBox:GetMinimum())    //vector from Min to Max

        temp2:Set(boundingBox:GetMinimum())
        temp2:Add(boundingBox:GetMaximum())
        center:Set(temp2)
        center:Scale(0.5)   //mid-point formula

        return temp1:Length() * 0.5     //length of the diagonal of the bounding box/2
    end

    /*
    This calculates the maximum distance between any point to the center of
    the 3D object.
    */
    action GetAngularMotionDisc returns number
        Vector3 center
        number disc = GetBoundingSphere(center)
        disc = disc + center:Length()
        return disc
    end

    /*
    This action calculates the rectangular cube that will contain both the object
    in its position currently and also contain the object in a position after
    "timeStep" seconds from now.
    */
    action CalculateTemporalBoundingBox(PhysicsPosition3D currentTransform, Vector3 linearVelocity, Vector3 angularVelocity, number timeStep, 
                                        BoundingBox temporalBoundingBox)
        ComputeBoundingBox(temporalBoundingBox, currentTransform)
        
        number temporalAabbMaxx = temporalBoundingBox:GetMaximum():GetX()
        number temporalAabbMaxy = temporalBoundingBox:GetMaximum():GetY()
        number temporalAabbMaxz = temporalBoundingBox:GetMaximum():GetZ()
        number temporalAabbMinx = temporalBoundingBox:GetMinimum():GetX()
        number temporalAabbMiny = temporalBoundingBox:GetMinimum():GetY()
        number temporalAabbMinz = temporalBoundingBox:GetMinimum():GetZ()

        Vector3 linearMotion
        linearMotion:Set(linearVelocity)
        linearMotion:Scale(timeStep)

        if linearMotion:GetX() > 0
            temporalAabbMaxx = temporalAabbMaxx + linearMotion:GetX()
        else
            temporalAabbMinx = temporalAabbMinx + linearMotion:GetX()
        end

        if linearMotion:GetY() > 0
            temporalAabbMaxy = temporalAabbMaxy + linearMotion:GetY()
        else
            temporalAabbMiny = temporalAabbMiny + linearMotion:GetY()
        end

        if linearMotion:GetZ() > 0
            temporalAabbMaxz = temporalAabbMaxz + linearMotion:GetZ()
        else
            temporalAabbMinz = temporalAabbMinz + linearMotion:GetZ()
        end

        number angularMotion = angularVelocity:Length() * GetAngularMotionDisc() * timeStep
        Vector3 angularMotion3D
        angularMotion3D:Set(angularMotion, angularMotion, angularMotion)
        temporalBoundingBox:GetMinimum():Set(temporalAabbMinx, temporalAabbMiny, temporalAabbMinz)
        temporalBoundingBox:GetMaximum():Set(temporalAabbMaxx, temporalAabbMaxy, temporalAabbMaxz)

        temporalBoundingBox:GetMinimum():Subtract(angularMotion3D)
        temporalBoundingBox:GetMaximum():Add(angularMotion3D)
    end

    /*
    This action returns what type of 3D object the 3D object is.
    */
    action GetType returns integer
        return type
    end

    /*
    This action sets what type of 3D object this 3D object is.
    */
    action SetType(integer type)
        me:type = type
    end

    /*
    This action sets how big the 3D object is, scaling from the default size
    of the 3D object.
    */
    action SetLocalScaling(Vector3 scaling)
        Math math
        localScaling:Set(math:AbsoluteValue(scaling:GetX()), math:AbsoluteValue(scaling:GetY()), math:AbsoluteValue(scaling:GetZ()))
    end

    /*
    This action sets how big the 3D object is, scaling from the current size
    of the 3D object.
    */
    action Scale(Vector3 scale)
        Math math
        localScaling:Set(localScaling:GetX() * math:AbsoluteValue(scale:GetX()), localScaling:GetY() * math:AbsoluteValue(scale:GetY()), localScaling:GetZ() * math:AbsoluteValue(scale:GetZ()))
    end

    /*
    This action returns how the 3D object has been scaled to the shape that
    it has right now.
    */
    action GetLocalScaling(Vector3 out) returns Vector3
        out:Set(localScaling)
        return out
    end

    blueprint action CalculateLocalInertia(number mass, Vector3 intertia)

    /*
    This action sets the offset of the box that will bound the object to 
    prevent objects going through each other graphically.
    */
    action SetMargin(number margin)
        collisionMargin = margin
    end

    /*
    This action returns the offset of the box that will bound the object to 
    prevent objects going through each other graphically.
    */
    action GetMargin returns number
        return collisionMargin
    end

    action LocalGetSupportingVertex(Vector3 vector) returns Vector3
        Vector3 supVertex = LocalGetSupportingVertexWithoutMargin(vector)
        
        if GetMargin() not= 0
            Vector3 vecnorm
            vecnorm:Set(vector)
            if vecnorm:LengthSquared() < 0.000000119209290 * 0.000000119209290
                vecnorm:Set(-1, -1, -1)
            end

            vecnorm:Normalize()
            Vector3 temp
            temp:Set(supVertex)
            supVertex:Set(vecnorm)
            supVertex:Scale(GetMargin())
            supVertex:Add(temp)
        end
        
        return supVertex
    end

    blueprint action LocalGetSupportingVertexWithoutMargin(Vector3 vector) returns Vector3

    blueprint action GetNumberPreferredPenetrationDirections returns integer

    blueprint action GetPreferredPenetrationDirection(integer index, Vector3 penetrationVector)

    blueprint action Copy returns CollisionShape3D

    blueprint action GetChildCount returns integer
end