use Libraries.Compute.Vector2
use Libraries.Containers.Array
use Libraries.Game.Collision.LocalCollisionPoints2D
use Libraries.Game.Collision.PhysicsPosition2D

package Libraries.Game.Collision

/*
This class calculates the actual collision points between two 2D objects
in global coordinates. Because the collision points stored inside the 
"LocalCollisionPoints2D" are approximations/relative collision points, the
result from this class should be considered as the correct value for collision
points.
*/
class GlobalCollisionPoints2D
    /*
    This is the nearly zero value, which will be used as a threshold such that
    if a number is less than or equal to EPSILON, we say that that number is 0.
    */
    constant number EPSILON = 0.00000011920928955078125

    /* 
    This is a vector pointing from object A to object B in global coordinates.
    */
    Vector2 normal

    /*
    This is records the values of "CollisionPoint2D" in global coordinates.
    */
    Array<Vector2> points

    /*
    This is the separation between object A and object B. Units:[m]
    If the separation is positive, that means object A and object B are not colliding.
    If the separation is negative, that means object A and object B are colliding.
    */
    Array<number> separations

    on create
        Vector2 v1
        points:Add(v1)
        Vector2 v2
        points:Add(v2)
        separations:Add(0)
        separations:Add(0)
    end

    /*
    This action calculates the variables to GlobalCollisionPoints2D.

    Attribute: Parameter collisionPoints The LocalCollisionPoints2D between two objects named "A" and "B."

    Attribute: Parameter xfA The position and tilt of object A with respect to the global coordinates.

    Attribute: Parameter radiusA The radius of object A.
    
    Attribute: Parameter xfB The position and tilt of object B with respect to the global coordinates.

    Attribute: Parameter radiusB the radius of object B.
    */
    action Initialize(LocalCollisionPoints2D collisionPoints, PhysicsPosition2D xfA, number radiusA, PhysicsPosition2D xfB, number radiusB)
        if collisionPoints:GetPointCount() = 0  //when there is no collision
            return now
        end

        if collisionPoints:GetType() = collisionPoints:CIRCLES  //when the case is circle-circle collision
            Vector2 pointA
            Vector2 pointB

            normal:SetX(1)
            normal:SetY(0)
            Vector2 v = collisionPoints:GetLocalPoint() //this would be the local center of circleA from the perspective of circleA.

            //find the local center of circleA in global coordinates using the transformation of circleA
            pointA:SetX((xfA:GetCosine() * v:GetX() - xfA:GetSine() * v:GetY()) + xfA:GetPosition():GetX())
            pointA:SetY((xfA:GetSine() * v:GetX() + xfA:GetCosine() * v:GetY()) + xfA:GetPosition():GetY())

            //get the collision point (which is just the local center of circleB)
            Vector2 mp0p = collisionPoints:GetPoints():Get(0):GetLocalPoint()
            //transform the local center of circleB to global coordinates
            pointB:SetX((xfB:GetCosine() * mp0p:GetX() - xfB:GetSine() * mp0p:GetY()) + xfB:GetPosition():GetX())
            pointB:SetY((xfB:GetSine() * mp0p:GetX() + xfB:GetCosine() * mp0p:GetY()) + xfB:GetPosition():GetY())

            //pointA = the center of circleA in global coordinates
            //pointB = the center of circleB in global coordinates
            //this checks if the distance between the centers of the two circles is greater than EPSILON
            if pointA:DistanceSquared(pointB) > EPSILON * EPSILON
                normal:SetX(pointB:GetX() - pointA:GetX())  //then, the "normal" would bethe vector pointing from A to B
                normal:SetY(pointB:GetY() - pointA:GetY())
                normal:Normalize()
            end

            //get the vector from A to B with magnitude of radiusA
            number cAx = normal:GetX() * radiusA + pointA:GetX()
            number cAy = normal:GetY() * radiusA + pointA:GetY()

            //get the vector from B to A with magnitude of radiusB
            number cBx = -normal:GetX() * radiusB + pointB:GetX()
            number cBy = -normal:GetY() * radiusB + pointB:GetY()

            //treat the above two vector's heads as a point 
            //using mid-point formula, find the middle of the two points, which would be your global collision point
            points:Get(0):SetX((cAx + cBx) * 0.5)
            points:Get(0):SetY((cAy + cBy) * 0.5)
            separations:Set(0, (cBx - cAx) * normal:GetX() + (cBy - cAy) * normal:GetY())

        elseif collisionPoints:GetType() = collisionPoints:FACE_A   //when polygonA is the reference object
                                                                    //this case is applicable for polygon-circle collision and polygon-polygon collision
            Vector2 planePoint

            //get the direction of normal impulse (which is in reference to polygonA) in global coordinates,
                //rotate the normal impulse using the "tilt" of polygonA
                //you don't need to translate a normal vector
            number qc = xfA:GetCosine()
            number qs = xfA:GetSine()
            Vector2 v = collisionPoints:GetLocalNormal()
            normal:SetX(qc * v:GetX() - qs * v:GetY())
            normal:SetY(qs * v:GetX() + qc * v:GetY())

            //find the center of polygonA (reference object) in global cordinates
            xfA:MultiplyToOut(xfA, collisionPoints:GetLocalPoint(), planePoint)
            
            Vector2 clipPoint

            integer i = 0
            repeat while i < collisionPoints:GetPointCount()
                //these points will be stored with respect to objectB, therefore, transform using objectB
                //if object B is a circle, then this will get the center of circle in global coordinates
                //if object B is a polygon, then this will get the clipping point of polygon in global coordinates
                xfB:MultiplyToOut(xfB, collisionPoints:GetPoints():Get(i):GetLocalPoint(), clipPoint)

                //find the effective radius of polygon A
                number scalar = radiusA - ((clipPoint:GetX() - planePoint:GetX()) * normal:GetX() + (clipPoint:GetY() - planePoint:GetY()) * normal:GetY())

                number cAx = normal:GetX() * scalar + clipPoint:GetX()
                number cAy = normal:GetY() * scalar + clipPoint:GetY()

                number cBx = -normal:GetX() * radiusB + clipPoint:GetX()
                number cBy = -normal:GetY() * radiusB + clipPoint:GetY()

                points:Get(i):SetX((cAx + cBx) * 0.5)
                points:Get(i):SetY((cAy + cBy) * 0.5)
                separations:Set(i, (cBx - cAx) * normal:GetX() + (cBy - cAy) * normal:GetY())

                i = i + 1
            end
        else    //this is for polygon-polygon collision, A is one polygon, B is another polygon, where the reference object is polygonB
            Vector2 planePoint
            
            //find the direction of normal impulse in global coordinates
            //Note that the normal impulse would point from polygonB to polygonA
            number qc = xfB:GetCosine()
            number qs = xfB:GetSine()
            Vector2 v = collisionPoints:GetLocalNormal()
            normal:SetX(qc * v:GetX() - qs * v:GetY())
            normal:SetY(qs * v:GetX() + qc * v:GetY())

            //find the center of polygonB in global coordinates (stored in planePoint)
            xfB:MultiplyToOut(xfB, collisionPoints:GetLocalPoint(), planePoint)

            Vector2 clipPoint

            integer i = 0
            repeat while i < collisionPoints:GetPointCount()
                //find the clipping points of polygonA in global coordinates
                xfA:MultiplyToOut(xfA, collisionPoints:GetPoints():Get(i):GetLocalPoint(), clipPoint)

                //find the effective radius of polygonB
                number scalar = radiusB - ((clipPoint:GetX() - planePoint:GetX()) * normal:GetX() + (clipPoint:GetY() - planePoint:GetY()) * normal:GetY())

                number cBx = normal:GetX() * scalar + clipPoint:GetX()
                number cBy = normal:GetY() * scalar + clipPoint:GetY()

                number cAx = -normal:GetX() * radiusA + clipPoint:GetX()
                number cAy = -normal:GetY() * radiusA + clipPoint:GetY()

                points:Get(i):SetX((cAx + cBx) * 0.5)
                points:Get(i):SetY((cAy + cBy) * 0.5)
                separations:Set(i, (cAx - cBx) * normal:GetX() + (cAy - cBy) * normal:GetY())

                i = i + 1
            end
            //flip the direction of the normal vector to point from polygonA to polygonB
            normal:SetX(-normal:GetX())
            normal:SetY(-normal:GetY())
        end
    end

    /*
    This action obtains the direction of the normal impulse that should be 
    applied object B from object A in global coordinates.

    Attribute: Returns the direction of the normal impulse that should be applied.
    */
    action GetNormal returns Vector2
        return normal
    end

    /*
    This action returns all of the collision points in global coodinates.

    Attribute: Returns all of the collision points.
    */
    action GetPoints returns Array<Vector2>
        return points
    end

    /*
    This action returns how much separation is between object A and object B.

    Attribute: Returns how much separation is between object A and object B.
    */
    action GetSeparations returns Array<number>
        return separations
    end
end