package Libraries.Game.Physics.Joints

use Libraries.Compute.Vector2
use Libraries.Compute.Matrix3
use Libraries.Containers.List
use Libraries.Interface.Item2D
use Libraries.Compute.Vector3
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Compute.Math

/*
This class contains information for a joint that makes two objects to be attached to each other.
*/
class WeldJoint2D is Joint2D
    Vector2 localAnchorA
    Vector2 localAnchorB
    number referenceAngle = 0
    //The mass-spring-damper frequency in Hertz. Diable softness with a value of 0.
    number frequency = 0
    //damping ratio: 0 = no damping; 1 = critical damping
    number dampingRatio = 0
    Vector3 impulse

    number gamma = 0
    number bias = 0
    integer indexA = 0
    integer indexB = 0
    Vector2 rA 
    Vector2 rB
    Vector2 localCenterA
    Vector2 localCenterB
    number inverseMassA = 0
    number inverseMassB = 0
    number inverseInertiaA = 0
    number inverseInertiaB = 0
    Matrix3 mass
    Math math
    
    on create
        parent:Joint2D:SetType(parent:Joint2D:WELDJOINT)
        referenceAngle = parent:Joint2D:itemB:GetTransform():GetAngle() - parent:Joint2D:itemA:GetTransform():GetAngle()
        impulse:SetZero()
    end
    
    /*
    This action stores the variables passed in inside this WeldJoint2D.
    Attribute: Parameter itemA The first item joined inside this joint.
    Attribute: Parameter itemB The second item joined inside this joint.
    Attribute: Parameter anchor The position in global coordinates that the two object will be connected with each other to.
    */
    action Initialize(Item2D itemA, Item2D itemB, Vector2 anchor)
        parent:Joint2D:itemA = itemA
        parent:Joint2D:itemB = itemB
        localAnchorA = parent:Joint2D:itemA:GetLocalPoint(anchor)
        localAnchorB = parent:Joint2D:itemB:GetLocalPoint(anchor)
        referenceAngle = parent:Joint2D:itemB:GetTransform():GetAngle() - parent:Joint2D:itemA:GetTransform():GetAngle()    
    end

    
    /*
    This action returns the angle difference between object B and object A.
    Attribute: Returns the angle difference between object B and object A.
    */
    action GetReferenceAngle returns number
        return referenceAngle
    end
    
    /*
    This action sets the angle difference between object B and object A.
    Attribute: Parameter angle The angle difference between object B and object A.
    */
    action SetReferenceAngle(number angle)
        referenceAngle = angle
    end

    /*
    This action returns where the second object will be attached to the first object seen from the perspective of the first object.
    Attribute: Returns where the second object will be attached to the first object seen from the perspective of the first object.
    */
    action GetLocalAnchorA returns Vector2
        return localAnchorA
    end

    /*
    This action sets where the second object will be attached to the first object seen from the perspective of the first object.
    Attribute: Parameter anchor Where the second object will be attached to the first object seen from the perspective of the first object.
    */
    action SetLocalAnchorA(Vector2 anchor)
        localAnchorA = anchor
    end

    /*
    This action returns where the first object will be attached to the second object seen from the perspective of the second object.
    Attribute: Returns where the first object will be attached to the second object seen from the perspective of the second object.
    */
    action GetLocalAnchorB returns Vector2
        return localAnchorB
    end

    /*
    This action sets where the first object will be attached to the second object seen from the perspective of the second object.
    Attribute: Parameter anchor Where the first object will be attached to the second object seen from the perspective of the second object.
    */
    action SetLocalAnchorB(Vector2 anchor)
        localAnchorB = anchor
    end

    /*
    This action returns how fast the two objects will oscillate relative to each other because of this joint.
    Attribute: Returns frequency.
    */
    action GetFrequency returns number
        return frequency
    end

    /*
    This action sets how fast the two objects will oscillate relative to each other because of this joint.
    Attribute: Parameter hz Frequency in Hertz.
    */
    action SetFrequency(number hz)
        if hz < 0
            frequency = 0
        else
            frequency = hz
        end
    end

    /*
    This action returns a number that tells you how fast the two objects that are joined with the WeldJoint2D will stop oscillating.
    Attribute: Returns the damping ratio.
    */
    action GetDampingRatio returns number
        return dampingRatio
    end
     
    /*
    This action sets a number that tells you how fast the two objects that are joined with the WeldJoint2D will stop oscillating.
    Attribute: Parameter ratio The damping ratio, range: [0 (oscillate forever), 1 (no oscillation at all)].
    */   
    action SetDampingRatio(number ratio)
        if ratio < 0
            dampingRatio = 0
        else
            dampingRatio = ratio
        end
    end

    /*
    This action returns the point that the two objects are attached together in world coordinates.
    Attribute: Returns anchor point in global coordinates.
    */
    action GetAnchorA returns Vector2
        return parent:Joint2D:itemA:GetWorldPoint(localAnchorA)
    end

    /*
    This action returns the point that the two objects are attached together in world coordinates.
    Attribute: Returns anchor point in global coordinates.
    */
    action GetAnchorB returns Vector2
        return parent:Joint2D:itemB:GetWorldPoint(localAnchorB)
    end

    /*
    This action returns the amount of force that is exerted on the two items joined together because of the joint constraints. 
    Attribute: Parameter inverseTimeStep The reciprocal of the inverse of the time step.
    Attribute: Returns the reaction force. 
    */
    action GetReactionForce(number inverseTimeStep) returns Vector2
        Vector2 reactionForce
        reactionForce:Set(impulse:GetX(), impulse:GetY())
        reactionForce:Scale(inverseTimeStep)
        return reactionForce
    end

    /*
    This action returns the amount of torque that is exerted on the two items joined together because of the joint constraints.
    Attribute: Parameter inverseTimeStep The reciprocal of the inverse of the time step.
    Attribute: Returns the reaction torque.
    */
    action GetReactionTorque(number inverseTimeStep) returns number
        return inverseTimeStep * impulse:GetZ()
    end

    /*
    This action sends in velocity constraints to a JointSolverData2D so that a joint solver can solve for the limitations that this joint has exerted on the two objects.
    Attribute: Parameter data The JointSolverData2D that we are going to store the velocity constraints to.
    */
    action InitializeVelocityConstraints(JointSolverData2D data)
        indexA = parent:Joint2D:itemA:GetCollisionGroupIndex()
        indexB = parent:Joint2D:itemB:GetCollisionGroupIndex()
        localCenterA:Set(parent:Joint2D:itemA:GetSweep():GetLocalCenter())
        localCenterB:Set(parent:Joint2D:itemB:GetSweep():GetLocalCenter())
        inverseMassA = parent:Joint2D:itemA:GetInverseMass()
        inverseMassB = parent:Joint2D:itemB:GetInverseMass()
        inverseInertiaA = parent:Joint2D:itemA:GetInverseInertia()
        inverseInertiaB = parent:Joint2D:itemB:GetInverseInertia()

        number angleA = data:GetAngles():Get(indexA)
        Vector2 linearVelocityA = data:GetLinearVelocities():Get(indexA)
        number angularVelocityA = data:GetAngularVelocities():Get(indexA)

        number angleB = data:GetAngles():Get(indexB)
        Vector2 linearVelocityB = data:GetLinearVelocities():Get(indexB)
        number angularVelocityB = data:GetAngularVelocities():Get(indexB)

        Vector2 temp
        number sineA = math:Sine(angleA)
        number cosineA = math:Cosine(angleA)
        number sineB = math:Sine(angleB)
        number cosineB = math:Cosine(angleB)
        
        temp:Set(localAnchorA):Subtract(localCenterA)
        rA:SetX(cosineA * temp:GetX() - sineA * temp:GetY())
        rA:SetY(sineA * temp:GetX() + cosineA * temp:GetY())

        temp:Set(localAnchorB):Subtract(localCenterB)
        rB:SetX(cosineB * temp:GetX() - sineB * temp:GetY())
        rB:SetY(sineB * temp:GetX() + cosineB * temp:GetY())

        number mA = inverseMassA
        number mB = inverseMassB
        number iA = inverseInertiaA
        number iB = inverseInertiaB

        Matrix3 K
        
        K:row0column0 = mA + mB + rA:GetY() * rA:GetY() * iA + rB:GetY() * rB:GetY() * iB
        K:row0column1 = -rA:GetY() * rA:GetX() * iA - rB:GetY() * rB:GetX() * iB
        K:row0column2 = -rA:GetY() * iA - rB:GetY() * iB
        K:row1column0 = K:row0column1
        K:row1column1 = mA + mB + rA:GetX() * rA:GetX() * iA + rB:GetX() * rB:GetX() * iB
        K:row1column2 = rA:GetX() * iA + rB:GetX() * iB
        K:row2column0 = K:row0column2
        K:row2column1 = K:row1column2
        K:row2column2 = iA + iB 
        
        if frequency > 0
            //GetInverse22
            number a = K:row0column0
            number b = K:row0column1
            number c = K:row1column0
            number d = K:row1column1
            
            number det = a * d - b * c
           
            if det not= 0.0
                det = 1.0 / det
            end
          
            mass:row0column0 = det * d
            mass:row0column1 =-det * b
            mass:row2column0 = 0.0
            mass:row1column0 = -det * c
            mass:row1column1 = det * a
            mass:row2column1 = 0.0
            mass:row0column2 = 0.0
            mass:row1column2 = 0.0
            mass:row2column2 = 0.0
            //end getInverse22 in Mat33

            number inverseMass = iA + iB
            number m = 0.0
            if inverseMass > 0
                m = 1.0 / inverseMass 
            end

            number angle = angleB - angleA - referenceAngle

            number omega = 2.0 * math:pi * frequency
            
            number dampingCoefficient = 2.0 * m * dampingRatio * omega

            number springStiffness = m * omega * omega
            
            number h = data:GetTimeStep():GetTimeStep()
            gamma = h * (dampingCoefficient + h * springStiffness)
            if gamma not= 0
                gamma = 1 / gamma
            else
                gamma = 0
            end
            bias = angle * h * springStiffness * gamma
            inverseMass = inverseMass + gamma
            if inverseMass not= 0
                mass:row2column2 = 1 / inverseMass
            else 
                mass:row2column2 = 0
            end

        else
            //gets symbInverse33
            number bx = K:row1column1 * K:row2column2 - K:row2column1 * K:row1column2
            number by = K:row2column1 * K:row0column2 - K:row0column1 * K:row2column2
            number bz = K:row0column1 * K:row1column2 - K:row1column1 * K:row0column2
            
            number det = K:row0column0 * bx + K:row1column0 * by + K:row2column0 * bz
            if det not= 0
                det = 1 / det
            end
            
            number a11 = K:row0column0
            number a12 = K:row0column1
            number a13 = K:row0column2
            number a22 = K:row1column1
            number a23 = K:row1column2
            number a33 = K:row2column2

            mass:row0column0 = det * (a22 * a33 - a23 * a23)
            mass:row1column0 = det * (a13 * a23 - a12 * a33)
            mass:row2column0 = det * (a12 * a23 - a13 * a22)

            mass:row0column1 = mass:row1column0
            mass:row1column1 = det * (a11 * a33 - a13 * a13)
            mass:row2column1 = det * (a13 * a12 - a11 * a23)

            mass:row0column2 = mass:row2column0
            mass:row1column2 = mass:row2column1
            mass:row2column2 = det * (a11 * a22 - a12 * a12)
            //end symbInverse33

            gamma = 0
            bias = 0
        end

        if data:GetTimeStep():IsWarmStarting()
            Vector2 P 
            impulse:Scale(data:GetTimeStep():GetTimeStepRatio())
            
            P:Set(impulse:GetX(), impulse:GetY())
            
            linearVelocityA:SetX(linearVelocityA:GetX() - (mA * P:GetX()))
            linearVelocityA:SetY(linearVelocityA:GetY() - (mA * P:GetY()))
            angularVelocityA = angularVelocityA - (iA * (rA:CrossProduct(P) + impulse:GetZ()))

            linearVelocityB:SetX(linearVelocityB:GetX() + (mB * P:GetX()))
            linearVelocityB:SetY(linearVelocityB:GetY() + (mB * P:GetY()))
            angularVelocityB = angularVelocityB + (iB * (rB:CrossProduct(P) + impulse:GetZ()))
        else
            impulse:SetZero()
        end 

        data:SetAngularVelocity(angularVelocityA, indexA)
        data:SetAngularVelocity(angularVelocityB, indexB)                
    end

    /*
    This action makes sure that the velocity constraints on the two items joined together are met.
    Attribute: Parameter data The JointSolverData2D that we are getting the velocity constraints from.
    */
    action SolveVelocityConstraints (JointSolverData2D data)
        Vector2 linearVelocityA = data:GetLinearVelocities():Get(indexA)
        number angularVelocityA = data:GetAngularVelocities():Get(indexA)
        Vector2 linearVelocityB = data:GetLinearVelocities():Get(indexB)
        number angularVelocityB = data:GetAngularVelocities():Get(indexB)

        number mA = inverseMassA
        number mB = inverseMassB
        number iA = inverseInertiaA
        number iB = inverseInertiaB

        Vector2 cDot1
        Vector2 temp
        Vector2 P
        if frequency > 0

            number cDot2 = angularVelocityB - angularVelocityA
            
            number impulse2 = -mass:row2column2 * (cDot2 + bias + gamma * impulse:GetZ())
            impulse:SetZ(impulse:GetZ() + impulse2)
            
            angularVelocityA = angularVelocityA - iA * impulse2
            angularVelocityB = angularVelocityB + iB * impulse2

            temp:SetX(-angularVelocityA * rA:GetY())
            temp:SetY(angularVelocityA * rA:GetX())
            cDot1:SetX(-angularVelocityB * rB:GetY())
            cDot1:SetY(angularVelocityB * rB:GetX())
            cDot1:Add(linearVelocityB):Subtract(linearVelocityA):Subtract(temp)

            Vector2 impulse1
            // mul22ToOutUnsafe in Mat33
            impulse1:SetX(mass:row0column0 * cDot1:GetX() + mass:row0column1 * cDot1:GetY())
            impulse1:SetY(mass:row1column0 * cDot1:GetX() + mass:row1column1 * cDot1:GetY())
            // end mul22ToOutUnsafe from Mat33
            impulse1:SetX(-impulse1:GetX())
            impulse1:SetY(-impulse1:GetY())

            impulse:SetX(impulse:GetX() + impulse1:GetX())
            impulse:SetY(impulse:GetY() + impulse1:GetY())

            linearVelocityA:SetX(linearVelocityA:GetX() - (mA * impulse1:GetX()))
            linearVelocityA:SetY(linearVelocityA:GetY() - (mA * impulse1:GetY()))
            angularVelocityA = angularVelocityA - (iA * rA:CrossProduct(impulse1))
            
            linearVelocityB:SetX(linearVelocityB:GetX() + (mB * impulse1:GetX()))
            linearVelocityB:SetY(linearVelocityB:GetY() + (mB * impulse1:GetY()))
            angularVelocityB = angularVelocityB + (iB * rB:CrossProduct(impulse1))

        else
            temp:SetX(-angularVelocityA * rA:GetY())
            temp:SetY(angularVelocityA * rA:GetX())
            cDot1:SetX(-angularVelocityB * rB:GetY())
            cDot1:SetY(angularVelocityB * rB:GetX())
            cDot1:Add(linearVelocityB):Subtract(linearVelocityA):Subtract(temp)

            number cDot2 = angularVelocityB - angularVelocityA

            Vector3 cDot 
            cDot:Set(cDot1:GetX(), cDot1:GetY(), cDot2)            
            
            Vector3 impulseLocal
            // mulToOutUnsafe in Mat33
            impulseLocal:SetX(cDot:GetX() * mass:row0column0 + cDot:GetY() * mass:row0column1 + cDot:GetZ() * mass:row0column2)
            impulseLocal:SetY(cDot:GetX() * mass:row1column0 + cDot:GetY() * mass:row1column1 + cDot:GetZ() * mass:row1column2)
            impulseLocal:SetZ(cDot:GetX() * mass:row2column0 + cDot:GetY() * mass:row2column1 + cDot:GetZ() * mass:row2column2)
           // end mulToOutUnsafe in Mat33
            impulseLocal:SetX(-impulseLocal:GetX())
            impulseLocal:SetY(-impulseLocal:GetY())
            impulseLocal:SetZ(-impulseLocal:GetZ())
            impulse:Add(impulseLocal)

            P:Set(impulseLocal:GetX(), impulseLocal:GetY())

            linearVelocityA:SetX(linearVelocityA:GetX() - (mA * P:GetX()))
            linearVelocityA:SetY(linearVelocityA:GetY() - (mA * P:GetY()))
            angularVelocityA = angularVelocityA - (iA * (rA:CrossProduct(P) + impulseLocal:GetZ()))           

            linearVelocityB:SetX(linearVelocityB:GetX() + (mB * P:GetX()))
            linearVelocityB:SetY(linearVelocityB:GetY() + (mB * P:GetY()))
            angularVelocityB = angularVelocityB + (iB * (rB:CrossProduct(P) + impulseLocal:GetZ()))

        end    
         
        data:SetAngularVelocity(angularVelocityA, indexA)
        data:SetAngularVelocity(angularVelocityB, indexB)

    end
    
    /*
    This action makes sure that the position constraints on the two items are met.
    Attribute: Parameter data The JointSolverData2D that we are getting the position constraints from.
    Attribute: Returns if the position constraints has been met through this solver.
    */
    action SolvePositionConstraints(JointSolverData2D data) returns boolean
        Vector2 positionA = data:GetPositions():Get(indexA)
        number angleA = data:GetAngles():Get(indexA)
        Vector2 positionB = data:GetPositions():Get(indexB)
        number angleB = data:GetAngles():Get(indexB)

        Vector2 temp 
        Vector2 rALocal
        Vector2 rBLocal

        number mA = inverseMassA
        number mB = inverseMassB
        number iA = inverseInertiaA
        number iB = inverseInertiaB
        
        number sineA = math:Sine(angleA)
        number cosineA = math:Cosine(angleA)
        number sineB = math:Sine(angleB)
        number cosineB = math:Cosine(angleB)

        temp:Set(localAnchorA):Subtract(localCenterA)
        rALocal:SetX(cosineA * temp:GetX() - sineA * temp:GetY())
        rALocal:SetY(sineA * temp:GetX() + cosineA * temp:GetY())

        temp:Set(localAnchorB):Subtract(localCenterB)
        rBLocal:SetX(cosineB * temp:GetX() - sineB * temp:GetY())
        rBLocal:SetY(sineB * temp:GetX() + cosineB * temp:GetY())

        number positionError = 0
        number angularError = 0

        Matrix3 K
        Vector2 c1
        Vector2 p
        
        K:row0column0 = mA + mB + rALocal:GetY() * rALocal:GetY() * iA + rBLocal:GetY() * rBLocal:GetY() * iB
        K:row0column1 = -rALocal:GetY() * rALocal:GetX() * iA - rBLocal:GetY() * rBLocal:GetX() * iB
        K:row0column2 = -rALocal:GetY() * iA - rBLocal:GetY() * iB
        K:row1column0 = K:row0column1 
        K:row1column1 = mA + mB + rALocal:GetX() * rALocal:GetX() * iA + rBLocal:GetX() * rBLocal:GetX() * iB
        K:row1column2 = rALocal:GetX() * iA + rBLocal:GetX() * iB
        K:row2column0 = K:row0column2
        K:row2column1 = K:row1column2
        K:row2column2 = iA + iB

        if frequency > 0
            c1:Set(positionB):Add(rBLocal):Subtract(positionA):Subtract(rALocal)
            
            positionError = c1:Length()
            angularError = 0

            //Solve 22 to out equivalent
            number a11 = K:row0column0
            number a12 = K:row0column1
            number a21 = K:row1column0
            number a22 = K:row1column1
            number det = a11 * a22 - a12 * a21
            if det not= 0
                det = 1 / det
            end
            p:SetX(det * (a22 * c1:GetX() - a12 * c1:GetY()))
            p:SetY(det * (a11 * c1:GetY() - a21 * c1:GetX()))
            //end solve22ToOut

            p:SetX(-p:GetX())
            p:SetY(-p:GetY())

            positionA:SetX(positionA:GetX() - (mA * p:GetX()))
            positionA:SetY(positionA:GetY() - (mA * p:GetY()))
            angleA = angleA - (iA * rALocal:CrossProduct(p))
            
            positionB:SetX(positionB:GetX() + (mB * p:GetX()))
            positionB:SetY(positionB:GetY() + (mB * p:GetY()))
            angleB = angleB + (iB * rBLocal:CrossProduct(p))

        else
            c1:Set(positionB):Add(rBLocal):Subtract(positionA):Subtract(rALocal)
            number c2 = angleB - angleA - referenceAngle

            positionError = c1:Length()
            angularError = math:AbsoluteValue(c2)

            Vector3 c
            Vector3 impulseLocal
            c:Set(c1:GetX(), c1:GetY(), c2)

            //mat33 class action solve33ToOut
            Vector3 column0 
            Vector3 column1
            Vector3 column2
            column0:Set(K:row0column0, K:row1column0, K:row2column0)
            column1:Set(K:row0column1, K:row1column1, K:row2column1)
            column2:Set(K:row0column2, K:row1column2, K:row2column2)

            //cross to out unsafe: column 1 column 2 out = impulseLocal
            impulseLocal:SetX(column1:GetY() * column2:GetZ() - column1:GetZ() * column2:GetY())
            impulseLocal:SetY(column1:GetZ() * column2:GetX() - column1:GetX() * column2:GetZ())
            impulseLocal:SetZ(column1:GetX() * column2:GetY() - column1:GetY() * column2:GetX())

            number det = column0:DotProduct(impulseLocal)
            if det not= 0
                det = 1/det
            end

            //cross to out unsafe: column 1 column 2 out = impulseLocal
            impulseLocal:SetX(column1:GetY() * column2:GetZ() - column1:GetZ() * column2:GetY())
            impulseLocal:SetY(column1:GetZ() * column2:GetX() - column1:GetX() * column2:GetZ())
            impulseLocal:SetZ(column1:GetX() * column2:GetY() - column1:GetY() * column2:GetX())

            number x = det * c:DotProduct(impulseLocal)

            //cross to out unsafe: c column 2 out = impulseLocal
            impulseLocal:SetX(c:GetY() * column2:GetZ() - c:GetZ() * column2:GetY())
            impulseLocal:SetY(c:GetZ() * column2:GetX() - c:GetX() * column2:GetZ())
            impulseLocal:SetZ(c:GetX() * column2:GetY() - c:GetY() * column2:GetX())

            number y = det * column0:DotProduct(impulseLocal)

            //cross to out unsafe: column 1 c out = impulseLocal
            impulseLocal:SetX(column1:GetY() * c:GetZ() - column1:GetZ() * c:GetY())
            impulseLocal:SetY(column1:GetZ() * c:GetX() - column1:GetX() * c:GetZ())
            impulseLocal:SetZ(column1:GetX() * c:GetY() - column1:GetY() * c:GetX())

            number z = det * column0:DotProduct(impulseLocal)

            impulseLocal:Set(x, y, z)
            //end solve33ToOut in Mat33

            impulseLocal:SetX(-impulseLocal:GetX())
            impulseLocal:SetY(-impulseLocal:GetY())
            impulseLocal:SetZ(-impulseLocal:GetZ())

            p:Set(impulseLocal:GetX(), impulseLocal:GetY())

            positionA:SetX(positionA:GetX() - (mA * p:GetX()))
            positionA:SetY(positionA:GetY() - (mA * p:GetY()))
            angleA = angleA - iA * (rALocal:CrossProduct(p) + impulseLocal:GetZ())

            positionB:SetX(positionB:GetX() + (mB * p:GetX()))
            positionB:SetY(positionB:GetY() + (mB * p:GetY()))
            angleB = angleB + iB * (rBLocal:CrossProduct(p) + impulseLocal:GetZ())
        end

        data:SetAngle(angleA, indexA)
        data:SetAngle(angleB, indexB)
        
        return positionError <= 0.005 and angularError <= (2.0 / 180.0 * math:pi)
    end
end