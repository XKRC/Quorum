package Libraries.Game.Physics.Joints

use Libraries.Compute.Vector2
use Libraries.Containers.Array
use Libraries.Game.Physics.TimeStep

/*
This class stores values about the two items that are joined together to send to the joint solver.
*/
class JointSolverData2D 
    //holds information about two bodies to pass to joint solver 

    Array<Vector2> positions
    Array<number> angles
    Array<Vector2> linearVelocities
    Array<number> angularVelocities
    
    TimeStep step

    /*
    This action sets a positions that this joint should be at.
    Attribute: Parameter position The position desired.
    Attribute: Parameter index The object that you want to set, 0 for object A, 1 for object B
    */
    action SetPosition(Vector2 position, integer index)
        positions:Set(index, position)
    end

    /*
    This action sets all of the positions that this joint should be at.
    Attribute: Parameter targetPosition An array that contains the positions that this joint should be at.
    */
    action SetPositions(Array<Vector2> targetPositions)
        positions = targetPositions
    end

    /*
    This action returns all of the positions that this joint should be at.
    Attribute: Returns an array with all of the positions that this joint should be at.
    */
    action GetPositions() returns Array<Vector2>
        return positions
    end

    /*
    This action sets one angle between one object and the other joined by this joint.           
    Attribute: Parameter angle The angle between the two objects.
    Attribute: Parameter index The object that you want to set, 0 for object A, 1 for object B
    */
    action SetAngle(number angle, integer index)
        angles:Set(index, angle)
    end

    /*
    This action sets all of the angles between one object and the other joined by this joint.
    Attribute: Parameter targetAngles An array that contains all of the angles between one object and the other joined by this joint.
    */
    action SetAngles(Array<number> targetAngles)
        angles = targetAngles
    end
    
    /*
    This action returns all of the angles between one object and the other joined by this joint.
    Attribute: Returns an array that contains all of the angles between one object and the other joined by this joint.
    */
    action GetAngles() returns Array<number>
        return angles
    end

    /*
    This action sets one linear velocity of the joint.
    Attribute: Parameter linearVelocity The linear velocity that you want to set.
    Attribute: Parameter index The object that you want to set, 0 for object A, 1 for object B
    */
    action SetLinearVelocity(Vector2 linearVelocity, integer index)
        linearVelocities:Set(index, linearVelocity)
    end

    /*
    This action sets all of the linear velocities of the joint.
    Attribute: Parameter velocities The array that contains all of the linear velocities of the joint.
    */
    action SetLinearVelocities(Array<Vector2> velocities)
        linearVelocities = velocities
    end

    /*
    This action returns all of the linear velocities of the joint.
    Attribute: Returns an array that contains all of the linear velocities of the joint.
    */
    action GetLinearVelocities returns Array<Vector2>
        return linearVelocities
    end

    /*
    This action sets one angular velocity of the joint.
    Attribute: Parameter angularVelocity The angular velocity.
    Attribute: Parameter index The object that you want to set, 0 for object A, 1 for object B
    */
    action SetAngularVelocity(number angularVelocity, integer index)
        angularVelocities:Set(index, angularVelocity)
    end

    /*
    This action sets all of the angular velocities of the joint.
    Attribute: Parameter velocities An array that contains all of the angular velocities of the joint.
    */
    action SetAngularVelocities(Array<number> velocities)
        angularVelocities = velocities
    end
    
    /*
    This action gets all of the angular velocities of the joint.
    Attribute: Returns an array that contains all of the angular velocities of the joint.
    */
    action GetAngularVelocities returns Array<number>
        return angularVelocities
    end

    /*
    This action returns the fraction of a physics step that we should update the
    physics calculation.
    Time is between 0 and 1.
    Attribute: Returns the fraction of a physics step that we should update the
    physics calculation.
    */
    action GetTimeStep returns TimeStep
        return step
    end
    
    /*
    This action sets the fraction of a physics step that we should update the
    physics calculation.
    Time is between 0 and 1.
    Attribute: Parameter timeStep The fraction of a physics step that we should update the
    physics calculation.
    */
    action SetTimeStep(TimeStep timeStep)
        step = timeStep
    end
end