package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D
use Libraries.Containers.Array
use Libraries.Compute.Math  
use Libraries.Compute.Vector3 

/*
This class stores information of how much a 3D joint (so that the body can slide along an axis and also rotate around this axis) can slide and rotate.
*/ 
class TranslationalLimitMotor3D

    Math math
    Vector3 lowerLimit 
    Vector3 upperLimit 
    Vector3 accumulatedImpulse
	
    number limitSoftness = 0.7
    number damping = 0.1
    number restitution = 0.5

    Array<boolean> enableMotor /*[3]*/
    Vector3 targetVelocity
    Vector3 maxMotorForce
    Vector3 maxLimitForce
    Vector3 currentLimitError
    Vector3 currentLinearDiff
    Array<integer> currentLimit /*[3]*/
      
    on create
        maxMotorForce:Set(0.1, 0.1, 0.1)
        maxLimitForce:Set(300.0, 300.0, 300.0)
        repeat 3 times
            enableMotor:Add(false)
            currentLimit:Add(0)
        end
    end 
    
    /*
    This action sets the values inside this TranslationalLimitMotor3D using another TranslationalLimitMotor3D.
    Attribute: Parameter other The other TranslationalLimitMotor3D.
    */
    action Set(TranslationalLimitMotor3D other) 
	lowerLimit:Set(other:GetLowerLimit())
	upperLimit:Set(other:GetUpperLimit())
	accumulatedImpulse:Set(other:GetAccumulatedImpulse())

	limitSoftness = other:GetLimitSoftness()
	damping = other:GetDamping()
	restitution = other:GetRestitution()
    end    

    /*
    This action lets you know if any of the sliding has been limited.
    Attribute: Parameter limitIndex The indicator of which axis you want to check, 0 for x, 1 for y, and 2 for z.
    Attrubute: Returns 0 there is no limit, 1 the axis that you are checking has a limit set.
    */
    action IsLimited(integer limitIndex) returns boolean
        if limitIndex = 0
            return upperLimit:GetX() >= lowerLimit:GetX()
        elseif limitIndex = 1
            return upperLimit:GetY() >= lowerLimit:GetY()
        elseif limitIndex = 2
            return upperLimit:GetZ() >= lowerLimit:GetZ()    
	end
        return false
    end   

    /*
    This action tells you whether you need to apply forces to the objects that is constrained by this joint.
    Attribute: Parameter index The axis that you want to check, 0 for x, 1 for y, and 2 for z.
    Attribute: Returns 0 for you don't need to apply forces on the axis that you check, 1 you do need to apply forces.
    */
    action NeedApplyForces(integer index) returns boolean
        if currentLimit:Get(index) = 0 and enableMotor:Get(index) = false
            return false
        end
        return true
    end

    /*
    This action tests whether the current position of the object is within the limit of the range of how much that object can slide.
    Attribute: Parameter limitIndex 0, 1, 2 that denotes x, y, or z coordinate.
    Attribute: Parameter testValue The current position of the object in either 0, 1, or 2 direction.
    Attribute: Returns 0 if the limits aren't set in the first place or test value is within limit, 1 if test value is lower than the lowest limit, 2 if the test value is higher than the highest limit.
    */
    action TestLimitValue(integer limitIndex, number testValue) returns integer
        number loLimit = 0
        number hiLimit = 0

        if limitIndex = 0
            loLimit = lowerLimit:GetX()
            hiLimit = upperLimit:GetX()
        elseif limitIndex = 1
            loLimit = lowerLimit:GetY()
            hiLimit = upperLimit:GetY()
        elseif limitIndex = 2
            loLimit = lowerLimit:GetZ()
            hiLimit = upperLimit:GetZ()  
        end
        if loLimit > hiLimit
            currentLimit:Set(limitIndex, 0)
            if limitIndex = 0
                currentLimitError:SetX(0)
            elseif limitIndex = 1
                currentLimitError:SetY(0)
            elseif limitIndex = 2
                currentLimitError:SetZ(0)   
            end
            return 0
        end

        if testValue < loLimit
            currentLimit:Set(limitIndex, 2)
            if limitIndex = 0
                currentLimitError:SetX(testValue - loLimit)
            elseif limitIndex = 1
                currentLimitError:SetY(testValue - loLimit)
            elseif limitIndex = 2
                currentLimitError:SetZ(testValue - loLimit)   
            end
            return 2
        elseif testValue > hiLimit
            currentLimit:Set(limitIndex, 1)
            if limitIndex = 0
                currentLimitError:SetX(testValue - hiLimit)
            elseif limitIndex = 1
                currentLimitError:SetY(testValue - hiLimit)
            elseif limitIndex = 2
                currentLimitError:SetZ(testValue - hiLimit)   
            end
            return 1
        end

        currentLimit:Set(limitIndex, 0)
        if limitIndex = 0
            currentLimitError:SetX(0)
        elseif limitIndex = 1
            currentLimitError:SetY(0)
        elseif limitIndex = 2
            currentLimitError:SetZ(0)   
        end
        return 0
    end

    /*
    This action makes sure that the bodies joined together by this TranslationalLimitMotor is at where they are supposed to be.
    Attribute: Returns the velocity that you want to add to the current velocity to make sure that the slider is within the position range that we want it to be.
    */
    action SolveLinearAxis(number timeStep, number jacDiagABInv, Item3D body1, Vector3 pointInA, Item3D body2, Vector3 pointInB, integer limitIndex, Vector3 axisNormalOnA, Vector3 anchorPos) returns number
	Vector3 tmp
	Vector3 tmpVec
		
	Vector3 relativePosition1
        tmpVec:Set(anchorPos)
	relativePosition1:Set(tmpVec:Subtract(body1:GetCenterOfMassPosition()))

	Vector3 relativePosition2
        tmpVec:Set(anchorPos)
	relativePosition2:Set(tmpVec:Subtract(body2:GetCenterOfMassPosition()))

	Vector3 velocity1         
	Vector3 velocity2        
	Vector3 velocity

        velocity1:Set(body1:GetLinearVelocityAtLocalPoint(relativePosition1))
        velocity2:Set(body2:GetLinearVelocityAtLocalPoint(relativePosition2))
	velocity:Set(velocity1:Subtract(velocity2)) //Note that velocity1 has changed!

	number relativeVelocity = axisNormalOnA:DotProduct(velocity)
        number localTargetVelocity = 0
        number localMaxMotorForce = 0
        number limitError = 0

        if limitIndex = 0
            localTargetVelocity = targetVelocity:GetX()
            localMaxMotorForce = maxMotorForce:GetX()
            limitError = currentLimitError:GetX()
        elseif limitIndex = 1
            localTargetVelocity = targetVelocity:GetY()
            localMaxMotorForce = maxMotorForce:GetY()
            limitError = currentLimitError:GetY()
        elseif limitIndex = 2
            localTargetVelocity = targetVelocity:GetZ()
            localMaxMotorForce = maxMotorForce:GetZ() 
            limitError = currentLimitError:GetZ()
        end
        
        if currentLimit:Get(limitIndex) not= 0
            localTargetVelocity = restitution * limitError / (timeStep)
            if limitIndex = 1
                localMaxMotorForce = maxLimitForce:GetY()
            elseif limitIndex = 2
                localMaxMotorForce = maxLimitForce:GetZ() 
            end
        end
	localMaxMotorForce = localMaxMotorForce * timeStep

        // correction velocity
	number motorRelvel = limitSoftness * (localTargetVelocity - damping * relativeVelocity)
	if motorRelvel < 1.19209290 * (math:RaiseToPower(10, -07)) and motorRelvel > -1.19209290 * (math:RaiseToPower(10, -07))
            return 0
	end
                
        // correction impulse
	number unclippedMotorImpulse = motorRelvel * jacDiagABInv

	// clip correction impulse
	number clippedMotorImpulse = 0

	if unclippedMotorImpulse > 0
            if unclippedMotorImpulse > localMaxMotorForce
                clippedMotorImpulse =  localMaxMotorForce 
            else
                clippedMotorImpulse = unclippedMotorImpulse
            end
	else 
            if unclippedMotorImpulse < -localMaxMotorForce
                clippedMotorImpulse = -localMaxMotorForce 
            else
                clippedMotorImpulse = unclippedMotorImpulse
            end
	end

        number normalImpulse = clippedMotorImpulse

        // sort with accumulated impulses
	number lo = -math:RaiseToPower(10, 30)
	number hi = math:RaiseToPower(10, 30)
	number oldNormalImpulse = 0

        if limitIndex = 0
            oldNormalImpulse = accumulatedImpulse:GetX()
        elseif limitIndex = 1
            oldNormalImpulse = accumulatedImpulse:GetY()
        elseif limitIndex = 2
            oldNormalImpulse = accumulatedImpulse:GetZ()
        end

	number sum = oldNormalImpulse + normalImpulse

        if limitIndex = 0
            if sum > hi
                accumulatedImpulse:SetX(0)
            elseif sum < lo
                accumulatedImpulse:SetX(0)
            else
                accumulatedImpulse:SetX(sum)
            end
        elseif limitIndex = 1
            if sum > hi
                accumulatedImpulse:SetY(0)
            elseif sum < lo
                accumulatedImpulse:SetY(0)
            else
                accumulatedImpulse:SetY(sum)
            end
        elseif limitIndex = 2
            if sum > hi
                accumulatedImpulse:SetZ(0)
            elseif sum < lo
                accumulatedImpulse:SetZ(0)
            else
                accumulatedImpulse:SetZ(sum)
            end
        end        
        if limitIndex = 0
            normalImpulse = accumulatedImpulse:GetX() - oldNormalImpulse
        elseif limitIndex = 1
            normalImpulse = accumulatedImpulse:GetY() - oldNormalImpulse
        elseif limitIndex = 2
            normalImpulse = accumulatedImpulse:GetZ() - oldNormalImpulse
        end        
	Vector3 impulseVector
        impulseVector:Set(axisNormalOnA)
	impulseVector:Scale(normalImpulse)
        body1:ApplyLinearImpulse(impulseVector, relativePosition1)
	tmp:Set(-impulseVector:GetX(), -impulseVector:GetY(), -impulseVector:GetZ())
	body2:ApplyLinearImpulse(tmp, relativePosition2)
	return normalImpulse
    end 
    
    /*
    This action sets the total amount of impulse that is applied to the objects to make sure that this joint stays intact. 
    Attribute: Parameter x The x direction of impulse.
    Attribute: Parameter y The y direction of impulse.
    Attribute: Parameter z The z direction of impulse.
    */
    action SetAccumulatedImpulse(number x, number y, number z)
        accumulatedImpulse:Set(x, y, z)
    end

    /*
    This action returns the minimum position that the sliding object can be at.
    Attribute: Returns the minimum position that the sliding object can be at.
    */
    action GetLowerLimit() returns Vector3
        return lowerLimit
    end

    /*
    This action sets the minimum position that the sliding object can be at.
    Attribute: Parameter limit The minimum position that the sliding object can be at.
    */
    action SetLowerLimit(Vector3 limit)
        lowerLimit:Set(limit)
    end
    
    /*
    This action returns the maximum position that the sliding object can be at.
    Attribute: Returns the maximum position that the sliding object can be at.
    */
    action GetUpperLimit() returns Vector3
        return upperLimit
    end

    /*
    This action sets the maximum position that the sliding object can be at.
    Attribute: Parameter limit The maximum position that the sliding object can be at.
    */
    action SetUpperLimit(Vector3 limit)
        upperLimit:Set(limit)
    end

    /*
    This action returns how much impulse has been applied to the object because of this joint.
    Attribute: Returns how much impulse has been applied to the object because of this joint.
    */
    action GetAccumulatedImpulse() returns Vector3
        return accumulatedImpulse
    end

    /*
    This action returns how much you care about if the slider goes out of the range of the position limit.
    A number that is closer to 1 means that you really don't want the slider to go out of the range.
    A number that is closer to 0 means that you don't care if the slider goes out of the position limit.
    Attribute: Returns the limit softness value.
    */
    action GetLimitSoftness() returns number
        return limitSoftness
    end

    /*
    This action returns how fast you want the slider to stop oscillating when the slider is trying to reach the target position.
    A number that is closer to 1 means that you don't want the slider to ever oscillate.
    A number that is closer to 0 means that you are allowing the slider to oscillate forever in the extreme case.
    Attribute: Returns the damping value.
    */
    action GetDamping() returns number
        return damping
    end

    /*
    This action returns a number that tells you how fast you would want the slider to correct its velocity.
    0 means that you will ignore the velocity error between the slider and our desired velocity for the slider to go, 1 means that 
    you want to correct the velocity right away.
    Attribute: Returns how fast you would want the slider to correct its velocity.
    */
    action GetRestitution() returns number
        return restitution
    end

    /*
    This action returns how far you are from the range of the positions that the slider can be in.
    Attribute: Returns the position error.
    */
    action GetCurrentLinearDiff() returns Vector3
        return currentLinearDiff
    end
    
    /*
    This action sets how far you are from the range of the positions that the slider can be in.
    Attribute: Parameter diff The position error.
    */
    action SetCurrentLinearDiff(Vector3 diff) 
        currentLinearDiff:Set(diff)
    end
end

