package Libraries.Game.Physics.Joints

use Libraries.Compute.Vector2
use Libraries.Interface.Item2D
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Compute.Math

/*
This action records a joint that sets a fixed distance between two objects.
The two objects are not allowed to oscillate relative to each other but a straight rope
can become a curved rope with the rope maximum length not changed.
*/
class RopeJoint2D is Joint2D
    Vector2 localAnchorA
    Vector2 localAnchorB
    number maximumLength = 0
    number length = 0
    number impulse = 0

    on create
        parent:Joint2D:SetType(parent:Joint2D:ROPEJOINT)
        localAnchorA:Set(-1.0, 0.0)
        localAnchorB:Set(1.0, 0.0)
        parent:Joint2D:SetState(parent:Joint2D:INACTIVE)
    end

    integer indexA = 0 //Look at including this based on how island handles
    //positions and velocities (in arrays?)
    integer indexB = 0
    Vector2 u
    Vector2 rA
    Vector2 rB
    Vector2 localCenterA
    Vector2 localCenterB
    number inverseMassA = 0
    number inverseMassB = 0
    number inverseInertiaA = 0
    number inverseInertiaB = 0
    number mass = 0
    Math math

    /*
    This action stores the variables passed in inside this RopeJoint2D.
    Attribute: Parameter itemA The first item joined inside this joint.
    Attribute: Parameter itemB The second item joined inside this joint.
    Attribute: Parameter anchorA The point that the first item will rotate about, but the whole system of objects A and B can move as they please.
    Attribute: Parameter anchorB The point that the second item will rotate about, but the whole system of objects A and B can move as they please.
    Attribute: Parameter maxLength The maximum length of the rope.
    */
    action Initialize(Item2D itemA, Item2D itemB, Vector2 anchorA, Vector2 anchorB, number maxLength) 
        parent:Joint2D:itemA = itemA
        parent:Joint2D:itemB = itemB
        localAnchorA:Set(parent:Joint2D:itemA:GetLocalPoint(anchorA))
        localAnchorB:Set(parent:Joint2D:itemB:GetLocalPoint(anchorB))
        maximumLength = maxLength       
    end

    /*
    This action sends in velocity constraints to a JointSolverData2D so that a joint solver can solve for the limitations that this joint has exerted on the two objects.
    Attribute: Parameter data The JointSolverData2D that we are going to store the velocity constraints to.
    */
    action InitializeVelocityConstraints(JointSolverData2D data)
        indexA = parent:Joint2D:itemA:GetCollisionGroupIndex()
        indexB = parent:Joint2D:itemB:GetCollisionGroupIndex()
        localCenterA = parent:Joint2D:itemA:GetLocalCenter()
        localCenterB = parent:Joint2D:itemB:GetLocalCenter()
        inverseMassA = parent:Joint2D:itemA:GetInverseMass()
        inverseMassB = parent:Joint2D:itemB:GetInverseMass()
        inverseInertiaA = parent:Joint2D:itemA:GetInverseInertia()
        inverseInertiaB = parent:Joint2D:itemB:GetInverseInertia()

        Vector2 positionA = data:GetPositions():Get(indexA)
        number angleA = data:GetAngles():Get(indexA)
        Vector2 linearVelocityA = data:GetLinearVelocities():Get(indexA)
        number angularVelocityA = data:GetAngularVelocities():Get(indexA)
        
        Vector2 positionB = data:GetPositions():Get(indexB)
        number angleB = data:GetAngles():Get(indexB)
        Vector2 linearVelocityB = data:GetLinearVelocities():Get(indexB)
        number angularVelocityB = data:GetAngularVelocities():Get(indexB)
        Vector2 temp
        
        number sineA = math:Sine(angleA)
        number cosineA = math:Cosine(angleA)
        number sineB = math:Sine(angleB)
        number cosineB = math:Cosine(angleB)

        temp:Set(localAnchorA):Subtract(localCenterA)
        rA:SetX(cosineA * temp:GetX() - sineA * temp:GetY())
        rA:SetY(sineA * temp:GetX() + cosineA * temp:GetY())

        temp:Set(localAnchorB):Subtract(localCenterB)
        rB:SetX(cosineB * temp:GetX() - sineB * temp:GetY())
        rB:SetY(sineB * temp:GetX() + cosineB * temp:GetY())

        u:Set(positionB):Add(rB):Subtract(positionA):Subtract(rA)

        length = u:Length()
       
        number diffFromMaxLength = length - maximumLength
        if (diffFromMaxLength > 0.0)
            parent:Joint2D:SetState(parent:Joint2D:AT_UPPER)
        else 
            parent:Joint2D:SetState(parent:Joint2D:INACTIVE)
        end
        
        if (length > 0.005)
            u:Scale(1.0 / length)
        else
            u:SetZero()
            mass = 0.0
            impulse = 0.0
            return now
        end

        number crossA = temp:Set(rA):CrossProduct(u)
        number crossB = temp:Set(rB):CrossProduct(u)
        number inverseMass = inverseMassA + inverseInertiaA * crossA * crossA 
                                + inverseMassB + inverseInertiaB * crossB * crossB

        if inverseMass not= 0.0
            mass = 1.0 / inverseMass
        else 
            mass = 0.0
        end

        if data:GetTimeStep():IsWarmStarting()
            impulse = impulse * data:GetTimeStep():GetTimeStepRatio()
                
            number pX = impulse * u:GetX()
            number pY = impulse * u:GetY()
            linearVelocityA:SetX(linearVelocityA:GetX() - (inverseMassA * pX))
            linearVelocityA:SetY(linearVelocityA:GetY() - (inverseMassA * pY))
            angularVelocityA = angularVelocityA - (inverseInertiaA * (rA:GetX() * pY - rA:GetY() * pX))

            linearVelocityB:SetX(linearVelocityB:GetX() + (inverseMassB * pX))
            linearVelocityB:SetY(linearVelocityB:GetY() + (inverseMassB * pY))
            angularVelocityB = angularVelocityB + (inverseInertiaB * (rB:GetX() * pY - rB:GetY() * pX))
        else
            impulse = 0.0
        end

            data:SetAngularVelocity(angularVelocityA, indexA)
            data:SetAngularVelocity(angularVelocityB, indexB)         
    end
    
    /*
    This action makes sure that the velocity constraints on the two items joined together are met.
    Attribute: Parameter data The JointSolverData2D that we are getting the velocity constraints from.
    */
    action SolveVelocityConstraints(JointSolverData2D data)
        Vector2 linearVelocityA = data:GetLinearVelocities():Get(indexA)
        number angularVelocityA = data:GetAngularVelocities():Get(indexA)
        Vector2 linearVelocityB = data:GetLinearVelocities():Get(indexB)
        number angularVelocityB = data:GetAngularVelocities():Get(indexB)

        Vector2 vpA
        Vector2 vpB
        Vector2 temp

        vpA:SetX(-angularVelocityA * rA:GetY())
        vpA:SetY(angularVelocityA * rA:GetX())
        vpA:Add(linearVelocityA)

        vpB:SetX(-angularVelocityB * rB:GetY())
        vpB:SetY(angularVelocityB * rB:GetX())
        vpB:Add(linearVelocityB)

        temp = temp:Set(vpB):Subtract(vpA)
        number c = length - maximumLength
        number cDot = u:DotProduct(temp)
        
        //Predictive constraints
        if c < 0
            cDot = cDot + data:GetTimeStep():GetInverseTimeStep() * c
        end
        
        number impulseLocal = -mass * cDot
        number oldImpulse = impulse
        if impulse + impulseLocal < 0.0
            impulse = impulse + impulseLocal
        else 
            impulse = 0.0
        end
        impulseLocal = impulse - oldImpulse
        
        number pX = impulseLocal * u:GetX()
        number pY = impulseLocal * u:GetY()
        linearVelocityA:SetX(linearVelocityA:GetX() - (inverseMassA * pX))
        linearVelocityA:SetY(linearVelocityA:GetY() - (inverseMassA * pY))
        angularVelocityA = angularVelocityA - (inverseInertiaA * ( rA:GetX() * pY - rA:GetY() * pX))
        linearVelocityB:SetX(linearVelocityB:GetX() + (inverseMassB * pX))
        linearVelocityB:SetY(linearVelocityB:GetY() + (inverseMassB * pY))
        angularVelocityB = angularVelocityB + (inverseInertiaB * ( rB:GetX() * pY - rB:GetY() * pX))

        data:SetAngularVelocity(angularVelocityA, indexA)
        data:SetAngularVelocity(angularVelocityB, indexB)
    end

    /*
    This action makes sure that the position constraints on the two items are met.
    Attribute: Parameter data The JointSolverData2D that we are getting the position constraints from.
    Attribute: Returns false if the position constraints are not met, true if the solver successfully met the position constraints.
    */
    action SolvePositionConstraints (JointSolverData2D data) returns boolean
        Vector2 positionA = data:GetPositions():Get(indexA)
        number angleA = data:GetAngles():Get(indexA)
        Vector2 positionB = data:GetPositions():Get(indexB)
        number angleB = data:GetAngles():Get(indexB)

        Vector2 localu
        Vector2 localrA
        Vector2 localrB
        Vector2 temp

        number sineA = math:Sine(angleA)
        number cosineA = math:Cosine(angleA)
        number sineB = math:Sine(angleB)
        number cosineB = math:Cosine(angleB)

        temp:Set(localAnchorA):Subtract(localCenterA)
        localrA:SetX(cosineA * temp:GetX() - sineA * temp:GetY())
        localrA:SetY(sineA * temp:GetX() + cosineA * temp:GetY())

        temp:Set(localAnchorB):Subtract(localCenterB)
        localrB:SetX(cosineB * temp:GetX() - sineB * temp:GetY())
        localrB:SetY(sineB * temp:GetX() + cosineB * temp:GetY())

        localu:Set(positionB):Add(localrB):Subtract(positionA):Subtract(localrA)

        number localLength = localu:Length()
        localu:Normalize()
        
        number diffFromMaxLength = localLength - maximumLength
        if diffFromMaxLength < 0 
            diffFromMaxLength = 0
        end
        if diffFromMaxLength > 0.2
            diffFromMaxLength = 0.2
        end

        number localImpulse = -mass * diffFromMaxLength
        number pX = localImpulse * localu:GetX()
        number pY = localImpulse * localu:GetY()

        positionA:SetX( positionA:GetX() - (inverseMassA * pX))
        positionA:SetY( positionA:GetY() - (inverseMassA * pY))
        angleA = angleA - (inverseInertiaA * (localrA:GetX() * pY - localrA:GetY() * pX))
        
        positionB:SetX( positionB:GetX() + (inverseMassB * pX))
        positionB:SetY( positionB:GetY() + (inverseMassB * pY))
        angleB = angleB + (inverseInertiaB * (localrB:GetX() * pY - localrB:GetY() * pX))
 
        data:SetAngle(angleA, indexA)
        data:SetAngle(angleB, indexB)

        return localLength - maximumLength < 0.005    
    end

    /*
    This action returns where the rope will be attached to the first object seen from the perspective of the first object.
    Attribute: Returns where the rope will be attached to the first object seen from the perspective of the first object.
    */
    action GetLocalAnchorA returns Vector2
        return localAnchorA
    end

    /*
    This action sets where the rope will be attached to the first object seen from the perspective of the first object.
    Attribute: Parameter localAnchor Where the rope will be attached to the first object seen from the perspective of the first object.
    */
    action SetLocalAnchorA(Vector2 localAnchor)
        localAnchorA = localAnchor
    end

    /*
    This action returns where the rope will be attached to the second object seen from the perspective of the second object.
    Attribute: Returns where the rope will be attached to the second object seen from the perspective of the second object.
    */
    action GetLocalAnchorB returns Vector2
        return localAnchorB
    end

    /*
    This action sets where the rope will be attached to the second object seen from the perspective of the second object.
    Attribute: Parameter localAnchor Where the rope will be attached to the second object seen from the perspective of the second object.
    */
    action SetLocalAnchorB(Vector2 localAnchor)
        localAnchorB = localAnchor
    end

    /*
    This action returns the maximum length of the rope.
    Attribute: Returns the maximum length of the rope.
    */
    action GetMaxLength returns number
        return maximumLength
    end

    /*
    This action sets the maximum length of the rope.
    Attribute: Parameter maxLength The maximum length of the rope.
    */
    action SetMaxLength(number maxLength)
        maximumLength = maxLength
    end

    /*
    This action returns where the rope will be attached to the first object in global coordinates.
    Attribute: Returns where the rope will be attached to the first object in global coordinates.
    */
    action GetAnchorA returns Vector2
        return parent:Joint2D:itemA:GetWorldPoint(localAnchorA)
    end

    /*
    This action sets where the rope will be attached to the first object in global coordinates.
    Attribute: Parameter anchor Where the rope will be attached to the first object in global coordinates.
    */
    action SetAnchorA(Vector2 anchor)
        localAnchorA:Set(parent:Joint2D:itemA:GetLocalPoint(anchor))
    end

    /*
    This action returns where the rope will be attached to the second object in global coordinates.
    Attribute: Returns where the rope will be attached to the second object in global coordinates.
    */
    action GetAnchorB returns Vector2
        return parent:Joint2D:itemB:GetWorldPoint(localAnchorB)
    end

    /*
    This action sets where the rope will be attached to the second object in global coordinates.
    Attribute: Parameter anchor Where the rope will be attached to the second object in global coordinates.
    */
    action SetAnchorB(Vector2 anchor)
        localAnchorB:Set(parent:Joint2D:itemB:GetLocalPoint(anchor))
    end

    
    /*
    This action returns the amount of force that is exerted on the two items joined together because of the joint constraints. 
    Attribute: Parameter inverseTimeStep The reciprocal of the inverse of the time step.
    Attribute: Returns the reaction force.
    */ 
    action GetReactionForce(number inverseTimeStep) returns Vector2
        Vector2 temp
        temp:Set(u):Scale(inverseTimeStep):Scale(impulse)
        return temp        
    end

    /*
    This action returns 0 for RopeJoint2D because a rope joint will not rotate the objects.
    Attribute: Parameter inverseTimeStep The reciprocal of the inverse of the time step.
    Attribute: Returns the reaction torque.
    */
    action GetReactionTorque(number inverseTimeStep) returns number
        return 0
    end



end