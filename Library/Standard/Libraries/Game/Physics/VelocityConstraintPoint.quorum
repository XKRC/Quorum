package Libraries.Game.Physics

use Libraries.Compute.Vector2

/*
This class is used internally by CollisionSolver2D.
*/
class VelocityConstraintPoint 
    Vector2 radiusA
    Vector2 radiusB
    number normalImpulse = 0
    number tangentImpulse = 0
    number normalMass = 0
    number tangentMass = 0
    number velocityBias = 0     //bias factor for the velocity constraint, range:[0,1]

    /*
    This action returns the effective radius of object A.
    Attribute: Returns the effective radius of object A.
    */
    action GetRadiusA returns Vector2
        return radiusA
    end

    /*
    This action sets the effective radius of object A.
    Attribute: Parameter radius The effective radius of object A.
    */
    action SetRadiusA(Vector2 radius)
        me:radiusA = radius
    end

    /*
    This action returns the effective radius of object B.
    Attribute: Returns the effective radius of object B.
    */
    action GetRadiusB returns Vector2
        return radiusB
    end

    /*
    This action sets the effective radius of object B.
    Attribute: Parameter radius The effective radius of object B.
    */
    action SetRadiusB(Vector2 radius)
        me:radiusB = radius
    end

    /*
    This action returns the normal impulse.
    Attribute: Returns the magnitude of the impulse that should be applied to separate the two objects in collision.
    */
    action GetNormalImpulse returns number
        return normalImpulse
    end

    /*
    This action sets the normal impulse.
    Attribute: Parameter normalImpulse The magnitude of the impulse that should be applied to separate the two objects in collision.
    */
    action SetNormalImpulse(number impulse)
        me:normalImpulse = impulse
    end

    /*
    This action returns the tangential impulse.
    Attribute: Returns the magnitude of impulse that should be applied to simulate the friction between the two objects during collision.
    */
    action GetTangentImpulse returns number
        return tangentImpulse
    end

    /*
    This action sets the tangential impulse.
    Attribute: Parameter tangentImpulse The magnitude of impulse that should be applied to simulate the friction between the two objects during collision.
    */
    action SetTangentImpulse(number impulse)
        me:tangentImpulse = impulse
    end

    /*
    This action returns the effective mass of the object in the normal direction.
    Attribute: Returns the effective mass of the object in the normal direction.
    */
    action GetNormalMass returns number
        return normalMass
    end

    /*
    This action sets the effective mass of the object in the normal direction.
    Attribute: Parameter mass the effective mass of the object in the normal direction.
    */
    action SetNormalMass(number mass)
        me:normalMass = mass
    end

    /*
    This action returns the effective mass of the object in the tangent direction.
    Attribute: Returns the effective mass of the object in the tangent direction.
    */
    action GetTangentMass returns number
        return tangentMass
    end

    /*
    This action sets the effective mass of the object in the tangent direction.
    Attribute: Parameter mass the effective mass of the object in the tangent direction.
    */
    action SetTangentMass(number mass)
        me:tangentMass = mass
    end

    /*
    This action returns the velocity to subtract from the actual velocity of the object
    to improve calculations.
    Attribute: Returns velocity bias.
    */
    action GetVelocityBias returns number
        return velocityBias
    end

    /*
    This action sets the velocity to subtract from the actual velocity of the object
    to improve calculations.
    Attribute: Parameter bias The velocity bias.
    */
    action SetVelocityBias(number bias)
        me:velocityBias = bias
    end
end