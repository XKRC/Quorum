package Libraries.Game.Physics

use Libraries.Compute.Vector2
use Libraries.Game.Collision.CollisionEdge2D
use Libraries.Game.Collision.BroadphaseCollision2D
use Libraries.Interface.Item2D
use Libraries.Game.Collision.Sweep2D
use Libraries.Game.Collision.PhysicsPosition2D

/*
This class is a property holder for a 2D mass. This class is used internally 
by Item2D class.
*/
class PhysicsProperties2D 
    public constant integer UNMOVABLE = 0       //static object
    public constant integer NON_RESPONSIVE = 1  //object governed by kinematics (meaning, the object is affected by linear velocity and angular velocity settings)
    public constant integer RESPONSIVE = 2      //object governed by dynamics (meaning, the object is affect by force and torque applied to it)

    Vector2 linearVelocity      //linear velocity of the center of mass of the 2D object in global coordinates[Units: m/s]
    number angularVelocity = 0  //angular velocity of the 2D object about the COM [Units: rad/s]
    Vector2 force               //force being applied to the 2D object in global coordinates [Units:N]
    number torque = 0           //torque being applied to the 2D object [Units: Nm]
    number mass = 0             //mass of the 2D object [Units: kg]
    number inverseMass = 0      //1/mass of the 2D object [Units: 1/kg]
    number inertia = 0          //mass moment of inertia about the center of mass [Units: kgm^2]
    number inverseInertia = 0   //1/inertia [Units: 1/(kgm^2)]
    number linearDamping = 0    //how easily is for this object to slow down its linear velocity just by existing in a physics governed world
                                //usually, you want to keep this between [0.0,1.0]
    number angularDamping = 0   //how easily is for this object to slow down its angular velocity just by existing in a physics governed world
                                //usually, you want to keep this between [0.0,1.0]
    number density = 0          //density of the 2D object [Units: kg/m^3]
    number friction = 0         //friction associated with the 2D object, since friction only makes sense between surfaces, this is used to calculate a new friction when two objects collide
    number restitution = 0      //restitution associated with the 2D object, since restitution only makes sense between surfaces, this is used to calculate a new restitution when two objects collide

    number sleepTime = 0        //the amount of time this 2D object will go to sleep 

    integer type = UNMOVABLE    //by default, objects are static

    boolean collisionGroupFlag = false  //this is for collision filtering
    integer collisionGroupIndex = 0     //if two items have the same positive group index, then that means they always collide
                                        //if two items have the same negative group index, then that means they never collide

    boolean simulated = true
    boolean simulationRequired = false
    boolean fastMoving = false
    boolean canRotate = true
    boolean timeOfImpactFlag = false

    boolean massSet = false

    Item2D item = undefined             //the 2D item that is attached to the physics property


    /*
    This action attaches a 2D item, which includes the shape, friction, 
    restitution, positions, and others of a 2D object as a part of the properties
    that this 2D item has.
    This action is used internally in the Item2D class when you enable
    physics on the item when a "PhysicsProperties2D" property holder will be 
    created so that Item2D will be attached to that property holder and the
    property holder will be attached to the Item2D.
    Attribute: Parameter item The other Item2D to be copied from.
    */
    action SetItem(Item2D item)
        me:item = item

        //get the current location of the 2D item
        Sweep2D sweep = item:GetSweep()

        //if this item is not supposed to be moving
        if me:type = UNMOVABLE
            linearVelocity:SetZero()    //static condition
            angularVelocity = 0         //static condition
            //since center0, angle0 is what will be drawn to the screen
            //so update those of the object to be where the current physics 
            //wants the object to be
            sweep:SetAngle0(sweep:GetAngle())  
            sweep:GetCenter0():Set(sweep:GetCenter())

            //if the item will actually be drawn on the screen
            if item:GetLayer() not= undefined
                item:SynchronizeNodes()  //synchronize the item's position with the position recorded in the dynamic bounding volume tree for broadphase collision detection
            end
        end

        //if the item will actually be drawn on the screen
        if item:GetLayer() not= undefined
            CollisionEdge2D edge = item:GetCollisionList()   //get the head of the doubly linked list that has the records of what the "item" is in contact with
            
            repeat while edge not= undefined   //while there are still nodes left in the doubly linked list
                CollisionEdge2D edge0 = edge
                edge = edge:GetNext()
                item:GetLayer():GetCollisionManager():Destroy(edge0:GetCollision())  //destroy the collision event that involves the "item" and another Item2D
            end

            item:SetCollisionList(undefined)  //reset the head of the collision list

            
            BroadphaseCollision2D broadphase = item:GetLayer():GetCollisionManager():GetBroadphase()
            integer i = 0
            repeat while i < item:GetNodeCount()
                broadphase:TouchNode(item:GetNodes():Get(i):GetNodeID())        
                i = i + 1
            end
        end

        //calculate the density of the item
        if not massSet
            SetDensity(mass / item:GetShape():ComputeArea())
        end

        item:ResetMass()
    end


    /*
    This action returns the Item2D that is attached to this physical properties.
    Attribute: Returns the Item2D that is has this physical properties.
    */
    action GetItem returns Item2D
        return item
    end


    /*
    This action allows another PhysicsProperties2D object to be assigned by
    the values stored inside the current PhysicsProperties2D object.
    Attribute: Returns another PhysicsProperties2D that has the same value as the current PhysicsProperties2D.
    */
    action Copy returns PhysicsProperties2D
        PhysicsProperties2D new
        new:linearVelocity = linearVelocity:Copy()
        new:angularVelocity = angularVelocity
        new:force = force:Copy()
        new:torque = torque
        new:mass = mass
        new:inverseMass = inverseMass
        new:inertia = inertia
        new:inverseInertia = inverseInertia
        new:linearDamping = linearDamping
        new:angularDamping = angularDamping
        new:density = density
        new:friction = friction
        new:restitution = restitution
        new:sleepTime = sleepTime
        new:type = type
        new:collisionGroupFlag = collisionGroupFlag
        new:collisionGroupIndex = collisionGroupIndex
        new:simulated = simulated
        new:simulationRequired = simulationRequired
        new:fastMoving = fastMoving
        new:canRotate = canRotate
        new:timeOfImpactFlag = timeOfImpactFlag
        new:massSet = massSet
        
        return new
    end


    /*
    This action sets the linear velocity of the 2D object.
    Attribute: Parameter linearVelocity The linear velocity of the 2D object.
    */
    action SetLinearVelocity(Vector2 linearVelocity)
        if type = UNMOVABLE
            // static bodies don't move - hence don't have velocity
            return now
        end

        //kinematic or dynamic bodies can move
        me:linearVelocity:Set(linearVelocity)
        //make sure the kinematic or dynamic bodies will be simulated to the screen
        if not simulated and (me:linearVelocity:GetX() not= 0 or me:linearVelocity:GetY() not= 0)
            Simulate(true)
        end
    end

    /*
    This action sets the x component of the linear velocity of the 2D object.
    Attribute: Parameter linearVelocityX The x component of the linear velocity of the 2D object.
    */
    action SetLinearVelocityX(number linearVelocityX)
        if type = UNMOVABLE
            return now
        end

        me:linearVelocity:Set(linearVelocityX, me:linearVelocity:GetY())
        if not simulated and linearVelocityX not= 0
            Simulate(true)
        end
    end


    /*
    This action sets the y component of the linear velocity of the 2D object.
    Attribute: Parameter linearVelocityY The y component of the linear velocity of the 2D object.
    */
    action SetLinearVelocityY(number linearVelocityY)
        if type = UNMOVABLE
            return now
        end

        me:linearVelocity:Set(me:linearVelocity:GetX(), linearVelocityY)
        if not simulated and linearVelocityY not= 0
            Simulate(true)
        end
    end


    /*
    This action returns both the x and y components of the linear velocity as 
    a 2D vector.
    Attribute: Returns the x and y components of the linear velocity.
    */
    action GetLinearVelocity returns Vector2
        return linearVelocity
    end


    /*
    This action sets the angular velocity of the 2D object.
    Attribute: Parameter angularVelocity How fast the 2D object will rotate.
    */
    action SetAngularVelocity(number angularVelocity)
        if type = UNMOVABLE     //static object doesn't move 
            return now
        end
        
        me:angularVelocity = angularVelocity  //simulate the kinematic/dynamic bodies if not already
        if not simulated and angularVelocity not= 0
            Simulate(true)
        end
    end


    /*
    This action returns the angular velocity of the 2D object.
    Attribute: Returns how fast the 2D object will rotate.
    */
    action GetAngularVelocity returns number
        return angularVelocity
    end


    /*
    This action sets the force that will be applied to the object. You only 
    want to set a force on a RESPONSIVE 2D object (an object that will respond
    to forces). 
    To actually apply a force, the type of the 2D object will be checked, 
    therefore, it is not checked here.
    This action is useful to clear the forces to zero, not useful in setting
    a specific force that you want to apply to the object. To apply a force
    that you want to an object, use "ApplyForce(Vector2 force, Vector2 point)"
    or "ApplyForceToCenter(Vector2 force)".
    Attribute: Parameter force The force that will be applied to the object
    */
    action SetForce(Vector2 force)
        me:force = force
        if not simulated and (force:GetX() not= 0 or force:GetY() not= 0)
            Simulate(true)
        end
    end


    /*
    This action gets the force that is stored in this object.
    Attribute: Returns the force that will be applied to the object.
    */
    action GetForce returns Vector2
        return force
    end

    /*
    This action sets the torque that could potentially be applied to this object.
    Attribute: Parameter torque The magnitude of torque that could potentially be applied to this object to rotate this object.
    */
    action SetTorque(number torque)
        me:torque = torque
        if not simulated and torque not= 0
            Simulate(true)
        end
    end

    /*
    This action gets the torque that is stored inside this object.
    Attribute: Returns torque.
    */
    action GetTorque returns number
        return torque
    end

    
    /*
    This action applies the force that you passed in to a point that you passed in.

    Attribute: Parameter force The force in global coordinates that you want to apply.
    
    Attribute: Parameter point The point in the global coordinants that you want the force to be applied to.
    */
    action ApplyForce(Vector2 force, Vector2 point)
        if type not= RESPONSIVE  //if the type is not dynamic, then do not apply the force
            return now
        end

        if not simulated and (force:GetX() not= 0 or force:GetY() not= 0)
            Simulate(true)
        end
        
        //the applied force will be simplified into a force applied at the center of mass of the object
        //and a torque applied at the center of mass of the object
        me:force:SetX(me:force:GetX() + force:GetX())
        me:force:SetY(me:force:GetY() + force:GetY())

        Sweep2D sweep = item:GetSweep()

        //since the force and torque values have updated, then the physics will be simulated with the solver
        torque = torque + (point:GetX() - sweep:GetCenter():GetX()) * force:GetY() - (point:GetY() - sweep:GetCenter():GetY()) * force:GetX()
    end

    
    /*
    This action applies a force to the center pf mass of the object.

    Attribute: Parameter force The force in global coordinates that you want to apply.
    */
    action ApplyForceToCenter(Vector2 force)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and (force:GetX() not= 0 or force:GetY() not= 0)
            Simulate(true)
        end

        me:force:SetX(me:force:GetX() + force:GetX())
        me:force:SetY(me:force:GetY() + force:GetY())
    end


    /*
    This action applies a torque to the center of mass of the object, which means
    this torque will only affect the angular velocity of the object but not
    the linear velocity of the object.
    Attribute: Parameter torque The magnitude of torque to the center of mass of the object.
    */
    action ApplyTorque(number torque)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and torque not= 0
            Simulate(true)
        end

        me:torque = me:torque + torque
    end


    /*
    This action applies a linear impulse to the object at a specified point, 
    which will lead to a sudden change in linear velocity of the object. This 
    will also lead to a sudden change in angular velocity of the object if 
    the linear impulse is not applied at the center of mass of the object.

    Attribute: Parameter impulse The impulse vector in global coordinates that you want to apply to the object.
    
    Attribute: Parameter point The point in the global coordinants that you want the linear impulse to be applied to.
    */
    action ApplyLinearImpulse(Vector2 impulse, Vector2 point)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and (impulse:GetX() not= 0 or impulse:GetY() not= 0)
            Simulate(true)
        end
        
        //Using the conservation of linear momentum to calculate the linear velocity
        //v_f = impulse/m + v_i
        linearVelocity:SetX(linearVelocity:GetX() + (impulse:GetX() * inverseMass))
        linearVelocity:SetY(linearVelocity:GetY() + (impulse:GetY() * inverseMass))

        Sweep2D sweep = item:GetSweep()

        angularVelocity = angularVelocity + ((point:GetX() - sweep:GetCenter():GetX()) * impulse:GetY() - (point:GetY() - sweep:GetCenter():GetY()) * impulse:GetX())
    end


    /*
    This action applied an angular impulse to the object which will cause the
    object to have a sudden change in angular velocity.
    Attribute: Parameter impulse The magnitude of the angular impulse.
    */
    action ApplyAngularImpulse(number impulse)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and impulse not= 0
            Simulate(true)
        end

        //calculated using the conservation of angular momentum
        angularVelocity = angularVelocity + (inverseInertia * impulse)
    end


    /*
    This action returns the mass of the object.
    Attribute: Returns the mass of the object.
    */
    action GetMass returns number
        return mass
    end

    /*
    This action sets the mass of the this property holder, which will also 
    set the density if a 2D item has been attached to this property holder. 
    Attribute: Parameter mass The mass of the object.
    */
    action SetMass(number mass)
        me:mass = mass
        if item not= undefined
            SetDensity(mass / item:GetShape():ComputeArea())
            massSet = true
        end
    end

    /*
    This action changes the mass of this property holder, this will not
    change the density of this property holder.
    Attribute: Parameter mass The mass of the object.
    */
    action AssignMass(number mass)
        me:mass = mass
    end

    /*
    This action returns the reciprocal of the mass (1/mass) inside this 
    property holder. 
    Attribute: Returns the (1/mass) value.
    */
    action GetInverseMass returns number
        return inverseMass
    end


    /*
    This action sets the reciprocal of the mass (1/mass) inside this 
    property holder without changing mass and density.
    Attribute: Parameter inverseMass The (1/mass) value.
    */
    action SetInverseMass(number inverseMass)
        me:inverseMass = inverseMass
    end

    /*
    This action returns the mass moment of inertia about the object's local
    origin (NOTE: not the mass moment of inertia about the object's center of
    mass).
    Attribute: Returns the mass moment of inertia about the object's local
    origin.
    */
    action GetInertia returns number
        Sweep2D sweep = item:GetSweep()
        return inertia + mass * (sweep:GetLocalCenter():GetX() * sweep:GetLocalCenter():GetX() + sweep:GetLocalCenter():GetY() * sweep:GetLocalCenter():GetY())
    end


    /*
    This action sets the mass moment of inertia about the about the object's local
    origin.
    Attribute: Parameter inertia The mass moment of inertia about the object's local
    origin.
    */
    action SetInertia(number inertia)
        me:inertia = inertia
    end

    /*
    This action returns the mass moment of inertia about the object's center
    of mass.
    Attribute: Returns the mass moment of inertia about the object's center
    of mass.
    */
    action GetRawInertia returns number
        return inertia
    end

    /*
    This action returns the reciprocal of the mass moment of inertia about
    the object's center of mass.
    Attribute: Returns the reciprocal of the mass moment of inertia about
    the object's center of mass.
    */
    action GetInverseInertia returns number
        return inverseInertia
    end

    /*
    This action sets the reciprocal of the mass moment of inertia about
    the object's center of mass.
    Attribute: Parameter inverseInertia The reciprocal of the mass moment of inertia about
    the object's center of mass.
    */
    action SetInverseInertia(number inverseInertia)
        me:inverseInertia = inverseInertia
    end

    /*
    This action gets the linear damping inside this property holder.
    Attribute: Return linear damping coefficient.
    */
    action GetLinearDamping returns number
        return linearDamping
    end

    /*
    This action sets the linear damping inside this property holder.
    Attribute: Parameter linearDamping The linear damping coefficient.
    */
    action SetLinearDamping(number linearDamping)
        me:linearDamping = linearDamping
    end

    /*
    This action gets the angular damping inside this property holder.
    Attribute: Return angular damping coefficient.
    */
    action GetAngularDamping returns number
        return angularDamping
    end

    /*
    This action sets the angular damping inside this property holder.
    Attribute: Parameter angularDamping The angular damping coefficient.
    */
    action SetAngularDamping(number angularDamping)
        me:angularDamping = angularDamping
    end

    /*
    This action returns how physics (linear velocity, angular velocity, force, 
    torque) will affect the object.
    There are three possible values to be returned:
        0 indicates that the object is UNMOVABLE, which means no matter 
            what forces or torques is applied to the object, the object 
            will not move.
        1 indicates that the object is NON_RESPONSIVE, which means that only
            setting the angular velocity and linear velocity of this object
            will affect how the object behaves.
        2 indicates that the object is REPONSIVE, which means that this object
            will behave differently when you apply forces and torques to 
            this object.
    
    Attribute: Returns Returns how physics will affect the object. 
    */
    action GetResponsiveness returns integer
        return type
    end

    /*
    This action sets how physics (linear velocity, angular velocity, force, 
    torque) will affect the object.
    Attribute: Parameter type How physics will affect the object. 
    */
    action SetResponsiveness(integer type)
        if me:type = type
            return now
        end

        me:type = type

        simulated = true

        if me:type = RESPONSIVE //if the object is governed by dynamics
            if not massSet
                mass = 1    //have an unit mass
                inverseMass = 1
            end
            if me:item not= undefined
                density = mass / item:GetShape():ComputeArea()    //sets the density, which will be used in the "item:ResetMass()" function
                me:item:ResetMass() //resets mass, moment of inertia, and update the objects linear velocity
            end
        else    //if the 2D object is supposed to be static or kinematic
            mass = 0    //no physics should act on this 2D object
            inverseMass = 0
            density = 0
            if me:item not= undefined
                me:item:ResetMass()   //resets mass, moment of inertia, and update the objects linear velocity
            end
        end

        //set the force and torque to 0
        force:SetZero()
        torque = 0
    end

    /*
    This action changes the density that is stored inside this property 
    holder. With the density changed, if there is a mass attached to this
    property holder, then the mass of the 2D object will also change based 
    on the object's shape.
    Attribute: Parameter density The density of the object.
    */
    action SetDensity(number density)
        if density >= 0
            me:density = density
            if item not= undefined
                item:ResetMass()
            end
        end
    end

    /*
    This action returns the density that is stored inside this property holder.
    Attribute: Returns the density of the object.
    */
    action GetDensity returns number
        return density
    end

    /*
    This action sets the friction that is stored inside this property holder.
    Attribute: Parameter friction The coefficient of friction.
    */
    action SetFriction(number friction)
        me:friction = friction
    end

    /*
    This action gets the friction that is stored inside this property holder.
    Attribute: Returns the coefficient of friction.
    */
    action GetFriction returns number
        return friction
    end


    /*
    This action sets how much energy that this 3D object will loose after a collision.
    If you want the object to not loose any energy, then you can pass in 1.0. If
    you want the object to loose a lot of energy (meaning, they would probably
    move a lot slower after the collision), then you can pass in a 0.0.
    You can also use the values between 0 and 1.
    Attribute: Parameter restitution The coefficient of restitution.
    */
    action SetRestitution(number restitution)
        me:restitution = restitution
    end


    /*
    This action returns how much energy that this 3D object will loose after a collision.
    Attribute: Returns the coefficient of restitution.
    */
    action GetRestitution returns number
        return restitution
    end


    /*
    This action sets whether the object attached to this property holder will
    be inside a collision group.
    Attribute: Parameter flag Whether the object attached to this property holder will
    be inside a collision group.
    */
    action SetCollisionGroupFlag(boolean flag)
        collisionGroupFlag = flag
    end

    /*
    This action gets whether the object attached to this property holder will
    be inside a collision group.
    Attribute: Returns false if the object is not in a collision group.
    */
    action GetCollisionGroupFlag returns boolean
        return collisionGroupFlag
    end

    /*
    This action sets which collision group that this object will be in. 
    Attribute: Parameter index The collision group that this object will be in. 
    */
    action SetCollisionGroupIndex(integer index)
        collisionGroupIndex = index
    end


    /*
    This action gets which collision group that this object will be in.
    Attribute: Returns the collision group that this object will be in. 
    */
    action GetCollisionGroupIndex returns integer
        return collisionGroupIndex
    end

    
    /*
    This action tells you whether if this object will be moving quickly. If the object will be moving fast, then there 
    will be more careful of a calculation of how this object collides with other 
    objects.
    Attribute: Returns true if this object will be moving quickly.
    */
    action IsFastMoving returns boolean
        return fastMoving
    end


    /*
    This action sets whether if the object attached to this property holder
    will be moving quickly. If the object will be moving fast, then there 
    will be more careful of a calculation of how this object collides with other 
    objects.
    Attribute: Parameter flag True if this object will be moving quickly.
    */
    action FastMoving(boolean flag)
        fastMoving = flag
    end

    /*
    This action sets whether if the object attached to this property holder
    will require its position to be moved.
    Attribute: Parameter flag True if will require its position to be moved.
    */
    action RequireSimulation(boolean flag)
        simulationRequired = flag
        if simulationRequired
            Simulate(true)
        end
    end


    /*
    This action tells you whether if you need to move the object that is 
    attached to this property holder.
    Attribute: Returns true if will require its position to be moved.
    */
    action IsSimulationRequired returns boolean
        return simulationRequired
    end

    /*
    This action will change the variables in this property holder based on whether
    simulation is required of the object that is attached to this property holder.
    If simulation is not required, then this means that the object's position will
    not change.
    Attribute: Parameter flag True if you want to simulate the object.
    */
    action Simulate(boolean flag)
        if flag //"awake"
            if not simulated
                simulated = true
                sleepTime = 0   //no sleep time
            end
        else    //"asleep"
            simulated = false
            sleepTime = 0
            linearVelocity:SetZero()
            angularVelocity = 0
            force:SetZero()
            torque = 0
        end
    end

    /*
    This action tells you if the object attached to this property holder
    is being simulated.
    Attribute: Returns True if you want to simulate the object.
    */
    action IsSimulated returns boolean
        return simulated
    end



    /*
    This action sets whether the 2D object attached to this property holder
    will be able to rotate or not.
    Attribute: Parameter flag True if this object can rotate.
    */
    action CanRotate(boolean flag)
        canRotate = flag
    end

    /*
    This action tells you if the 2D object attached to this property holder
    will be able to rotate. 
    Attribute: Returns True if this object can rotate.
    */
    action IsRotationAllowed returns boolean
        return canRotate
    end

    /*
    This action sets how much time that the 2D object attached to this 
    property holder will remain in its current position.
    Attribute: Parameter time How much time that the 2D object attached to this 
    property holder will remain in its current position.
    */
    action SetSleepTime(number time)
        sleepTime = time
    end

    /*
    This action gets how much time that the 2D object attached to this 
    property holder will remain in its current position.
    Attribute: Returns how much time that the 2D object attached to this 
    property holder will remain in its current position.
    */
    action GetSleepTime returns number
        return sleepTime
    end
end