package Libraries.Game.Physics

use Libraries.Compute.Vector3
use Libraries.Game.Collision.CollisionEdge3D
use Libraries.Game.Collision.BroadphaseCollision3D
use Libraries.Interface.Item3D
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Compute.Matrix3
use Libraries.Compute.Math
use Libraries.Compute.Quaternion

/*
This class is a property holder for a 3D mass. This class is used internally 
by Item3D class.
*/
class PhysicsProperties3D 
    Math math

    public constant integer UNMOVABLE = 0       //static object
    public constant integer NON_RESPONSIVE = 1  //object governed by kinematics (meaning, the object is affected by linear velocity and angular velocity settings)
    public constant integer RESPONSIVE = 2      //object governed by dynamics (meaning, the object is affect by force and torque applied to it)

    Vector3 linearVelocity
    Vector3 angularVelocity
    Vector3 force
    Vector3 torque
    number mass = 0
    number inverseMass = 0
    Matrix3 inverseInertiaWorld
    Vector3 inverseInertiaLocal
    number linearDamping = 0
    number angularDamping = 0
    number friction = 0
    number restitution = 0

    Vector3 interpolatedLinearVelocity
    Vector3 interpolatedAngularVelocity

    number sleepTime = 0

    integer type = UNMOVABLE

    boolean collisionGroupFlag = false
    integer collisionGroupIndex = -1

    boolean simulated = true
    boolean simulationRequired = false
    boolean fastMoving = false
    boolean canRotate = true
    boolean timeOfImpactFlag = false

    boolean massSet = false

    Item3D item = undefined

    boolean additionalDamping = true
    number additionalDampingFactor = 0.005
    number additionalLinearDampingThresholdSquared = 0.01
    number additionalAngularDampingThresholdSquared = 0.01
    number additionalAngularDampingFactor = 0.01

    constant number MAX_ANGULAR_VELOCITY = 0.5 * math:pi
    constant number ANGULAR_MOTION_THRESHOLD = 0.5 * math:pi / 2

    Vector3 pushVelocity
    Vector3 turnVelocity

    number angularFactor = 1

    /*
    This action attaches a 3D item, which includes the shape, friction, 
    restitution, positions, and others of a 3D object as a part of the properties
    that this 3D item has.
    This action is used internally in the Item3D class when you enable
    physics on the item when a "PhysicsProperties3D" property holder will be 
    created so that Item3D will be attached to that property holder and the
    property holder will be attached to the Item3D.
    Attribute: Parameter item The Item3D to be stored.
    */
    action SetItem(Item3D item)
        me:item = item

        if me:type = UNMOVABLE
            linearVelocity:SetZero()
            angularVelocity:SetZero()

            if item:GetLayer() not= undefined
                item:SynchronizeNodes()
            end
        end

        if item:GetLayer() not= undefined
            CollisionEdge3D edge = item:GetCollisionList()
            repeat while edge not= undefined
                CollisionEdge3D edge0 = edge
                edge = edge:GetNext()
                item:GetLayer():GetCollisionManager():Destroy(edge0:GetCollision())
            end
            item:SetCollisionList(undefined)

            BroadphaseCollision3D broadphase = item:GetLayer():GetCollisionManager():GetBroadphase()
            integer i = 0
            repeat while i < item:GetNodeCount()
                broadphase:TouchNode(item:GetNode(i):GetNodeID())     
                i = i + 1
            end
        end

        Vector3 inertia
        item:GetShape():CalculateLocalInertia(mass, inertia)
        SetMassProperties(mass, inertia)
    end

    /*
    This action returns the Item3D that is attached to these physical properties.
    Attribute: Returns the Item3D that is attached to these physical properties.
    */
    action GetItem returns Item3D
        return item
    end

    /*
    This action allows another PhysicsProperties3D object to be assigned by
    the values stored inside the current PhysicsProperties3D object.    
    Attribute: Returns the other PhysicsProperties3D to copy from.
    */
    action Copy returns PhysicsProperties3D
        PhysicsProperties3D new
        new:linearVelocity = linearVelocity:Copy()
        new:angularVelocity = angularVelocity:Copy()
        new:force = force:Copy()
        new:torque = torque:Copy()
        new:mass = mass
        new:inverseMass = inverseMass
        new:inverseInertiaWorld:Set(inverseInertiaWorld)
        new:inverseInertiaLocal:Set(inverseInertiaLocal)
        new:linearDamping = linearDamping
        new:angularDamping = angularDamping
        new:friction = friction
        new:restitution = restitution
        new:sleepTime = sleepTime
        new:type = type
        new:collisionGroupFlag = collisionGroupFlag
        new:collisionGroupIndex = collisionGroupIndex
        new:simulated = simulated
        new:simulationRequired = simulationRequired
        new:fastMoving = fastMoving
        new:canRotate = canRotate
        new:timeOfImpactFlag = timeOfImpactFlag
        new:massSet = massSet
        new:interpolatedLinearVelocity:Set(interpolatedLinearVelocity)
        new:interpolatedAngularVelocity:Set(interpolatedAngularVelocity)
        new:pushVelocity:Set(pushVelocity)
        new:turnVelocity:Set(turnVelocity)
        new:angularFactor = angularFactor
        
        return new
    end

    /*
    This action sets the linear velocity of the 3D object.
    Attribute: Parameter linearVelocity the linear velocity of the 3D object.
    */
    action SetLinearVelocity(Vector3 linearVelocity)
        if type = UNMOVABLE
            // static bodies don't move - hence don't have velocity
            return now
        end
        me:linearVelocity:Set(linearVelocity)
        if not simulated and not me:linearVelocity:IsZero(0.000000119209290)
            Simulate(true)
        end
    end

    /*
    This action sets the x component of the linear velocity of the 3D object.
    Attribute: Parameter linearVelocityX The x component of the linear velocity of the 3D object.
    */
    action SetLinearVelocityX(number linearVelocityX)
        if type = UNMOVABLE
            return now
        end

        me:linearVelocity:Set(linearVelocityX, me:linearVelocity:GetY(), me:linearVelocity:GetZ())
        if not simulated and linearVelocityX not= 0
            Simulate(true)
        end
    end

    /*
    This action sets the y component of the linear velocity of the 3D object.
    Attribute: Parameter linearVelocityY The y component of the linear velocity of the 3D object.
    */
    action SetLinearVelocityY(number linearVelocityY)
        if type = UNMOVABLE
            return now
        end

        me:linearVelocity:Set(me:linearVelocity:GetX(), linearVelocityY, me:linearVelocity:GetZ())
        if not simulated and linearVelocityY not= 0
            Simulate(true)
        end
    end

    /*
    This action sets the z component of the linear velocity of the 3D object.
    Attribute: Parameter linearVelocityZ The z component of the linear velocity of the 3D object.
    */
    action SetLinearVelocityZ(number linearVelocityZ)
        if type = UNMOVABLE
            return now
        end

        me:linearVelocity:Set(me:linearVelocity:GetX(), me:linearVelocity:GetY(), linearVelocityZ)
        if not simulated and linearVelocityZ not= 0
            Simulate(true)
        end
    end

    /*
    This action returns the linear velocity of the 3D object that is attached to 
    this PhysicsProperties3D property holder.
    Attribute: Returns the linear velocity.
    */
    action GetLinearVelocity returns Vector3
        return linearVelocity
    end

    /*
    This action sets the angular velocity of the 3D object.
    Attribute: Parameter angularVelocity How fast the 3D object will rotate.
    */
    action SetAngularVelocity(Vector3 angularVelocity)
        if type = UNMOVABLE
            return now
        end
        me:angularVelocity:Set(angularVelocity)
        if not simulated and not me:angularVelocity:IsZero(0.000000119209290)
            Simulate(true)
        end
    end

    /*
    This action returns the angular velocity of the 3D object.
    Attribute: Returns how fast the 3D object will rotate.
    */
    action GetAngularVelocity returns Vector3
        return angularVelocity
    end

    /*
    This action sets the force that will be applied to the object.
    Attribute: Parameter force The force that will be applied to the object.
    */
    action SetForce(Vector3 force)
        me:force = force
    end

    /*
    This action gets the force that is stored inside thie PhysicsProperties3D 
    property holder.
    Attribute: Returns the force that will be applied to the object.
    */
    action GetForce returns Vector3
        return force
    end

    /*
    This action sets the torque that could potentially be applied to the
    center of mass of this object.
    Attribute: Parameter torque The torque that could potentially be applied to this object to rotate this object.
    */
    action SetTorque(Vector3 torque)
        me:torque = torque
    end

    /*
    This action gets the torque that is stored inside this object.
    Attribute: Returns torque.
    */
    action GetTorque returns Vector3
        return torque
    end


    /*
    This action applies the force that you passed in to a point that you passed in.

    Attribute: Parameter force The force in local coordinates that you want to apply.
    
    Attribute: Parameter point The point in the local coordinants that you want the force to be applied to.
    */
    action ApplyForce(Vector3 force, Vector3 point)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and not force:IsZero(0.000000119209290)
            Simulate(true)
        end
        
        me:force:Add(force)

        Vector3 temp
        temp:Set(point):CrossProduct(force)
        temp:Scale(angularFactor)
        ApplyTorque(temp)
    end

    /*
    This action applies a force to the center pf mass of the object.

    Attribute: Parameter force The force in local coordinates that you want to apply.
    */
    action ApplyForceToCenter(Vector3 force)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and not force:IsZero(0.000000119209290)
            Simulate(true)
        end

        me:force:Add(force)
    end

    /*
    This action applies a torque to the center of mass of the object, which means
    this torque will only affect the angular velocity of the object but not
    the linear velocity of the object.
    Attribute: Parameter torque The torque that could potentially be applied to this object to rotate this object.
    */
    action ApplyTorque(Vector3 torque)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and not torque:IsZero(0.000000119209290)
            Simulate(true)
        end

        me:torque:Add(torque)
    end

    /*
    This action applies a linear impulse to the object at a specified point, 
    which will lead to a sudden change in linear velocity of the object. This 
    will also lead to a sudden change in angular velocity of the object if 
    the linear impulse is not applied at the center of mass of the object.

    Attribute: Parameter impulse The impulse vector in local coordinates that you want to apply to the object.
    
    Attribute: Parameter point The point in the local coordinants that you want the linear impulse to be applied to.
    */
    action ApplyLinearImpulse(Vector3 impulse, Vector3 point)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and not impulse:IsZero(0.000000119209290)
            Simulate(true)
        end
        
        ApplyLinearImpulseToCenter(impulse)
        if canRotate
            Vector3 temp
            temp:Set(point):CrossProduct(impulse)
            temp:Scale(angularFactor)
            ApplyAngularImpulse(temp)
        end
    end

    /*
    This action applies an linear impulse to the center of mass of this object.
    
    Attribute: Parameter impulse The impulse vector in local coordinates that you want to apply to the object.
    */
    action ApplyLinearImpulseToCenter(Vector3 impulse)
        Vector3 temp
        temp:Set(impulse):Scale(inverseMass):Add(linearVelocity)
        me:linearVelocity:Set(temp)
    end

    /*
    This action applied an angular impulse to the object which will cause the
    object to have a sudden change in angular velocity.    
    Attribute: Parameter impulse The  angular impulse.
    */
    action ApplyAngularImpulse(Vector3 impulse)
        if type not= RESPONSIVE
            return now
        end

        if not simulated and not impulse:IsZero(0.000000119209290)
            Simulate(true)
        end

        Vector3 tmp
        tmp:Set(impulse)     //added this, or else this action is pointless
        inverseInertiaWorld:Transform(tmp)
        angularVelocity:Add(tmp)
    end

    /*
    This action returns the mass of the object.
    Attribute: Returns the mass of the object.
    */
    action GetMass returns number
        return mass
    end

    /*
    This action sets the mass of the this property holder, which will also 
    set the density if a 3D item has been attached to this property holder. 
    Attribute: Parameter mass The mass of the object.
    */
    action SetMass(number mass)
        me:mass = mass
        massSet = true
        if mass not= 0
            me:inverseMass = 1.0 / mass
        end
        if item not= undefined
            Vector3 inertia
            item:GetShape():CalculateLocalInertia(mass, inertia)
            SetMassProperties(mass, inertia)
        end
    end

    /*
    This action returns the reciprocal of the mass (1/mass) inside this 
    property holder. 
    Attribute: Returns the (1/mass) value.
    */
    action GetInverseMass returns number
        return inverseMass
    end

    /*
    This action sets the reciprocal of the mass (1/mass) inside this 
    property holder. 
    Attribute: Parameter inverseMass The (1/mass) value.
    */
    action SetInverseMass(number inverseMass)
        me:inverseMass = inverseMass
    end

    /*
    This action returns the inverse mass moment of inertia of the 3D object relative to 
    the local origin of the 3D object, where the components of the inverse mass moment of inertia
    is just the reciprocal of the local mass moment of inertia.
    Attribute: Returns the inverse mass moment of inertia of the 3D object relative to 
    the local origin of the 3D object.
    */
    action GetInverseInertiaLocal returns Vector3
        return inverseInertiaLocal
    end

    /*
    This action sets the inverse mass moment of inertia of the 3D object relative to 
    the local origin of the 3D object, where the components of the inverse mass moment of inertia
    is just the reciprocal of the local mass moment of inertia.
    Attribute: Parameter inverseInertia the inverse mass moment of inertia of the 3D object relative to 
    the local origin of the 3D object.
    */
    action SetInverseInertiaLocal(Vector3 inverseInertia)
        me:inverseInertiaLocal:Set(inverseInertia)
    end

    /*
    This action returns the inertia tensor in global coordinates.
    Attribute: Returns the inertia tensor in global coordinates.
    */
    action GetInverseInertiaWorld returns Matrix3
        return inverseInertiaWorld
    end

    /*
    This action returns a number that will be used to decrease the linear velocity
    to ensure that our linear velocity calculation isn't too big.
    Attribute: Returns linear damping.
    */
    action GetLinearDamping returns number
        return linearDamping
    end

    /*
    This action sets a number that will be used to decrease the linear velocity
    to ensure that our linear velocity calculation isn't too big.
    Attribute: Parameter linearDamping the linear damping.
    */
    action SetLinearDamping(number linearDamping)
        me:linearDamping = linearDamping
    end

    /*
    This action returns a number that will be used to decrease the angular velocity
    to ensure that our linear velocity calculation isn't too big.
    Attribute: Returns the angular damping.
    */
    action GetAngularDamping returns number
        return angularDamping
    end

    /*
    This action sets a number that will be used to decrease the angular velocity
    to ensure that our linear velocity calculation isn't too big.
    Attribute: Parameter angularDamping The angular damping.
    */
    action SetAngularDamping(number angularDamping)
        me:angularDamping = angularDamping
    end

    /*
    This action returns how physics (linear velocity, angular velocity, force, 
    torque) will affect the object.
    There are three possible values to be returned:
        0 indicates that the object is UNMOVABLE, which means no matter 
            what forces or torques is applied to the object, the object 
            will not move.
        1 indicates that the object is NON_RESPONSIVE, which means that only
            setting the angular velocity and linear velocity of this object
            will affect how the object behaves.
        2 indicates that the object is REPONSIVE, which means that this object
            will behave differently when you apply forces and torques to 
            this object.
    
    Attribute: Returns Returns how physics will affect the object. 
    */
    action GetResponsiveness returns integer
        return type
    end

    /*
    This action sets how physics (linear velocity, angular velocity, force, 
    torque) will affect the object.
    Attribute: Parameter type The responsiveness of the object.
    */
    action SetResponsiveness(integer type)
        if me:type = type
            return now
        end

        me:type = type

        simulated = true

        if me:type = RESPONSIVE
            if not massSet
                mass = 1
                inverseMass = 1
                density = 1
            end
            
            if me:item not= undefined
                Vector3 inertia
                item:GetShape():CalculateLocalInertia(mass, inertia)
                SetMassProperties(mass, inertia)
            end
        else
            mass = 0
            inverseMass = 0
            density = 0
        end

        force:SetZero()
        torque:SetZero()
    end

    /*
    This action sets how smooth the surface of this object is. If the surface of this
    object is smooth, then you can pass in a number 0.0, if you want the surface of
    this object to be rough, then you can pass in a number 1.0.
    Attribute: Parameter friction The coefficient of friction.
    */
    action SetFriction(number friction)
        me:friction = friction
    end

    /*
    This action returns a number that lets you know how smooth thhe surface of 
    this object is.
    Attribute: Returns the coefficient of friction.
    */
    action GetFriction returns number
        return friction
    end

    /*
    This action sets how much energy that this 3D object will loose after a collision.
    If you want the object to not loose any energy, then you can pass in 1.0. If
    you want the object to loose a lot of energy (meaning, they would probably
    move a lot slower after the collision), then you can pass in a 0.0.
    You can also use the values between 0 and 1.
    Attribute: Parameter restitution The coefficient of restitution.
    */
    action SetRestitution(number restitution)
        me:restitution = restitution
    end

    /*
    This action returns how much energy that this 3D object will loose after a collision.
    Attribute: Returns the coefficient of restitution.
    */
    action GetRestitution returns number
        return restitution
    end

    /*
    This action sets whether the object attached to this property holder will
    be inside a collision group.
    Attribute: Parameter flag Whether the object attached to this property holder will
    be inside a collision group.
    */
    action SetCollisionGroupFlag(boolean flag)
        collisionGroupFlag = flag
    end

    /*
    This action gets whether the object attached to this property holder will
    be inside a collision group.
    Attribute: Returns false if the object is not in a collision group.
    */
    action GetCollisionGroupFlag returns boolean
        return collisionGroupFlag
    end

    /*
    This action sets which collision group that this object will be in.
    Attribute: Parameter index The collision group that this object will be in. 
    */
    action SetCollisionGroupIndex(integer index)
        collisionGroupIndex = index
    end

    /*
    This action gets which collision group that this object will be in.
    Attribute: Returns the collision group that this object will be in. 
    */
    action GetCollisionGroupIndex returns integer
        return collisionGroupIndex
    end

    /*
    This action tells you whether if this object will be moving fast. If the object will be moving fast, then there 
    will be more careful of a calculation of how this object collides with other 
    objects.
    Attribute: Returns true if this object will be moving quickly.
    */
    action IsFastMoving returns boolean
        return fastMoving
    end

    /*
    This action sets whether if the object attached to this property holder
    will be moving fast. If the object will be moving fast, then there 
    will be more careful of a calculation of how this object collides with other 
    objects.
    Attribute: Parameter flag True if this object will be moving quickly.
    */
    action FastMoving(boolean flag)
        fastMoving = flag
    end

    /*
    This action sets whether if the object attached to this property holder
    will require its position to be moved.
    Attribute: Parameter flag True if will require its position to be moved.
    */
    action RequireSimulation(boolean flag)
        simulationRequired = flag
        if simulationRequired
            Simulate(true)
        end
    end

    /*
    This action tells you whether if you need to move the object that is 
    attached to this property holder.
    Attribute: Returns true if will require its position to be moved.
    */
    action IsSimulationRequired returns boolean
        return simulationRequired
    end

    /*
    This action will change the variables in this property holder based on whether
    simulation is required of the object that is attached to this property holder.
    If simulation is not required, then this means that the object's position will
    not change.
    Attribute: Parameter flag True if you want to simulate the object.
    */
    action Simulate(boolean flag)
        if flag
            if not simulated
                simulated = true
                sleepTime = 0
            end
        else
            simulated = false
            sleepTime = 0
            linearVelocity:SetZero()
            angularVelocity:SetZero()
            force:SetZero()
            torque:SetZero()
        end
    end

    /*
    This action tells you if the object attached to this property holder
    is being simulated.
    Attribute: Returns True if you want to simulate the object.
    */
    action IsSimulated returns boolean
        return simulated
    end

    /*
    This action sets whether the 3D object attached to this property holder
    will be able to rotate or not.
    Attribute: Parameter flag True if this object can rotate.
    */
    action CanRotate(boolean flag)
        canRotate = flag
        if not canRotate
            angularFactor = 0
        end
    end

    /*
    This action tells you if the 3D object attached to this property holder
    will be able to rotate. 
    Attribute: Returns True if this object can rotate.
    */
    action IsRotationAllowed returns boolean
        return canRotate
    end

    /*
    This action sets how much time that the 3D object attached to this 
    property holder will remain in its current position.
    Attribute: Parameter time How much time that the 2D object attached to this 
    property holder will remain in its current position.
    */
    action SetSleepTime(number time)
        sleepTime = time
    end

    /*
    This action gets how much time that the 3D object attached to this 
    property holder will remain in its current position.
    Attribute: Returns how much time that the 2D object attached to this 
    property holder will remain in its current position.
    */
    action GetSleepTime returns number
        return sleepTime
    end

    /*
    This action estimates what the linear and angular velocities would be after
    a certain amount of time.
    Attribute: Parameter seconds The amount of time in the future.
    */
    action IntegrateVelocities(number seconds)
        if type not= RESPONSIVE
            return now
        end

        Vector3 temp
        temp:Set(force):Scale(inverseMass * seconds):Add(linearVelocity)
        linearVelocity:Set(temp)
        temp:Set(torque)
        inverseInertiaWorld:Transform(temp)
        temp:Scale(seconds):Add(angularVelocity)
        angularVelocity:Set(temp)

        number angVel = angularVelocity:Length()
        if angVel * seconds > MAX_ANGULAR_VELOCITY
            angularVelocity:Scale((MAX_ANGULAR_VELOCITY / seconds) / angVel)
        end
    end

    /*
    This action applies the scale factors that will decrease the linear and angular
    velocities that we calculated.
    Attribute: Parameter seconds The amount of time in the future.
    */
    action ApplyDamping(number seconds)
        linearVelocity:Scale(math:RaiseToPower(1 - linearDamping, seconds))
        angularVelocity:Scale(math:RaiseToPower(1 - angularDamping, seconds))

        if additionalDamping
            if (angularVelocity:LengthSquared() < additionalAngularDampingThresholdSquared) and
               (linearVelocity:LengthSquared() < additionalLinearDampingThresholdSquared)
                angularVelocity:Scale(additionalDampingFactor)
                linearVelocity:Scale(additionalDampingFactor)
            end

            number speed = linearVelocity:Length()
            if speed < linearDamping
                number dampVelocity = 0.005
                if speed > dampVelocity
                    Vector3 direction
                    direction:Set(linearVelocity)
                    direction:Normalize()
                    direction:Scale(dampVelocity)
                    linearVelocity:Subtract(direction)
                else
                    linearVelocity:Set(0, 0, 0)
                end
            end

            number angularSpeed = angularVelocity:Length()
            if speed < angularDamping
                number angularDampVelocity = 0.005
                if angularSpeed > angularDampVelocity
                    Vector3 direction
                    direction:Set(angularVelocity)
                    direction:Normalize()
                    direction:Scale(angularDampVelocity)
                    angularVelocity:Subtract(direction)
                else
                    angularVelocity:Set(0, 0, 0)
                end
            end
        end
    end

    /*
    This action calculates where the 3D object would be after a certain amount of time.
    Attribute: Parameter currentTransform The current position of the 3D object.
    Attribute: Parameter seconds The amount of time in the future.
    Attribute: Parameter predictedTransform The predicted position of the 3D object.
    */
    action IntegrateTransform(PhysicsPosition3D currentTransform, number seconds, PhysicsPosition3D predictedTransform)
        Vector3 temp
        temp:Set(linearVelocity):Scale(seconds)
        predictedTransform:GetOrigin():Set(temp):Add(currentTransform:GetOrigin())

        Vector3 axis
        number fAngle = angularVelocity:Length()

        if fAngle * seconds > ANGULAR_MOTION_THRESHOLD
            fAngle = ANGULAR_MOTION_THRESHOLD / seconds
        end

        if fAngle < 0.001
            axis:Set(angularVelocity):Scale(0.5 * seconds - (seconds * seconds * seconds) * 0.020833333333 * fAngle * fAngle)
        else
            axis:Set(angularVelocity):Scale(math:Sine(0.5 * fAngle * seconds) / fAngle)
        end

        Quaternion dorn
        dorn:Set(axis:GetX(), axis:GetY(), axis:GetZ(), math:Cosine(fAngle * seconds * 0.5))
        Quaternion orn0
        orn0:Set(currentTransform:GetRotation())

        Quaternion predictedOrn
        predictedOrn:Set(dorn):Multiply(orn0)
        predictedOrn:Normalize()

        predictedTransform:SetRotation(predictedOrn)
    end

    /*
    This action recalculates the mass moment of inertia relative to the world
    axis.
    Attribute: Parameter basis The local axis of the 3D object.
    */
    action UpdateInertia(Matrix3 basis)
        Matrix3 mat1
        mat1:row0column0 = basis:row0column0 * inverseInertiaLocal:GetX()
        mat1:row0column1 = basis:row0column1 * inverseInertiaLocal:GetY()
        mat1:row0column2 = basis:row0column2 * inverseInertiaLocal:GetZ()
        mat1:row1column0 = basis:row1column0 * inverseInertiaLocal:GetX()
        mat1:row1column1 = basis:row1column1 * inverseInertiaLocal:GetY()
        mat1:row1column2 = basis:row1column2 * inverseInertiaLocal:GetZ()
        mat1:row2column0 = basis:row2column0 * inverseInertiaLocal:GetX()
        mat1:row2column1 = basis:row2column1 * inverseInertiaLocal:GetY()
        mat1:row2column2 = basis:row2column2 * inverseInertiaLocal:GetZ()

        Matrix3 mat2
        mat2:Set(basis)
        mat2:Transpose()

        inverseInertiaWorld:Multiply(mat1, mat2)
    end

    /*
    This action lets you know the linear velocity of a point "Vector3 relativePosition"
    on this 3D object.
    Attribute: Parameter relativePosition A point in object's local coodinate.
    Attribute: Returns the linear velocity. 
    */
    action GetLinearVelocityAtLocalPoint(Vector3 relativePosition) returns Vector3
        Vector3 vec
        vec:Set(angularVelocity):CrossProduct(relativePosition)
        vec:Add(linearVelocity)
        return vec
    end

    /*
    This action stores an approximation of linear velocity of the 3D object.
    Attribute: Parameter velocity The approximation of linear velocity of the 3D object.
    */
    action SetInterpolatedLinearVelocity(Vector3 velocity)
        interpolatedLinearVelocity:Set(velocity)
    end

    /*
    This action returns an approximation of linear velocity of the 3D object.
    Attribute: Returns the approximation of linear velocity of the 3D object.
    */
    action GetInterpolatedLinearVelocity returns Vector3
        return interpolatedLinearVelocity
    end

    /*
    This action stores an approximation of angular velocity of the 3D object.
    Attribute: Parameter velocity an approximation of angular velocity of the 3D object.
    */
    action SetInterpolatedAngularVelocity(Vector3 velocity)
        interpolatedAngularVelocity:Set(velocity)
    end

    /*
    This action returns an approximation of angular velocity of the 3D object.  
    Attribute: Returns an approximation of angular velocity of the 3D object.s
    */
    action GetInterpolatedAngularVelocity returns Vector3
        return interpolatedAngularVelocity
    end

    /*
    This action allows you to add linear velocity, "Vector3 linearComponent," and
    add angular velocity, "Vector3 angularComponent," both scaled by
    "number impulseMagnitude" to the current linear velocity and angular velocity of this 3D object.
    Attribute: Parameter linearComponent Linear impulse.
    Attribute: Parameter angularComponent Angular impulse.
    Attribute: Parameter impulseMagnitude Magnitude of the impulse.
    */
    action InternalApplyImpulse(Vector3 linearComponent, Vector3 angularComponent, number impulseMagnitude)
        if inverseMass not= 0
            Vector3 temp
            temp:Set(linearComponent):Scale(impulseMagnitude):Add(linearVelocity)
            linearVelocity:Set(temp)
            if canRotate
                temp:Set(angularComponent):Scale(impulseMagnitude * angularFactor):Add(angularVelocity)
                angularVelocity:Set(temp)
            end
        end
    end

    /*
    This action returns the push velocity that is used in a Split Impulse solver.
    Attribute: Returns the push velocity that is used in a Split Impulse solver.
    */
    action GetPushVelocity returns Vector3
        return pushVelocity
    end

    /*
    This action returns the turn velocity that is used in a Split Impulse solver.
    Attribute: Returns the turn velocity that is used in a Split Impulse solver.
    */
    action GetTurnVelocity returns Vector3
        return turnVelocity
    end

    /*
    This action returns a number that scales the torque applied to the 3D object.
    Having an angular factor less than 1 makes the object less sensitive to the torque applied to it.   
    Attribute: Returns the angular factor.
    */
    action GetAngularFactor returns number
        return angularFactor
    end

    /*
    This action stores the angular, linear velocities of the 3D object before
    its angular and linear velocities are updated.
    Attribute: Parameter timeStep The amount of time to simulate.
    */
    action SaveKinematicState(number timeStep)
        PhysicsPosition3D transform0 = item:GetInterpolationWorldTransform()
        PhysicsPosition3D transform1 = item:GetCollisionTransform()
        linearVelocity:Set(transform1:GetOrigin()):Subtract(transform0:GetOrigin())
        linearVelocity:Scale(1.0 / timeStep)

        Vector3 axis
        Matrix3 temp
        temp:Set(transform0:GetBasis())
        temp:Inverse()

        Matrix3 dmat
        dmat:Set(transform1:GetBasis())
        dmat:Multiply(temp)

        Quaternion dorn
        PhysicsPosition3D tempTrans
        tempTrans:GetBasis():Set(dmat)
        dorn:Set(tempTrans:GetRotation())
        
        dorn:Normalize()
        
        number angle = 2 * math:InverseCosine(dorn:GetW())
        axis:Set(dorn:GetX(), dorn:GetY(), dorn:GetZ())

        number len = axis:LengthSquared()
        if len < 0.000000119209290 * 0.000000119209290
            axis:Set(1, 0, 0)
        else
            axis:Scale(1.0 / math:SquareRoot(len))
        end

        angularVelocity:Set(axis):Scale(angle / timeStep)
        
        interpolatedLinearVelocity:Set(linearVelocity)
        interpolatedAngularVelocity:Set(angularVelocity)
        item:GetInterpolationTransform():Set(item:GetCollisionTransform())
    end

    /*
    This action updates the mass of the 3D object and the inertia of the 3D
    object relative to the local origin.
    Attribute: Parameter mass The mass of the 3D object.
    Attribute: Parameter inertia the inertia of the 3D
    object relative to the local origin.
    */
    action SetMassProperties(number mass, Vector3 inertia)
        if mass = 0
            me:mass = 0
            me:inverseMass = 0
        else
            me:mass = mass
            me:inverseMass = 1 / mass
        end

        number x = 0
        number y = 0
        number z = 0
        
        if inertia:GetX() not= 0
            x = 1 / inertia:GetX()
        end

        if inertia:GetY() not= 0
            y = 1 / inertia:GetY()
        end

        if inertia:GetZ() not= 0
            z = 1 / inertia:GetZ()
        end

        inverseInertiaLocal:Set(x, y, z)
    end
end
