package Libraries.Game.Physics

use Libraries.Interface.Item3D
use Libraries.Compute.Vector3
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Compute.Quaternion
use Libraries.Compute.Math

/*
This class is a temporary storage location for the properties of a 3D item so that
the actions inside CollisionSolver3D can run a little quicker.
*/
class SolverItem3D
    Vector3 angularVelocity
    number angularFactor = 1
    number inverseMass = 0
    number friction = 0
    Item3D originalItem
    Vector3 linearVelocity
    Vector3 centerOfMassPosition

    Vector3 pushVelocity
    Vector3 turnVelocity

    Math math

    /*
    This action lets you know the linear velocity of a point "Vector3 relativePosition"
    on this 3D object.
    Attribute: Parameter relativePosition A point on the 3D object.
    Attribute: Parameter velocity Where velocity will be stored.
    */
    action GetVelocityInLocalPoint(Vector3 relativePosition, Vector3 velocity)
        Vector3 temp
        temp:Set(angularVelocity):CrossProduct(relativePosition)
        velocity:Set(linearVelocity):Add(temp)
    end

    /*
    This action allows you to add linear velocity, "Vector3 linearComponent," and
    add angular velocity, "Vector3 angularComponent," both scaled by
    "number impulseMagnitude" to the current linear velocity and angular velocity of this 3D object.
    Attribute: Parameter linearComponent Linear impulse.
    Attribute: Parameter angularComponent Angular impulse.
    Attribute: Parameter impulseMagnitude Magnitude of the impulse.
    */
    action InternalApplyImpulse(Vector3 linearComponent, Vector3 angularComponent, number impulseMagnitude)
        if inverseMass not= 0
            Vector3 temp
            temp:Set(linearComponent):Scale(impulseMagnitude):Add(linearVelocity)
            linearVelocity:Set(temp)
            temp:Set(angularComponent):Scale(impulseMagnitude * angularFactor):Add(angularVelocity)
            angularVelocity:Set(temp)
        end
    end

    /*
    This action allows you to add linear velocity, "Vector3 linearComponent," and
    add angular velocity, "Vector3 angularComponent," both scaled by
    "number impulseMagnitude" to the current push linear velocity and push angular velocity of this 3D object.
    Attribute: Parameter linearComponent Linear push impulse.
    Attribute: Parameter angularComponent Angular turn impulse.
    Attribute: Parameter impulseMagnitude Magnitude of the impulse.
    */
    action InternalApplyPushImpulse(Vector3 linearComponent, Vector3 angularComponent, number impulseMagnitude)
        if inverseMass not= 0
            Vector3 temp
            temp:Set(linearComponent):Scale(impulseMagnitude):Add(pushVelocity)
            pushVelocity:Set(temp)
            temp:Set(angularComponent):Scale(impulseMagnitude * angularFactor):Add(turnVelocity)
            turnVelocity:Set(temp)
        end
    end

    /*
    This action updates the angular and linear velocities in the 3D object that
    is attached to this SolverItem3D.
    */
    action WriteBackVelocity
        if inverseMass not= 0
            originalItem:SetLinearVelocity(linearVelocity)
            originalItem:SetAngularVelocity(angularVelocity)
        end
    end

    /*
    This action updates the angular and linear velocities in the 3D object that
    is attached to this SolverItem3D using a predicted angular and linear velocities.
    This also updates that 3D object's position with a predicted position.
    Attribute: Parameter timeStep The time of simulation.
    */
    action WriteBackVelocity(number timeStep)
        if inverseMass not= 0
            originalItem:SetLinearVelocity(linearVelocity)
            originalItem:SetAngularVelocity(angularVelocity)

            PhysicsPosition3D newTransform
            PhysicsPosition3D curTrans = originalItem:GetCollisionTransform()
            Vector3 linvel = pushVelocity
            Vector3 angvel = turnVelocity
            PhysicsPosition3D predictedTransform = newTransform
            Vector3 temp
            temp:Set(linvel):Scale(timeStep)
            predictedTransform:GetOrigin():Set(temp):Add(curTrans:GetOrigin())
            Vector3 axis
            number fAngle = angvel:Length()

            if fAngle * timeStep > 0.5 * math:pi
                fAngle = 0.5 * math:pi / timeStep
            end

            if fAngle < 0.001
                axis:Set(angvel):Scale(0.5 * timeStep - (timeStep * timeStep * timeStep) * 0.020833333333 * fAngle * fAngle)
            else
                axis:Set(angvel):Scale(math:Sine(0.5 * fAngle * timeStep) / fAngle)
            end

            Quaternion dorn
            dorn:Set(axis:GetX(), axis:GetY(), axis:GetZ(), math:Cosine(fAngle * timeStep * 0.5))
            Quaternion orn0
            orn0:Set(curTrans:GetRotation())

            Quaternion predictedOrn
            predictedOrn:Set(dorn):Multiply(orn0)
            predictedOrn:Normalize()

            predictedTransform:SetRotation(predictedOrn)

            originalItem:SetCollisionTransform(predictedTransform)
        end
    end

    /*
    This action stores the linear and angular velocities of the 3D item that is 
    attached to this SolverItem3D inside this SolverItem3D so that if we need the
    same linear and angular velocities again, we don't have to as the Item3D class
    to give us these velocities, which will make our program quicker.
    */
    action ReadVelocity
        if inverseMass not= 0
            linearVelocity:Set(originalItem:GetLinearVelocity())
            angularVelocity:Set(originalItem:GetAngularVelocity())
        end
    end

    /*
    This action returns the angular velocity stored inside this SolverItem3D class.
    Attribute: Returns the angular velocity stored inside this SolverItem3D class.
    */
    action GetAngularVelocity returns Vector3
        return angularVelocity
    end

    /*
    This action sets the angular velocity stored inside this SolverItem3D class.
    Attribute: Parameter velocity the angular velocity stored inside this SolverItem3D class.
    */
    action SetAngularVelocity(Vector3 velocity)
        me:angularVelocity = velocity
    end

    /*
    This action returns the 1/mass value stored inside this SolverItem3D class.
    Attribute: Returns the 1/mass value stored inside this SolverItem3D class.
    */
    action GetInverseMass returns number
        return inverseMass
    end

    /*
    This action sets the 1/mass value stored inside this SolverItem3D class.
    Attribute: Parameter the 1/mass value stored inside this SolverItem3D class.
    */
    action SetInverseMass(number inverseMass)
        me:inverseMass = inverseMass
    end

    /*
    This action returns the friction stored inside this SolverItem3D class.
    Attribute: Returns the coefficient of friction.
    */
    action GetFriction returns number
        return friction
    end

    /*
    This action sets the friction stored inside this SolverItem3D class.
    Attribute: Parameter friction The coefficient of friction.
    */
    action SetFriction(number friction)
        me:friction = friction
    end

    /*
    This action returns which 3D object is attached to this SolverItem3D.
    Attribute: Returns the 3D object is attached to this SolverItem3D.
    */
    action GetOriginalItem returns Item3D
        return originalItem
    end

    /*
    This action sets which 3D object is attached to this SolverItem3D.
    Attribute: Parameter item The 3D object to be attached to this SolverItem3D.
    */
    action SetOriginalItem(Item3D item)
        me:originalItem = item
    end

    /*
    This action returns the linear velocity stored inside this SolverItem3D class.
    Attribute: Returns the linear velocity of the 3D object.
    */
    action GetLinearVelocity returns Vector3
        return linearVelocity
    end

    /*
    This action sets the linear velocity stored inside this SolverItem3D class.
    Attribute: Parameter velocity the linear velocity of the 3D object.
    */
    action SetLinearVelocity(Vector3 velocity)
        me:linearVelocity = velocity
    end

    /*
    This action returns where the center of the 3D object is.
    Attribute: Returns the center of the 3D object.
    */
    action GetCenterOfMassPosition returns Vector3
        return centerOfMassPosition
    end


    /*
    This action sets where the center of the 3D object is.  
    Attribute: Parameter position The center of the 3D object.
    */
    action SetCenterOfMassPosition(Vector3 position)
        me:centerOfMassPosition = position
    end

    /*
    This action returns the push velocity.
    Attribute: Returns the push velocity.
    */
    action GetPushVelocity returns Vector3
        return pushVelocity
    end

    /*
    This action sets the push velocity.
    Attribute: Parameter velocity The push velocity.
    */
    action SetPushVelocity(Vector3 velocity)
        me:pushVelocity = velocity
    end

    /*
    This action returns the turn velocity.
    Attribute: Returns the turn velocity.
    */
    action GetTurnVelocity returns Vector3
        return turnVelocity
    end

    /*
    This action sets the turn velocity.
    Attribute: Parameter velocity the turn velocity.
    */
    action SetTurnVelocity(Vector3 velocity)
        me:turnVelocity = velocity
    end

    /*
    This action returns the angular factor.
    Attribute: Returns the angular factor.
    */
    action GetAngularFactor returns number
        return angularFactor
    end

    /*
    This action sets the angular factor.
    Attribute: Parameter The angular factor.
    */
    action SetAngularFactor(number factor)
        me:angularFactor = factor
    end
end