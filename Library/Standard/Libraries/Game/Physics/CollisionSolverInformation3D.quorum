package Libraries.Game.Physics

/*
This class records the values that is used by actions in the CollisionSolver3D class.
*/
class CollisionSolverInformation3D 
    number tau = 0.6
    number damping = 1
    number friction = 0.3
    number timestep = 0
    number restitution = 0
    integer numberIterations = 10
    number maxErrorReduction = 20
    number sor = 1.3
    number erp = 0.2
    number erp2 = 0.1
    boolean splitImpulse = false
    number splitImpulsePenetrationThreshold = -0.02
    number linearSlop = 0.005
    number warmStartingFactor = 0.85

    boolean randomizeOrder = true
    boolean cacheFriendly = true
    boolean warmStarting = true

    /*
    This action sets the current CollisionSolverInformation3D using another
    CollisionSolverInformation3D.
    */
    action Set(CollisionSolverInformation3D information)
        me:tau = information:tau
        me:damping = information:damping
        me:friction = information:friction
        me:timestep = information:timestep
        me:restitution = information:restitution
        me:numberIterations = information:numberIterations
        me:maxErrorReduction = information:maxErrorReduction
        me:sor = information:sor
        me:erp = information:erp
    end

    /*
    This action returns the fraction of a physics step that we should update the
    physics calculation.
    Time is between 0 and 1.
    */
    action GetTimeStep returns number
        return timestep
    end

    /*
    This action sets the fraction of a physics step that we should update the
    physics calculation.
    Time is between 0 and 1.
    */
    action SetTimeStep(number timestep)
        me:timestep = timestep
    end

    /*
    This action returns the Baumgarte factor that is used to make sure we can 
    surely push two colliding objects apart.
    */
    action GetErp returns number
        return erp
    end

    /*
    This action sets the Baumgarte factor that is used to make sure we can 
    surely push two colliding objects apart.
    */
    action SetErp(number erp)
        me:erp = erp
    end

    /*
    This action returns a factor to multiply to the position error in another 
    action that solves the position error first so that the two objects won't
    penetrate each other. Then, the other action will also calculate the necessary
    impulse so that we can get the objects to move with the velocity that we want.
    */
    action GetErp2 returns number
        return erp2
    end

    /*
    This action sets a factor to multiply to the position error in another 
    action that solves the position error first so that the two objects won't
    penetrate each other. Then, the other action will also calculate the necessary
    impulse so that we can get the objects to move with the velocity that we want.
    */
    action SetErp2(number erp2)
        me:erp2 = erp2  //changed the type in the action name
    end

    /*
    This action returns the maximum penetration two objects can have that we 
    consider as acceptable for simulation.
    */
    action GetSplitImpulsePenetrationThreshold returns number
        return splitImpulsePenetrationThreshold
    end

    /*
    This action returns whether you want to solve for the position error first
    before trying to find the right impulse to separate the objects.
    */
    action SplitImpulse returns boolean
        return splitImpulse
    end

    /*
    This action sets whether you want to solve for the position error first
    before trying to find the right impulse to separate the objects. By setting
    this to "true," another action in CollisionSolver3D will also use "GetErp2"
    action from this class.
    */
    action SetSplitImpulse(boolean flag)
        me:splitImpulse = flag
    end

    /*
    This action returns the likely difference between the penetration in the next
    time step (if we don't correct the current penetration) and the current penetration.
    */
    action GetLinearSlop returns number
        return linearSlop
    end

    /*
    This action sets the likely difference between the penetration in the next
    time step (if we don't correct the current penetration) and the current penetration.
    */
    action SetLinearSlop(number linearSlop)
        me:linearSlop = linearSlop
    end

    /*
    This action returns whether you have an initial guess of the impulse that 
    will separate the two objects that is involved in a collision apart.
    */
    action IsWarmStarting returns boolean
        return warmStarting
    end

    /*
    This action allows you to choose to have an initial guess or not of the impulse
    that will separate the two objects that is involved in a collision apart.
    */
    action SetWarmStarting(boolean flag)
        me:warmStarting = flag
    end

    /*
    This action returns a number that will be multiplied to the impulse that the
    current object is experiencing at a certain CollisionPoint3D to guess
    an impulse that will separate the two objects involved in a collision.
    */
    action GetWarmStartingFactor returns number
        return warmStartingFactor
    end

    /*
    This action sets a number that will be multiplied to the impulse that the
    current object is experiencing at a certain CollisionPoint3D to guess
    an impulse that will separate the two objects involved in a collision.
    */
    action SetWarmStartingFactor(number factor)
        me:warmStartingFactor = factor
    end

    /*
    This action returns the maximum number of repeats a solver can take to find
    a solution. 
    */
    action GetNumberIterations returns integer
        return numberIterations
    end

    /*
    This action sets the maximum number of repeats a solver can take to find
    a solution. 
    */
    action SetNumberIterations(integer iterations)
        me:numberIterations = iterations
    end

    /*
    This action returns an indicator to the CollisionSolver3D to solve the constraints
    in random order because solving in random order can improve stability.
    */
    action RandomizeOrder returns boolean
        return randomizeOrder  //not used anywhere
    end

    /*
    This action sets the indicator to the CollisionSolver3D to solve the constraints
    in random order because solving in random order can improve stability.
    */
    action SetRandomizeOrder(boolean flag)
        me:randomizeOrder = flag    //not used anywhere
    end

    /*
    This action returns whether you've turned on a faster mode for the solver.
    */
    action CacheFriendly returns boolean
        return cacheFriendly        //this is no longer used in Bullet
    end

    /*
    This action sets whether you want a faster mode for the solver or not.
    */
    action SetCacheFriendly(boolean flag)
        me:cacheFriendly = flag
    end

    /*
    This action returns a number that will scale the impulse that will be applied to 
    the objects to separate two objects in collision.
    If the damping number is less than 1, that means we are allowing some error in
    the solution of the impulse.
    */
    action GetDamping returns number
        return damping
    end

    /*
    This action sets a number that will scale the impulse that will be applied to 
    the objects to separate two objects in collision.
    If the damping number is less than 1, that means we are allowing some error in
    the solution of the impulse.
    */
    action SetDamping(number damping)
        me:damping = damping
    end
end