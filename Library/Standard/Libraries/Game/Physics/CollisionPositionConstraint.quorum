package Libraries.Game.Physics

use Libraries.Containers.Array
use Libraries.Compute.Vector2
use Libraries.Game.Collision.LocalCollisionPoints2D

/*
This class is used internally by CollisionSolver2D.
*/
class CollisionPositionConstraint 
    Array<Vector2> localPoints  //array that contains the vectors that represents the collision points from the perspective of the incident object

    Vector2 localNormal         //the direction to apply forces that will cause the two objects that have collided to separate
    Vector2 localPoint          //the collision point from the perspective of the reference object
    
    integer indexA = 0      //the group index of object A
    integer indexB = 0      //the group index of object B
    number inverseMassA = 0     //(1/massA)
    number inverseMassB = 0     //(1/massB)
    Vector2 localCenterA        //center of object A with respect to object A's local coordinates
    Vector2 localCenterB        //center of object B with respect to object B's local coordinates
    number inverseInertiaA = 0  //(1/mass moment of inertia of A)
    number inverseInertiaB = 0  //(1/mass moment of inertia of B)
    integer type = 0            //the type of "LocalCollisionPoints2D," possible choices are CIRCLES, FACE_A, FACE_B
    number radiusA = 0          //the effective radius of object A
    number radiusB = 0          //the effective radius of object B
    integer pointCount = 0      //the length of the array "localPoints"


    /*
    Since we are restraining how many collision points are possible, which is
    2 based on the LocalCollisionPoints2D class, therefore, we will only be
    creating an array of Vector2's that has 2 elements.
    */
    on create
        LocalCollisionPoints2D collisionPoints //this is here just so we can extract MAX_COLLISION_POINTS from the LocalCollisionPoints2D class
        repeat collisionPoints:MAX_COLLISION_POINTS times
            Vector2 point
            localPoints:Add(point)
        end
    end

    /*
    This action returns the array that contains the vectors that represents the collision points from the perspective of the incident object.
    Attribute: Returns an array of collision points.
    */
    action GetLocalPoints returns Array<Vector2>
        return localPoints
    end

    /*
    This action returns a collision point at an index of interest.
    Attribute: Parameter index The index of interest.
    Attribute: Returns a collision point.
    */
    action GetLocalPoint(integer index) returns Vector2
        return localPoints:Get(index)
    end

    /*
    This action returns the direction to apply forces that will cause the two objects that have collided to separate.   
    Attribute: Returns the local normal vector.
    */
    action GetLocalNormal() returns Vector2
        return localNormal
    end

    /*
    This action sets the direction to apply forces that will cause the two objects that have collided to separate.
    Attribute: Parameter normal The local normal vector.
    */
    action SetLocalNormal(Vector2 normal)
        me:localNormal = normal
    end

    /*
    This action returns the collision point from the perspective of the reference object.
    Attribute: Returns the collision point.
    */
    action GetLocalPoint returns Vector2
        return localPoint
    end

    /*
    This action sets the collision point from the perspective of the reference object.
    Attribute: Parameter point The collision point.
    */
    action SetLocalPoint(Vector2 point)
        me:localPoint = point
    end

    /*
    This action returns the group index of object A.
    Attribute: Returns the group index of object A.
    */
    action GetIndexA returns integer
        return indexA
    end

    /*
    This action sets the group index of object A.
    Attribute: Parameter index The group index of object A.
    */
    action SetIndexA(integer index)
        me:indexA = index
    end

    /*
    This action returns the group index of object B.
    Attribute: Returns the group index of object B.
    */
    action GetIndexB returns integer
        return indexB
    end

    /*
    This action sets the group index of object B.
    Attribute: Parameter index The group index of object B.
    */
    action SetIndexB(integer index)
        me:indexB = index
    end

    /*
    This action returns (1/massA).
    Attribute: Returns (1/massA).
    */
    action GetInverseMassA returns number
        return inverseMassA
    end

    /*
    This action sets (1/massA).
    Attribute: Parameter inverseMass The (1/massA) value.
    */
    action SetInverseMassA(number inverseMass)
        me:inverseMassA = inverseMass
    end

    /*
    This action returns (1/massB).
    Attribute: Returns the (1/massB) value.
    */
    action GetInverseMassB returns number
        return inverseMassB
    end

    /*
    This action sets (1/massB).
    Attribute: Parameter inverseMass The (1/massB) value. 
    */
    action SetInverseMassB(number inverseMass)
        me:inverseMassB = inverseMass
    end

    /*
    This action returns the center of object A with respect to object A's local coordinates.
    Attribute: Returns the center of object A with respect to object A's local coordinates.
    */
    action GetLocalCenterA returns Vector2
        return localCenterA
    end

    /*
    This action sets the center of object A with respect to object A's local coordinates.
    Attribute: Parameter localCenter The center of object A with respect to object A's local coordinates.
    */
    action SetLocalCenterA(Vector2 localCenter)
        me:localCenterA = localCenter
    end

    /*
    This action returns the center of object B with respect to object B's local coordinates.
    Attribute: Returns the center of object B with respect to object B's local coordinates.
    */
    action GetLocalCenterB returns Vector2
        return localCenterB
    end

    /*
    This action sets the center of object B with respect to object B's local coordinates.   
    Attribute: Parameter localCenter The center of object B with respect to object B's local coordinates.
    */
    action SetLocalCenterB(Vector2 localCenter)
        me:localCenterB = localCenter
    end

    /*
    This action returns (1/mass moment of inertia of A).
    Attribute: Returns the (1/mass moment of inertia of A) value.
    */
    action GetInverseInertiaA returns number
        return inverseInertiaA
    end

    /*
    This action sets (1/mass moment of inertia of A).
    Attribute: Parameter inverseInertia The (1/mass moment of inertia of A) value.
    */
    action SetInverseInertiaA(number inverseInertia)
        me:inverseInertiaA = inverseInertia
    end

    /*
    This action returns (1/mass moment of inertia of B).
    Attribute: Returns (1/mass moment of inertia of B) value.
    */
    action GetInverseInertiaB returns number
        return inverseInertiaB
    end

    /*
    This action sets (1/mass moment of inertia of B).
    Attribute: Parameter inverseInertia The (1/mass moment of inertia of B) value.
    */
    action SetInverseInertiaB(number inverseInertia)
        me:inverseInertiaB = inverseInertia
    end

    /*
    This action returns the type of "LocalCollisionPoints2D," possible choices are CIRCLES, FACE_A, FACE_B.
    Attribute: Returns the type of collision.
    */
    action GetType returns integer
        return type
    end

    /*
    This action sets the type of "LocalCollisionPoints2D," possible choices are CIRCLES, FACE_A, FACE_B.
    Attribute: Parameter type The type of collision.
    */
    action SetType(integer type)
        me:type = type
    end

    /*
    This action returns the effective radius of object A.
    Attribute: Returns the effective radius of object A.
    */
    action GetRadiusA returns number
        return radiusA
    end

    /*
    This action sets the effective radius of object A.
    Attribute: Parameter radius The effective radius of object A.
    */
    action SetRadiusA(number radius)
        me:radiusA = radius
    end

    /*
    This action returns the effective radius of object B.
    Attribute: Returns the effective radius of object B.
    */
    action GetRadiusB returns number
        return radiusB
    end

    /*
    This action sets the effective radius of object B.
    Attribute: Parameter radius The effective radius of object B.
    */
    action SetRadiusB(number radius)
        me:radiusB = radius
    end

    /*
    This action returns the length of the array "localPoints."
    Attribute: Returns the length of the array "localPoints."
    */
    action GetPointCount returns integer
        return pointCount
    end

    /*
    This action sets the length of the array "localPoints."
    Attribute: Parameter pointCount The length of the array "localPoints."
    */
    action SetPointCount(integer pointCount)
        me:pointCount = pointCount
    end
end