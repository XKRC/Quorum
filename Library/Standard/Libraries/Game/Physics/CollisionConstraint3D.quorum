package Libraries.Game.Physics

use Libraries.Interface.Item3D
use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Compute.Matrix3
use Libraries.Game.Collision.CollisionPoint3D

/*
This class contains many actions that will help with solving the constraints that
a collision has.
This class is used internally.
*/
class CollisionConstraint3D 
    /*
    This action is used to solve for the impulse that should be applied to a rolling object.
    */
    action ResolveSingleBilateralConstraint(Item3D body1, Vector3 position1, Item3D body2, Vector3 position2, number distance, Vector3 normal, Array<number> impulse, number timeStep)
        number normalLenSqr = normal:LengthSquared()
        if normalLenSqr > 1.1
            impulse:Set(0, 0.0)
            return now
        end

        Vector3 temp
        
        Vector3 rel_pos1
        rel_pos1:Set(position1):Subtract(body1:GetCenterOfMassPosition())

        Vector3 rel_pos2
        rel_pos2:Set(position2):Subtract(body2:GetCenterOfMassPosition())

        Vector3 vel1
        vel1:Set(body1:GetLinearVelocityAtLocalPoint(rel_pos1))

        Vector3 vel2
        vel2:Set(body2:GetLinearVelocityAtLocalPoint(rel_pos2))

        Vector3 vel
        vel:Set(vel1):Subtract(vel2)

        Matrix3 mat1
        mat1:Set(body1:GetCenterOfMassTransform():GetBasis())
        mat1:Transpose()

        Matrix3 mat2
        mat2:Set(body2:GetCenterOfMassTransform():GetBasis())
        mat2:Transpose()

        ConstraintDescription3D jac
        Vector3 inverseInertiaLocal1
        inverseInertiaLocal1:Set(body1:GetInverseInertiaLocal())
        Vector3 inverseInertiaLocal2
        inverseInertiaLocal2:Set(body2:GetInverseInertiaLocal())
        jac:Initialize(mat1, mat2, rel_pos1, rel_pos2, normal, inverseInertiaLocal1, body1:GetInverseMass(), inverseInertiaLocal2, body2:GetInverseMass())

        number jacDiagAB = jac:GetDiagonal()
        number jacDiagABInv = 1.0 / jacDiagAB

        Vector3 temp1
        temp1:Set(body1:GetAngularVelocity())
        mat1:Transform(temp1)

        Vector3 temp2
        temp2:Set(body2:GetAngularVelocity())
        mat2:Transform(temp2)

        Vector3 linearVelocity1
        linearVelocity1:Set(body1:GetLinearVelocity())
        Vector3 linearVelocity2
        linearVelocity2:Set(body1:GetLinearVelocity())
        number rel_vel = jac:GetRelativeVelocity(linearVelocity1, temp1, linearVelocity2, temp2)
        number a = jacDiagABInv

        rel_vel = normal:DotProduct(vel)

        number contactDamping = 0.2
        number velocityImpulse = -contactDamping * rel_vel * jacDiagABInv
        impulse:Set(0, velocityImpulse)
    end


    /*
    This action finds the normal impulse that should be applied to bodies that
    will separate them apart. This action takes into account of the friction 
    between the two objects.
    */
    action ResolveSingleCollision(Item3D body1, Item3D body2, CollisionPoint3D contactPoint, CollisionSolverInformation3D solverInfo) returns number
        Vector3 temp

        Vector3 pos1
        pos1:Set(contactPoint:GetWorldPositionOnA())

        Vector3 pos2
        pos2:Set(contactPoint:GetWorldPositionOnB())

        Vector3 normal = contactPoint:GetWorldNormalOnB()

        Vector3 relpos1     //vector from CollisionPoint3D tp COM
        relpos1:Set(pos1):Subtract(body1:GetCenterOfMassPosition())

        Vector3 relpos2
        relpos2:Set(pos2):Subtract(body2:GetCenterOfMassPosition())

        Vector3 vel1
        vel1:Set(body1:GetLinearVelocityAtLocalPoint(relpos1))      //linear velocity of object 1, also taking into account the rotation of 1
        Vector3 vel2
        vel2:Set(body2:GetLinearVelocityAtLocalPoint(relpos2))
        Vector3 vel
        vel:Set(vel1):Subtract(vel2)    //velocity of 1 relative to 2

        number relvel = normal:DotProduct(vel)  //the "magnitude" relative velocity projected onto the contact normal

        number kfps = 1.0 / solverInfo:GetTimeStep()

        number kerp = solverInfo:GetErp()
        number kcor = kerp * kfps

        CollisionPersistentData cpd = contactPoint:GetPersistentData()
        number distance = cpd:GetPenetration()
        number positionalError = kcor * -distance
        number velocityError = cpd:GetRestitution() - relvel

        number penetrationImpulse = positionalError * cpd:GetJacobianDiagonalABInverse()

        number velocityImpulse = velocityError * cpd:GetJacobianDiagonalABInverse()

        number normalImpulse = penetrationImpulse + velocityImpulse

        number oldNormalImpulse = cpd:GetAppliedImpulse()
        number sum = oldNormalImpulse + normalImpulse
        cpd:SetAppliedImpulse(sum)
        if 0 > sum
            cpd:SetAppliedImpulse(0)
        end

        normalImpulse = cpd:GetAppliedImpulse() - oldNormalImpulse

        if body1:GetInverseMass() not= 0
            temp:Set(contactPoint:GetWorldNormalOnB()):Scale(body1:GetInverseMass())
            body1:InternalApplyImpulse(temp, cpd:GetAngularComponentA(), normalImpulse)
        end

        if body2:GetInverseMass() not= 0
            temp:Set(contactPoint:GetWorldNormalOnB()):Scale(body2:GetInverseMass())
            body2:InternalApplyImpulse(temp, cpd:GetAngularComponentB(), -normalImpulse)
        end

        return normalImpulse
    end

    /*
    This action finds the impulse that should be applied to simulate friction
    between the surfaces of two colliding objects.
    */
    action ResolveSingleFriction(Item3D body1, Item3D body2, CollisionPoint3D contactPoint, CollisionSolverInformation3D solverInfo) returns number
        Vector3 temp

        Vector3 pos1
        pos1:Set(contactPoint:GetWorldPositionOnA())
        Vector3 pos2
        pos2:Set(contactPoint:GetWorldPositionOnB())

        Vector3 relpos1
        relpos1:Set(pos1):Subtract(body1:GetCenterOfMassPosition())

        Vector3 relpos2
        relpos2:Set(pos2):Subtract(body2:GetCenterOfMassPosition())

        CollisionPersistentData cpd = contactPoint:GetPersistentData()

        number combinedFriction = cpd:GetFriction()

        number limit = cpd:GetAppliedImpulse() * combinedFriction

        if cpd:GetAppliedImpulse() > 0
            Vector3 vel1
            vel1:Set(body1:GetLinearVelocityAtLocalPoint(relpos1))
            Vector3 vel2
            vel2:Set(body2:GetLinearVelocityAtLocalPoint(relpos2))

            Vector3 vel
            vel:Set(vel1):Subtract(vel2)

            number j1 = 0
            number j2 = 0

            number vrel = cpd:GetFrictionWorldTangential0():DotProduct(vel)

            j1 = -vrel * cpd:GetJacobianDiagonalABInverseTangent0()
            number oldTangentImpulse = cpd:GetAccumulatedTangentImpulse0()
            cpd:SetAccumulatedTangentImpulse0(oldTangentImpulse + j1)

            if cpd:GetAccumulatedTangentImpulse0() > limit
                cpd:SetAccumulatedTangentImpulse0(limit)
            end
            if cpd:GetAccumulatedTangentImpulse0() < -limit
                cpd:SetAccumulatedTangentImpulse0(-limit)
            end
            j1 = cpd:GetAccumulatedTangentImpulse0() - oldTangentImpulse

            vrel = cpd:GetFrictionWorldTangential1():DotProduct(vel)

            j2 = -vrel * cpd:GetJacobianDiagonalABInverseTangent1()
            oldTangentImpulse = cpd:GetAccumulatedTangentImpulse1()
            cpd:SetAccumulatedTangentImpulse1(oldTangentImpulse + j2)

            if cpd:GetAccumulatedTangentImpulse1() > limit
                cpd:SetAccumulatedTangentImpulse1(limit)
            end
            if cpd:GetAccumulatedTangentImpulse1() < -limit
                cpd:SetAccumulatedTangentImpulse1(-limit)
            end
            j2 = cpd:GetAccumulatedTangentImpulse1() - oldTangentImpulse

            if body1:GetInverseMass() not= 0
                temp:Set(cpd:GetFrictionWorldTangential0()):Scale(body1:GetInverseMass())
                body1:InternalApplyImpulse(temp, cpd:GetFrictionAngularComponent0A(), j1)

                temp:Set(cpd:GetFrictionWorldTangential1()):Scale(body1:GetInverseMass())
                body1:InternalApplyImpulse(temp, cpd:GetFrictionAngularComponent1A(), j2)
            end
            if body2:GetInverseMass() not= 0
                temp:Set(cpd:GetFrictionWorldTangential0()):Scale(body2:GetInverseMass())
                body2:InternalApplyImpulse(temp, cpd:GetFrictionAngularComponent0B(), -j1)
                
                temp:Set(cpd:GetFrictionWorldTangential1()):Scale(body2:GetInverseMass())
                body2:InternalApplyImpulse(temp, cpd:GetFrictionAngularComponent1B(), -j2)
            end
        end

        return cpd:GetAppliedImpulse()
    end

    /*
    This action finds the impulse that should be applied to separate the two
    objects colliding based on the friction between the two objects and their
    linear velocity.
    */
    action ResolveSingleCollisionCombined(Item3D body1, Item3D body2, CollisionPoint3D contactPoint, CollisionSolverInformation3D solverInfo) returns number
        Vector3 temp

        Vector3 pos1
        pos1:Set(contactPoint:GetWorldPositionOnA())
        Vector3 pos2
        pos2:Set(contactPoint:GetWorldPositionOnB())
        Vector3 normal = contactPoint:GetWorldNormalOnB()

        Vector3 relpos1
        relpos1:Set(pos1):Subtract(body1:GetCenterOfMassPosition())

        Vector3 relpos2
        relpos2:Set(pos2):Subtract(body2:GetCenterOfMassPosition())

        Vector3 vel1
        vel1:Set(body1:GetLinearVelocityAtLocalPoint(relpos1))
        Vector3 vel2
        vel2:Set(body2:GetLinearVelocityAtLocalPoint(relpos2))
        Vector3 vel
        vel:Set(vel1):Subtract(vel2)

        number relvel = normal:DotProduct(vel)

        number kfps = 1.0 / solverInfo:GetTimeStep()

        number kerp = solverInfo:GetErp()
        number kcor = kerp * kfps

        CollisionPersistentData cpd = contactPoint:GetPersistentData()
        number distance = cpd:GetPenetration()
        number positionalError = kcor * -distance
        number velocityError = cpd:GetRestitution() - relvel

        number penetrationImpulse = positionalError * cpd:GetJacobianDiagonalABInverse()

        number velocityImpulse = velocityError * cpd:GetJacobianDiagonalABInverse()

        number normalImpulse = penetrationImpulse + velocityImpulse

        number oldNormalImpulse = cpd:GetAppliedImpulse()
        number sum = oldNormalImpulse + normalImpulse
        cpd:SetAppliedImpulse(sum)

        if 0 > sum
            cpd:SetAppliedImpulse(0)
        end

        normalImpulse = cpd:GetAppliedImpulse() - oldNormalImpulse

        if body1:GetInverseMass() not= 0
            temp:Set(contactPoint:GetWorldNormalOnB()):Scale(body1:GetInverseMass())
            body1:InternalApplyImpulse(temp, cpd:GetAngularComponentA(), normalImpulse)
        end

        if body2:GetInverseMass() not= 0
            temp:Set(contactPoint:GetWorldNormalOnB()):Scale(body2:GetInverseMass())
            body2:InternalApplyImpulse(temp, cpd:GetAngularComponentB(), -normalImpulse)
        end

        vel1:Set(body1:GetLinearVelocityAtLocalPoint(relpos1))
        vel2:Set(body2:GetLinearVelocityAtLocalPoint(relpos2))
        vel:Set(vel1):Subtract(vel2)

        relvel = normal:DotProduct(vel)

        temp:Set(normal):Scale(relvel)
        Vector3 latvel
        latvel:Set(vel1):Subtract(temp)
        number latrelvel = latvel:Length()

        number combinedFriction = cpd:GetFriction()

        if cpd:GetAppliedImpulse() > 0
            if latrelvel > 0.000000119209290
                latvel:Scale(1.0 / latrelvel)

                Vector3 temp1
                temp1:Set(relpos1):CrossProduct(latvel)
                Matrix3 matrix1
                matrix1:Set(body1:GetInverseInertiaWorld())
                matrix1:Transform(temp1)

                Vector3 temp2
                temp2:Set(relpos2):CrossProduct(latvel)
                Matrix3 matrix2
                matrix2:Set(body2:GetInverseInertiaWorld())
                matrix2:Transform(temp2)

                Vector3 javatemp1
                javatemp1:Set(temp1):CrossProduct(relpos1)

                Vector3 javatemp2
                javatemp2:Set(temp2):CrossProduct(relpos2)

                temp:Set(javatemp1):Add(javatemp2)

                number frictionImpulse = latrelvel / (body1:GetInverseMass() + body2:GetInverseMass() + latvel:DotProduct(temp))
                number normal_impulse = cpd:GetAppliedImpulse() * combinedFriction

                if frictionImpulse > normal_impulse
                    frictionImpulse = normal_impulse
                end

                if frictionImpulse < -normal_impulse
                    frictionImpulse = -normal_impulse
                end

                temp:Set(latvel):Scale(-frictionImpulse)
                body1:ApplyLinearImpulse(temp, relpos1)

                temp:Set(latvel):Scale(frictionImpulse)
                body2:ApplyLinearImpulse(temp, relpos2)
            end
        end
        return normalImpulse
    end
end