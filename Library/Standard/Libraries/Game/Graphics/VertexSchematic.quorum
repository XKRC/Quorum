package Libraries.Game.Graphics

use Libraries.Game.Graphics.Color
use Libraries.Compute.Vector3
use Libraries.Compute.Vector2

/*
The VertexSchematic class holds a sort of blueprint for an individual vertex. It
is used during construction by the MeshBuilder and ModelBuilder classes. Most
users should never need to use this class directly.
*/
class VertexSchematic 
    Vector3 position
    boolean hasPosition = true
    Vector3 normal
    boolean hasNormal = false
    Color color
    boolean hasColor = false
    Vector2 textureCoordinates
    boolean hasTextureCoordinates = false

    on create
        color:SetColor(1, 1, 1, 1)
    end

    /*
    This action sets the position, normal, color, and texture coordinates of the
    vertex. The action will return this object to allow for chaining.
    */
    action Set(Vector3 setPosition, Vector3 setNormal, Color setColor, Vector2 setTextureCoordinates) returns VertexSchematic
        if setPosition not= undefined
            hasPosition = true
            position:Set(setPosition)
        else
            hasPosition = false
        end

        if setNormal not= undefined
            hasNormal = true
            normal:Set(setNormal)
        else
            hasNormal = false
        end

        if setColor not= undefined
            hasColor = true
            color:CopyColor(setColor)
        else
            hasColor = false
        end

        if setTextureCoordinates not= undefined
            hasTextureCoordinates = true
            textureCoordinates:Set(setTextureCoordinates)
        else
            hasTextureCoordinates = false
        end

        return me
    end

    /*
    This action will set the VertexSchematic to match the values of the given
    VertexSchematic. The action will return this object to allow for chaining.
    */
    action Set(VertexSchematic schematic) returns VertexSchematic
        if schematic = undefined
            hasPosition = false
            hasNormal = false
            hasColor = false
            hasTextureCoordinates = false
        else
            if schematic:HasPosition()
                hasPosition = true
                position:Set(schematic:GetPosition())
            else
                hasPosition = false
            end

            if schematic:HasNormal()
                hasNormal = true
                normal:Set(schematic:GetNormal())
            else
                hasNormal = false
            end

            if schematic:HasColor()
                hasColor = true
                color:CopyColor(schematic:GetColor())
            else
                hasColor = false
            end

            if schematic:HasTextureCoordinates()
                hasTextureCoordinates = true
                textureCoordinates:Set(schematic:GetTextureCoordinates())
            else
                hasTextureCoordinates = false
            end
        end

        return me
    end

    /*
    Sets the position of the VertexSchematic, and returns it for chaining.
    */
    action SetPosition(number x, number y, number z) returns VertexSchematic
        position:Set(x, y, z)
        hasPosition = true
        return me
    end

    /*
    Sets the position of the VertexSchematic, and returns it for chaining. If
    the Vector3 is undefined, then this VertexSchematic will be treated as no
    longer having a position.
    */
    action SetPosition(Vector3 vector) returns VertexSchematic
        if vector = undefined
            hasPosition = false
        else
            position:Set(vector)
            hasPosition = true
        end
        
        return me
    end

    /*
    This will return the position of the VertexSchematic. This will return a
    Vector3 object, even if HasPosition returns false.
    */
    action GetPosition returns Vector3
        return position
    end

    /*
    Returns whether this VertexSchematic currently has a position.
    */
    action HasPosition returns boolean
        return hasPosition
    end

    /*
    Sets the normal of the VertexSchematic, and returns it for chaining.
    */
    action SetNormal(number x, number y, number z) returns VertexSchematic
        normal:Set(x, y, z)
        hasNormal = true
        return me
    end

    /*
    Sets the normal of the VertexSchematic, and returns it for chaining. If
    the Vector3 is undefined, then this VertexSchematic will be treated as no
    longer having a normal.
    */
    action SetNormal(Vector3 vector) returns VertexSchematic
        if vector = undefined
            hasNormal = false
        else
            normal:Set(vector)
            hasNormal = true
        end
        
        return me
    end

    /*
    This will return the normal of the VertexSchematic. This will return a
    Vector3 object, even if HasNormal returns false.
    */
    action GetNormal returns Vector3
        return normal
    end

    /*
    Returns whether this VertexSchematic currently has a normal.
    */
    action HasNormal returns boolean
        return hasNormal
    end

    /*
    Sets the color of the VertexSchematic, and returns it for chaining.
    */
    action SetColor(number red, number green, number blue, number alpha) returns VertexSchematic
        color:SetColor(red, green, blue, alpha)
        hasColor = true
        return me
    end

    /*
    Sets the color of the VertexSchematic, and returns it for chaining. If
    the Color is undefined, then this VertexSchematic will be treated as no
    longer having a color.
    */
    action SetColor(Color newColor) returns VertexSchematic
        if newColor = undefined
            hasColor = false
        else
            color:CopyColor(newColor)
            hasColor = true
        end
        
        return me
    end

    /*
    This will return the color of the VertexSchematic. This will return a
    Color object, even if HasColor returns false.
    */
    action GetColor returns Color
        return color
    end

    /*
    Returns whether this VertexSchematic currently has a color.
    */
    action HasColor returns boolean
        return hasColor
    end

    /*
    Sets the texture coordinates of the VertexSchematic, and returns it for chaining.
    */
    action SetTextureCoordinates(number u, number v) returns VertexSchematic
        textureCoordinates:Set(u, v)
        hasTextureCoordinates = true
        return me
    end

    /*
    Sets the texture coordinates of the VertexSchematic, and returns it for 
    chaining. If the Vector2 is undefined, then this VertexSchematic will be 
    treated as no longer having texture coordinates.
    */
    action SetTextureCoordinates(Vector2 vector) returns VertexSchematic
        if vector = undefined
            hasTextureCoordinates = false
        else
            textureCoordinates:Set(vector)
            hasTextureCoordinates = true
        end
        
        return me
    end

    /*
    This will return the texture coordinates of the VertexSchematic. This will 
    return a Vector2 object, even if HasTextureCoordinates returns false.
    */
    action GetTextureCoordinates returns Vector2
        return textureCoordinates
    end

    /*
    Returns whether this VertexSchematic currently has texture coordinates.
    */
    action HasTextureCoordinates returns boolean
        return hasTextureCoordinates
    end

    /*
    This action will perform linear interpolation between each of the fields of
    the VertexSchematic and each matching field of the provided target 
    VertexSchematic using the given alpha value, which must be between 0 and 1
    (inclusive). The results of the linear interpolation will be stored in the
    calling VertexSchematic.
    */
    action LinearInterpolation(VertexSchematic target, number alpha) returns VertexSchematic
        if hasPosition and target:HasPosition()
            position:LinearInterpolation(target:GetPosition(), alpha)
        end

        if hasNormal and target:HasNormal()
            normal:LinearInterpolation(target:GetNormal(), alpha)
        end

        if hasColor and target:HasColor()
            color:LinearInterpolation(target:GetColor(), alpha)
        end

        if hasTextureCoordinates and target:HasTextureCoordinates()
            textureCoordinates:LinearInterpolation(target:GetTextureCoordinates(), alpha)
        end

        return me
    end

end