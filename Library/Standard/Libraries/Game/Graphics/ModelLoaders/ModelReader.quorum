package Libraries.Game.Graphics.ModelLoaders

use Libraries.Data.Formats.SeparatedValueFileReader
use Libraries.System.Blueprints.FileReaderBlueprint
use Libraries.System.FileReader
use Libraries.System.AndroidAssetReader
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.ModelBlueprint
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.WavefrontConverterListener
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.WavefrontObjectLexer
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.WavefrontObjectParser
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.WavefrontObjectListener
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.MaterialConverterListener
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.MaterialLexer
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.MaterialParser
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.Material
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.ModelToken
use Libraries.Game.Graphics.ModelLoaders.WavefrontObject.ModelError
use Libraries.Game.Graphics.ModelLoaders.Graphics3DLoader
use Libraries.Game.Graphics.ModelBuilder
use Libraries.Game.Graphics.MeshBuilder
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Game.Graphics.Color
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.NumberAttribute
use Libraries.Game.Graphics.BlendingAttribute
use Libraries.Game.Graphics.TextureDescriptor
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureFilter
use Libraries.Game.Graphics.TextureWrap
use Libraries.Game.Graphics.TextureAttribute
use Libraries.Compute.BitwiseOperations
use Libraries.Game.Graphics.VertexAttributes
use Libraries.Game.Graphics.VertexSchematic
use Libraries.Containers.Table
use Libraries.Game.GameStateManager

class ModelReader 
    
    ModelBuilder modelBuilder
    Graphics3DLoader g3dLoader

    /*
    The Read action will read a file containing model data and return a
    ModelBlueprint. The supported file extensions are obj, g3db, and g3dj. If
    the given file is not supported, then this action will return undefined.

    Attribute: Example

        use Libraries.Game.Graphics.ModelLoaders.ModelReader
        use Libraries.Game.Graphics.ModelBlueprint
        use Libraries.System.File

        File file
        file:SetPath("model.obj")
        
        ModelReader reader
        ModelBlueprint schematic = reader:Read(file)
    */
    action Read(File file) returns ModelBlueprint
        text value = file:GetPath()
        if value:EndsWith(".obj")
            return ReadWavefrontObject(file)
        elseif value:EndsWith(".g3db") or value:EndsWith(".g3dj")
            return g3dLoader:LoadModel(file)
        end

        alert("I did not recognize the file type of this file! The supported file types are .obj, .g3db, and .g3dj")
    end

    private action ReadWavefrontObject(File file) returns ModelBlueprint
        WavefrontConverterListener listener
        FileReaderBlueprint reader = GetFileReader()

        reader:OpenForRead(file)
        repeat while not reader:IsAtEndOfFile()
            text value = reader:ReadLine()
            WavefrontObjectLexer lexer
            lexer:SetListener(listener)
            lexer:Read(value)

            WavefrontObjectParser parser
            parser:SetListener(listener)
            parser:Parse(lexer)
        end

        reader:Close()

        //now go in and read any of the materials files that were listed
        //these are required to be in the same folder
        Array<text> materials = listener:GetMaterialLibraries()
        Array<Material> materialsList
        i = 0
        repeat while i < materials:GetSize()
            text source = materials:Get(i)
            MaterialConverterListener materialListener

            //setup the file
            FileReaderBlueprint materialReader = GetFileReader()
            File materialFile
            File parentDirectory = file:GetParentDirectory()
            materialFile:SetWorkingDirectory(parentDirectory:GetWorkingDirectory())
            materialFile:SetPath(source)

            materialReader:OpenForRead(materialFile)
            repeat while not materialReader:IsAtEndOfFile()
                text value = materialReader:ReadLine()
                //now parse it
                MaterialLexer lexer
                lexer:SetListener(materialListener)
                lexer:Read(value)

                MaterialParser parser
                parser:SetListener(materialListener)
                parser:Parse(lexer)
            end
            i = i + 1

            Array<Material> value = materialListener:GetMaterials()
            k = 0
            repeat while k < value:GetSize()
                materialsList:Add(value:Get(k))
                k = k + 1
            end
        end

        ModelBlueprint schematic = ConstructWavefrontObject(listener:GetPositions(), listener:GetTextures(), listener:GetNormals(),
            listener:GetFaces(), materialsList, listener:GetUseMaterialIndices(), listener:GetUseMaterialNames(), file)

        return schematic
    end

    private action ConstructWavefrontObject(Array<VertexNumbers> positions, Array<VertexNumbers> textures, Array<VertexNumbers> normals, 
        Table<VertexFace> faces, Array<Material> materials, Array<integer> materialIndices, Array<text> materialNames, File file) returns ModelBlueprint
            
        integer startIndex = 0
        integer endIndex = -1

        BitwiseOperations bits
        VertexAttributes vertexAttributes

        integer counter = 0

        modelBuilder:Begin()

        if materials:GetSize() > 0
            repeat while counter < materialIndices:GetSize()
                text currentMaterialAlias = materialNames:Get(counter)
                integer materialCounter = 0
                boolean searching = true
                Material currentMaterial = undefined

                repeat while searching and materialCounter < materials:GetSize()
                    if materials:Get(materialCounter):GetName() = currentMaterialAlias
                        currentMaterial = materials:Get(materialCounter)
                        searching = false
                    else
                        materialCounter = materialCounter + 1
                    end
                end

                if currentMaterial = undefined
                    alert("I could not find a material named " + currentMaterialAlias + " in the materials (.mtl) file.")
                end

                Libraries.Game.Graphics.Material graphicsMaterial
                graphicsMaterial:id = materialNames:Get(counter)

                boolean isTextured = false

                if currentMaterial:HasAmbientColor()
                    ColorAttribute attribute
                    Color color
                    Vector3 vector = currentMaterial:GetAmbientColor()
                    color:SetColor(vector:GetX(), vector:GetY(), vector:GetZ(), 1.0)
                    attribute:SetAttribute(attribute:GetAmbientValue(), color)
                    graphicsMaterial:Add(attribute)
                end

                if currentMaterial:HasDiffuseColor()
                    ColorAttribute attribute
                    Color color
                    Vector3 vector = currentMaterial:GetDiffuseColor()
                    color:SetColor(vector:GetX(), vector:GetY(), vector:GetZ(), 1.0)
                    attribute:SetAttribute(attribute:GetDiffuseValue(), color)
                    graphicsMaterial:Add(attribute)
                end

                if currentMaterial:HasSpecularColor()
                    ColorAttribute attribute
                    Color color
                    Vector3 vector = currentMaterial:GetSpecularColor()
                    color:SetColor(vector:GetX(), vector:GetY(), vector:GetZ(), 1.0)
                    attribute:SetAttribute(attribute:GetSpecularValue(), color)
                    graphicsMaterial:Add(attribute)
                end

                if currentMaterial:HasTransmissionFilter()
                    // Currently not supported.
                end

                if currentMaterial:HasIllumination()
                    // Currently not supported.
                end

                if currentMaterial:HasShininess()
                    NumberAttribute attribute
                    attribute:SetAttribute(attribute:GetShininessValue(), currentMaterial:GetShininess())
                    graphicsMaterial:Add(attribute)
                end

                if currentMaterial:HasTransparency()
                    BlendingAttribute attribute
                    attribute:opacity = (1 - currentMaterial:GetTransparency())
                    attribute:SetAttribute(attribute:GetBlendedValue())
                    graphicsMaterial:Add(attribute)
                end

                if currentMaterial:HasDissolve()
                    BlendingAttribute attribute
                    attribute:opacity = currentMaterial:GetDissolve()
                    attribute:SetAttribute(attribute:GetBlendedValue())
                    graphicsMaterial:Add(attribute)
                end

                if currentMaterial:HasOpticalDensity()
                    // Currently not supported.
                end

                if currentMaterial:HasTextureAmbient()
                    TextureAttribute attribute
                    File textureFile
                    textureFile:SetWorkingDirectory(file:GetParentDirectory():GetWorkingDirectory())
                    textureFile:SetPath(currentMaterial:GetTextureAmbient())
                    TextureDescriptor descriptor = GenerateTextureDescriptor(textureFile)
                    attribute:SetAttribute(attribute:GetAmbientValue(), descriptor)
                    graphicsMaterial:Add(attribute)

                    isTextured = true
                end

                if currentMaterial:HasTextureDiffuse()
                    TextureAttribute attribute
                    File textureFile
                    textureFile:SetWorkingDirectory(file:GetParentDirectory():GetWorkingDirectory())
                    textureFile:SetPath(currentMaterial:GetTextureDiffuse())
                    TextureDescriptor descriptor = GenerateTextureDescriptor(textureFile)
                    attribute:SetAttribute(attribute:GetDiffuseValue(), descriptor)
                    graphicsMaterial:Add(attribute)

                    isTextured = true
                end

                if currentMaterial:HasTextureSpecular()
                    TextureAttribute attribute
                    File textureFile
                    textureFile:SetWorkingDirectory(file:GetParentDirectory():GetWorkingDirectory())
                    textureFile:SetPath(currentMaterial:GetTextureSpecular())
                    TextureDescriptor descriptor = GenerateTextureDescriptor(textureFile)
                    attribute:SetAttribute(attribute:GetSpecularValue(), descriptor)
                    graphicsMaterial:Add(attribute)

                    isTextured = true
                end

                if currentMaterial:HasTextureSpecularExponent()
                    // Currently not supported.
                end

                if currentMaterial:HasTextureDissolve()
                    // Currently not supported.
                end

                if currentMaterial:HasAntiAlias()
                    // Currently not supported.
                end


                integer mask = vertexAttributes:POSITION

                if normals:GetSize() > 0
                    mask = bits:Or(mask, vertexAttributes:NORMAL)
                end

                if isTextured
                    mask = bits:Or(mask, vertexAttributes:TEXTURE_COORDINATES)
                end

                startIndex = materialIndices:Get(counter)
                
                if (counter + 1) not= materialIndices:GetSize()
                    endIndex = materialIndices:Get(counter + 1)
                else
                    endIndex = faces:GetNumberOfRows()
                end

                AddToWavefrontModel(materialNames:Get(counter), mask, graphicsMaterial, positions, normals, textures, faces, startIndex, endIndex)

                counter = counter + 1
            end
        else
            Libraries.Game.Graphics.Material graphicsMaterial

            ColorAttribute attribute
            Color color
            color:SetColor(1.0, 0, 1.0, 1.0)
            attribute:SetAttribute(attribute:GetDiffuseValue(), color)
            graphicsMaterial:Add(attribute)

            integer mask = vertexAttributes:POSITION

            if normals:GetSize() > 0
                mask = bits:Or(mask, vertexAttributes:NORMAL)
            end

            if textures:GetSize() > 0
                mask = bits:Or(mask, vertexAttributes:TEXTURE_COORDINATES)
            end

            startIndex = 0
            endIndex = faces:GetNumberOfRows()

            AddToWavefrontModel("Default", mask, graphicsMaterial, positions, normals, textures, faces, startIndex, endIndex)
        end

        return modelBuilder:End()
    end

    private action GenerateTextureDescriptor(File file) returns TextureDescriptor
        TextureDescriptor descriptor
        Texture texture
        texture:LoadFromFile(file)

        TextureFilter minFilter
        TextureFilter magFilter
        minFilter:ConstructTextureFilter(minFilter:LINEAR)
        magFilter:ConstructTextureFilter(magFilter:LINEAR)
        TextureWrap uWrap
        TextureWrap vWrap
        uWrap:ConstructTextureWrap(uWrap:REPEAT)
        vWrap:ConstructTextureWrap(vWrap:REPEAT)
        descriptor:SetDescriptor(texture, minFilter, magFilter, uWrap, vWrap)

        return descriptor
    end

    private action AddToWavefrontModel(text name, integer attributesMask, Libraries.Game.Graphics.Material material, Array<VertexNumbers> positions,
        Array<VertexNumbers> normals, Array<VertexNumbers> textures, Table<VertexFace> faces, integer startIndex, integer endIndex)

        MeshBuilder meshBuilder = modelBuilder:AddPart(name, modelBuilder:TRIANGLES, attributesMask, material)

        VertexSchematic schematic1
        VertexSchematic schematic2
        VertexSchematic schematic3

        integer counter = startIndex

        Array<VertexFace> vertexFaces = undefined

        repeat while counter < endIndex
            vertexFaces = faces:GetRow(counter)

            // The counter starts at 2 because the first two face parts are initialized before entering the loop.
            integer facePartCounter = 2

            meshBuilder:EnsureVertices(vertexFaces:GetSize())
            meshBuilder:EnsureTriangleIndices(vertexFaces:GetSize() - 2)

            VertexFace startPoint = vertexFaces:Get(0)
            VertexFace oldPoint = undefined
            VertexFace newPoint = vertexFaces:Get(1)

            schematic1:Set(positions:Get(startPoint:GetPosition() - 1):GetVector(), undefined, undefined, undefined)

            if startPoint:HasNormal()
                schematic1:SetNormal(normals:Get(startPoint:GetNormal() - 1):GetVector())
            end

            if startPoint:HasTexture()
                schematic1:SetTextureCoordinates(textures:Get(startPoint:GetTexture() - 1):GetVector():GetX(), textures:Get(startPoint:GetTexture() - 1):GetVector():GetY())
            end

            repeat while facePartCounter < vertexFaces:GetSize()
                oldPoint = newPoint
                newPoint = vertexFaces:Get(facePartCounter)

                schematic2:Set(positions:Get(oldPoint:GetPosition() - 1):GetVector(), undefined, undefined, undefined)
                schematic3:Set(positions:Get(newPoint:GetPosition() - 1):GetVector(), undefined, undefined, undefined)

                if oldPoint:HasNormal()
                    schematic2:SetNormal(normals:Get(oldPoint:GetNormal() - 1):GetVector())
                end

                if oldPoint:HasTexture()
                    schematic2:SetTextureCoordinates(textures:Get(oldPoint:GetTexture() - 1):GetVector():GetX(), textures:Get(oldPoint:GetTexture() - 1):GetVector():GetY())
                end

                if newPoint:HasNormal()
                    schematic3:SetNormal(normals:Get(newPoint:GetNormal() - 1):GetVector())
                end

                if newPoint:HasTexture()
                    schematic3:SetTextureCoordinates(textures:Get(newPoint:GetTexture() - 1):GetVector():GetX(), textures:Get(newPoint:GetTexture() - 1):GetVector():GetY())
                end

                meshBuilder:AddTriangle(schematic1, schematic2, schematic3)

                facePartCounter = facePartCounter + 1
            end

            counter = counter + 1
        end
    end
    
    private action GetFileReader returns FileReaderBlueprint
        GameStateManager manager
        if manager:GetOperatingSystem():Contains("Android")
            AndroidAssetReader androidReader
            return androidReader
        else
            FileReader fileReader
            return fileReader
        end
    end
end