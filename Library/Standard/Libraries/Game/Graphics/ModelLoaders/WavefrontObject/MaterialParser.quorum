package Libraries.Game.Graphics.ModelLoaders.WavefrontObject

use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Containers.Stack

class MaterialParser
    constant integer OBJECT_STATE = 0
    integer currentToken = -1
    MaterialLexer lexer = undefined
    MaterialListener listener

    action GetListener returns MaterialListener
        return listener
    end

    action SetListener(MaterialListener listener)
        me:listener = listener
    end
    
    action Parse(MaterialLexer lexerLocal)
        lexer = lexerLocal
        if lexer:IsEmpty()
            return now
        end
        Start()
    end

    private action Start
        listener:EnterStart()
        currentToken = 0
        ModelToken token = lexer:GetToken(currentToken)
        currentToken = currentToken + 1
        if token:tokenID = lexer:COMMENT
            //do nothing
        elseif token:tokenID = lexer:NEW_MATERIAL
            NewMaterial()
        elseif token:tokenID = lexer:AMBIENT_LIGHTING
            AmbientLighting()
        elseif token:tokenID = lexer:DIFFUSE_LIGHTING
            DiffuseLighting()
        elseif token:tokenID = lexer:SPECULAR_LIGHTING
            SpecularLighting()
        elseif token:tokenID = lexer:EMISSIVE_LIGHTING
            EmissiveLighting()
        elseif token:tokenID = lexer:ILLUMINATION
            Illumination()
        elseif token:tokenID = lexer:SHININESS
            Shininess()
        elseif token:tokenID = lexer:OPTICAL_DENSITY
            OpticalDensity()
        elseif token:tokenID = lexer:TEXTURE_AMBIENT
            TextureAmbient()
        elseif token:tokenID = lexer:TEXTURE_SPECULAR
            TextureSpecular()
        elseif token:tokenID = lexer:TEXTURE_DIFFUSE
            TextureDiffuse()
        elseif token:tokenID = lexer:TEXTURE_SPECULAR_EXPONENT
            TextureSpecularExponent()
        elseif token:tokenID = lexer:TRANSPARENCY
            Transparency()
        elseif token:tokenID = lexer:DISSOLVE
            Dissolve()
        elseif token:tokenID = lexer:TEXTURE_ANTI_ALIAS
            TextureAntiAlias()
        elseif token:tokenID = lexer:TRANSMISSION_FILTER
            TransmissionFilter()
        else 
            ThrowError(token, undefined, "I can only begin reading files that are members of a group, vertex, vertex normal, vertex texture, face, or object, but found a " + token:value)
        end
        listener:ExitStart()
    end

    action NewMaterial
        listener:EnterNewMaterial()
        ID()
        listener:ExitNewMaterial()
    end

    /*
        Read a vector of numbers.
    */
    private action Vector
        repeat while currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:NUMBER
                listener:VisitNumber(token)
            else //we don't support this, so throw an error
                ThrowError(token, undefined, "I was execting a number, but found a " + token:value)
            end
            currentToken = currentToken + 1
        end
    end

    /*
        Read a single number.
    */
    action Number()
        if currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:NUMBER
                listener:VisitNumber(token)
            else //we don't support this, so throw an error
                ThrowError(token, undefined, "I was execting a number, but found a " + token:value)
            end
            currentToken = currentToken + 1
        end
    end

    action ID
        if currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:ID
                listener:VisitID(token)
            else //we don't support this, so throw an error
                ThrowError(token, undefined, "I was execting a number, but found a " + token:value)
            end
            currentToken = currentToken + 1
        end
    end

    action Boolean
        if currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:ON
                listener:VisitOn(token)
            elseif token:tokenID = lexer:OFF
                listener:VisitOff(token)
            else //we don't support this, so throw an error
                ThrowError(token, undefined, "I was execting a number, but found a " + token:value)
            end
            currentToken = currentToken + 1
        end
    end

    action AmbientLighting
        listener:EnterAmbientLighting()
        Vector()
        listener:ExitAmbientLighting()
    end

    action DiffuseLighting
        listener:EnterDiffuseLighting()
        Vector()
        listener:ExitDiffuseLighting()
    end

    action SpecularLighting
        listener:EnterSpecularLighting()
        Vector()
        listener:ExitSpecularLighting()
    end

    action Transparency
        listener:EnterTransparency()
        Number()
        listener:ExitTransparency()
    end

    action Dissolve
        listener:EnterDissolve()
        Number()
        listener:ExitDissolve()
    end

    action Illumination
        listener:EnterIllumination()
        Number()
        listener:ExitIllumination()
    end

    action EmissiveLighting
        listener:EnterEmissiveLighting()
        Vector()
        listener:ExitEmissiveLighting()
    end

    action Shininess
        listener:EnterShininess()
        Number()
        listener:ExitShininess()
    end

    action OpticalDensity
        listener:EnterOpticalDensity()
        Number()
        listener:ExitOpticalDensity()
    end

    action TextureAmbient
        listener:EnterTextureAmbient()
        ID()
        listener:ExitTextureAmbient()
    end

    action TextureSpecular
        listener:EnterTextureSpecular()
        ID()
        listener:ExitTextureSpecular()
    end

    action TextureDiffuse
        listener:EnterTextureDiffuse()
        ID()
        listener:ExitTextureDiffuse()
    end

    action TextureSpecularExponent
        listener:EnterTextureSpecularExponent()
        ID()
        listener:ExitTextureSpecularExponent()
    end

    action TextureAntiAlias
        listener:EnterTextureAntiAlias()
        Boolean()
        listener:ExitTextureAntiAlias()
    end

    action TransmissionFilter
        listener:EnterTransmissionFilter()
        Vector()
        listener:ExitTransmissionFilter()
    end

    private action ThrowError(ModelToken start, 
        ModelToken finish,
        text message)
        //create the error and send it to the listener
        if listener not= undefined
            ModelError error
            error:SetLineNumber(start:startLine)
            error:SetColumnNumber(start:startColumn)
            error:SetIndex(start:startIndex)

            if finish not= undefined
                error:SetLineNumberEnd(finish:endLine)
                error:SetColumnNumberEnd(finish:endColumn)
                error:SetIndexEnd(finish:endIndex)
            else 
                error:SetLineNumberEnd(start:endLine)
                error:SetColumnNumberEnd(start:endColumn)
                error:SetIndexEnd(start:endIndex)
            end
            error:SetErrorMessage(message)
            listener:VisitError(error)
        end
    end
end