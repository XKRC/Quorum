package Libraries.Game.Graphics.ModelLoaders.WavefrontObject

use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Containers.Stack

class WavefrontObjectParser
    constant integer OBJECT_STATE = 0
    integer currentToken = -1
    WavefrontObjectLexer lexer = undefined
    WavefrontObjectListener listener

    action GetListener returns WavefrontObjectListener
        return listener
    end

    action SetListener(WavefrontObjectListener listener)
        me:listener = listener
    end
    
    action Parse(WavefrontObjectLexer lexerLocal)
        lexer = lexerLocal
        if lexer:IsEmpty()
            return now
        end
        Start()
    end

    private action Start
        listener:EnterStart()
        currentToken = 0
        ModelToken token = lexer:GetToken(currentToken)
        if token:tokenID = lexer:COMMENT
            
        elseif token:tokenID = lexer:GROUP
            currentToken = currentToken + 1
            Group()
        elseif token:tokenID = lexer:MATERIAL_LIBRARY
            currentToken = currentToken + 1
            MaterialLibrary()
        elseif token:tokenID = lexer:USE_MATERIAL
            currentToken = currentToken + 1
            UseMaterial()
        elseif token:tokenID = lexer:OBJECT
            currentToken = currentToken + 1
            Object()
        elseif token:tokenID = lexer:VERTEX
            currentToken = currentToken + 1
            Vertex()
        elseif token:tokenID = lexer:VERTEX_NORMAL
            currentToken = currentToken + 1
            VertexNormal()
        elseif token:tokenID = lexer:VERTEX_TEXTURE
            currentToken = currentToken + 1
            VertexTexture()
        elseif token:tokenID = lexer:FACE
            currentToken = currentToken + 1
            Face()
        else 
            ThrowError(token, undefined, "I can only begin reading files that are members of a group, vertex, vertex normal, vertex texture, face, or object, but found a " + token:value)
        end
        listener:ExitStart()
    end

    private action Object
        listener:EnterObject()
        if currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:ID
                listener:VisitID(token)
            end
        end
        listener:ExitObject()
    end

    private action UseMaterial
        listener:EnterUseMaterial()
        if currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:ID
                listener:VisitID(token)
            end
        end
        listener:ExitUseMaterial()
    end

    private action MaterialLibrary
        listener:EnterMaterialLibrary()
        repeat while currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:ID
                listener:VisitID(token)
            end
            currentToken = currentToken + 1
        end
        listener:ExitMaterialLibrary()
    end

    private action Group
        listener:EnterGroup()
        if currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:ID
                listener:VisitID(token)
            end
        end
        listener:ExitGroup()
    end

    private action Face
        listener:EnterFace()
        repeat while currentToken < lexer:GetSize()
            FacePart()
            currentToken = currentToken + 1
        end
        listener:ExitFace()
    end

    private action FacePart
        listener:EnterFacePart()
        ModelToken token = lexer:GetToken(currentToken)
        //if this isn't a number, it's an error
        if token:tokenID = lexer:NUMBER
            listener:VisitNumber(token)
        else 
            ThrowError(token, undefined, "For face components, I first require a number, but saw a " + token:value)
        end

        //it's fine if there is 1) no more tokens, 2) this is a slash (/)
        //or there's another face part after this, which would mean it's a 
        //number, not a slash
        currentToken = currentToken + 1
        if currentToken < lexer:GetSize()
            token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:FORWARD_SLASH
                listener:VisitForwardSlash(token)
            else //if it's not a slash, return
                //this was effectively a lookahead, so we need
                //to backtrack in order to put the stream at the right point.
                currentToken = currentToken - 1
                listener:ExitFacePart()
                return now
            end

            //ok, we saw a slash, which means the next part is either a number
            // so perhaps 5/5/5
            //or another slash, like 5//5
            currentToken = currentToken + 1
            if currentToken < lexer:GetSize()
                token = lexer:GetToken(currentToken)
                //if it's a number, fire it off.
                if token:tokenID = lexer:NUMBER
                    listener:VisitNumber(token)

                    //now there must be a slash, then another number
                    currentToken = currentToken + 1
                    if currentToken < lexer:GetSize()
                        //this must be a number, otherwise it is an error
                        token = lexer:GetToken(currentToken)
                        if token:tokenID = lexer:FORWARD_SLASH
                            listener:VisitForwardSlash(token)
                        end

                        currentToken = currentToken + 1
                        if currentToken < lexer:GetSize()
                            //this must be a number, otherwise it is an error
                            token = lexer:GetToken(currentToken)
                            if token:tokenID = lexer:NUMBER
                                listener:VisitNumber(token)
                            end
                        end
                    end
                //if it's a slash, there must be a number left, so find it
                elseif token:tokenID = lexer:FORWARD_SLASH
                    listener:VisitForwardSlash(token)
                    currentToken = currentToken + 1
                    if currentToken < lexer:GetSize()
                        //this must be a number, otherwise it is an error
                        token = lexer:GetToken(currentToken)
                        if token:tokenID = lexer:NUMBER
                            listener:VisitNumber(token)
                        end
                    end
                end
            end
        end
        listener:ExitFacePart()
    end

    private action Vertex
        listener:EnterVertex()
        repeat while currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:NUMBER
                listener:VisitNumber(token)
            end
            currentToken = currentToken + 1
        end
        listener:ExitVertex()
    end

    private action VertexNormal
        listener:EnterVertexNormal()
        repeat while currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:NUMBER
                listener:VisitNumber(token)
            end
            currentToken = currentToken + 1
        end
        listener:ExitVertexNormal()
    end

    private action VertexTexture
        listener:EnterVertexTexture()
        repeat while currentToken < lexer:GetSize()
            ModelToken token = lexer:GetToken(currentToken)
            if token:tokenID = lexer:NUMBER
                listener:VisitNumber(token)
            end
            currentToken = currentToken + 1
        end
        listener:ExitVertexTexture()
    end

    private action ThrowError(ModelToken start, 
        ModelToken finish,
        text message)
        //create the error and send it to the listener
        if listener not= undefined
            ModelError error
            error:SetLineNumber(start:startLine)
            error:SetColumnNumber(start:startColumn)
            error:SetIndex(start:startIndex)

            if finish not= undefined
                error:SetLineNumberEnd(finish:endLine)
                error:SetColumnNumberEnd(finish:endColumn)
                error:SetIndexEnd(finish:endIndex)
            else 
                error:SetLineNumberEnd(start:endLine)
                error:SetColumnNumberEnd(start:endColumn)
                error:SetIndexEnd(start:endIndex)
            end
            error:SetErrorMessage(message)
            listener:VisitError(error)
        end
    end
end