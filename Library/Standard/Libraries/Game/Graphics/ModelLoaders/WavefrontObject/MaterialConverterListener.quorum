package Libraries.Game.Graphics.ModelLoaders.WavefrontObject
use Libraries.Containers.Stack
use Libraries.Containers.HashTable
use Libraries.Compute.Vector3
use Libraries.Containers.Array

class MaterialConverterListener is MaterialListener
    Stack<integer> state
    Material material = undefined
    MaterialLexer lexer
    HashTable<integer, integer> positions
    Array<Material> materials

    action EnterStart end
    action ExitStart end

    action EnterNewMaterial 
        state:Push(lexer:NEW_MATERIAL)
        Material new
        material = new
        materials:Add(material)
    end

    action GetMaterials returns Array<Material>
        return materials
    end

    action ExitNewMaterial 
        state:Pop()
    end

    action EnterAmbientLighting 
        state:Push(lexer:AMBIENT_LIGHTING)
        positions:Add(lexer:AMBIENT_LIGHTING, 0)
        material:SetHasAmbientColor(true)
    end

    action ExitAmbientLighting 
        state:Pop()
    end

    action EnterDiffuseLighting 
        state:Push(lexer:DIFFUSE_LIGHTING)
        positions:Add(lexer:DIFFUSE_LIGHTING, 0)
        material:SetHasDiffuseColor(true)
    end

    action ExitDiffuseLighting 
        state:Pop()
    end

    action EnterSpecularLighting 
        state:Push(lexer:SPECULAR_LIGHTING)
        positions:Add(lexer:SPECULAR_LIGHTING, 0)
        material:SetHasSpecularColor(true)
    end

    action ExitSpecularLighting 
        state:Pop()
    end

    action EnterEmissiveLighting 
        state:Push(lexer:EMISSIVE_LIGHTING)
        positions:Add(lexer:EMISSIVE_LIGHTING, 0)
        material:SetHasSpecularColor(true)
    end

    action ExitEmissiveLighting 
        state:Pop()
    end

    action EnterIllumination 
        state:Push(lexer:ILLUMINATION)
    end
    
    action ExitIllumination 
        state:Pop()
    end

    action EnterTransparency 
        state:Push(lexer:TRANSPARENCY)
    end

    action ExitTransparency 
        state:Pop()
    end

    action EnterDissolve
        state:Push(lexer:DISSOLVE)
    end

    action ExitDissolve 
        state:Pop()
    end

    

    action EnterShininess 
        state:Push(lexer:SHININESS)
    end

    action ExitShininess 
        state:Pop()
    end

    action EnterOpticalDensity 
        state:Push(lexer:OPTICAL_DENSITY)
    end

    action ExitOpticalDensity 
        state:Pop()
    end

    action EnterTextureAmbient 
        state:Push(lexer:TEXTURE_AMBIENT)
    end

    action ExitTextureAmbient 
        state:Pop()
    end

    action EnterTextureSpecular 
        state:Push(lexer:TEXTURE_SPECULAR)
    end

    action ExitTextureSpecular 
        state:Pop()
    end

    action EnterTextureDiffuse 
        state:Push(lexer:TEXTURE_DIFFUSE)
    end

    action ExitTextureDiffuse 
        state:Pop()
    end

    action EnterTextureSpecularExponent 
        state:Push(lexer:TEXTURE_SPECULAR_EXPONENT)
    end

    action ExitTextureSpecularExponent 
        state:Pop()
    end

    action EnterTextureAntiAlias 
        state:Push(lexer:TEXTURE_ANTI_ALIAS)
    end

    action ExitTextureAntiAlias 
        state:Pop()
    end

    action EnterTransmissionFilter 
        state:Push(lexer:TRANSMISSION_FILTER)
        positions:Add(lexer:TRANSMISSION_FILTER, 0)
        material:SetHasTransmissionFilter(true)
    end

    action ExitTransmissionFilter 
        state:Pop()
    end

    action VisitOn(ModelToken token) 
        if state:Peek() = lexer:TEXTURE_ANTI_ALIAS
            material:SetAntiAlias(true)
        end
    end

    action VisitOff(ModelToken token) 
        if state:Peek() = lexer:TEXTURE_ANTI_ALIAS
            material:SetAntiAlias(false)
        end
    end

    action VisitID(ModelToken token) 
        if state:Peek() = lexer:NEW_MATERIAL
            material:SetName(token:value)
        elseif state:Peek() = lexer:TEXTURE_AMBIENT
            material:SetTextureAmbient(token:value)
        elseif state:Peek() = lexer:TEXTURE_DIFFUSE
            material:SetTextureDiffuse(token:value)
        elseif state:Peek() = lexer:TEXTURE_SPECULAR
            material:SetTextureSpecular(token:value)
        elseif state:Peek() = lexer:TEXTURE_SPECULAR_EXPONENT
            material:SetTextureSpecularExponent(token:value)
        elseif state:Peek() = lexer:TEXTURE_DISSOLVE
            material:SetTextureDissolve(token:value)
        end
    end

    action VisitNumber(ModelToken token) 
        if state:Peek() = lexer:ILLUMINATION
            material:SetIllumination(cast(integer, token:value))
        elseif state:Peek() = lexer:OPTICAL_DENSITY
            material:SetOpticalDensity(cast(number, token:value))
        elseif state:Peek() = lexer:SHININESS
            material:SetShininess(cast(number, token:value))
        elseif state:Peek() = lexer:TRANSPARENCY
            material:SetTransparency(cast(number, token:value))
        elseif state:Peek() = lexer:DISSOLVE
            material:SetDissolve(cast(number, token:value))
        elseif state:Peek() = lexer:AMBIENT_LIGHTING
            integer value = positions:GetValue(lexer:AMBIENT_LIGHTING)
            Vector3 vector = material:GetAmbientColor()
            SetPositionValue(value, token, vector)
            positions:Add(lexer:AMBIENT_LIGHTING, value + 1)
        elseif state:Peek() = lexer:DIFFUSE_LIGHTING
            integer value = positions:GetValue(lexer:DIFFUSE_LIGHTING)
            Vector3 vector = material:GetDiffuseColor()
            SetPositionValue(value, token, vector)
            positions:Add(lexer:DIFFUSE_LIGHTING, value + 1)
        elseif state:Peek() = lexer:SPECULAR_LIGHTING
            integer value = positions:GetValue(lexer:SPECULAR_LIGHTING)
            Vector3 vector = material:GetSpecularColor()
            SetPositionValue(value, token, vector)
            positions:Add(lexer:SPECULAR_LIGHTING, value + 1)
        elseif state:Peek() = lexer:EMISSIVE_LIGHTING
            integer value = positions:GetValue(lexer:EMISSIVE_LIGHTING)
            Vector3 vector = material:GetEmissiveColor()
            SetPositionValue(value, token, vector)
            positions:Add(lexer:EMISSIVE_LIGHTING, value + 1)
        elseif state:Peek() = lexer:TRANSMISSION_FILTER
            integer value = positions:GetValue(lexer:TRANSMISSION_FILTER)
            Vector3 vector = material:GetTransmissionFilter()
            SetPositionValue(value, token, vector)
            positions:Add(lexer:TRANSMISSION_FILTER, value + 1)
        end
    end

    private action SetPositionValue(integer position, ModelToken token, Vector3 vector)
        if position = 0
            vector:SetX(cast(number, token:value))
        elseif position = 1
            vector:SetY(cast(number, token:value))
        elseif position = 2
            vector:SetZ(cast(number, token:value))
        end
    end
end