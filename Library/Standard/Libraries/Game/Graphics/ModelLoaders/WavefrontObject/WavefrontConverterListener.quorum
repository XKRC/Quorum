package Libraries.Game.Graphics.ModelLoaders.WavefrontObject

use Libraries.Game.Graphics.VertexSchematic
use Libraries.Compute.Vector3
use Libraries.Containers.Array
use Libraries.Containers.Table
use Libraries.Game.Graphics.ModelLoaders.VertexFace
use Libraries.Game.Graphics.ModelLoaders.VertexNumbers

class WavefrontConverterListener is WavefrontObjectListener
    boolean isVertex = false
    boolean isVertexNormal = false
    boolean isFace = false
    boolean isGroup = false 
    boolean isUseMaterial = false
    boolean isMaterialLibrary = false
    boolean isObject = false
    boolean isVertexTexture = false
    integer positionIndex = 0
    integer normalIndex = 0
    integer textureIndex = 0
    integer facePartPosition = 1
    integer valueIndex = 0
    Array<VertexNumbers> positions
    Array<VertexNumbers> textures
    Array<VertexNumbers> normals
    VertexNumbers currentPosition
    VertexNumbers currentNormal
    VertexNumbers currentTexture
    Table<VertexFace> faces
    Array<VertexFace> faceArray
    Array<text> groupNames
    Array<text> objectNames
    Array<text> useMaterialNames
    Array<text> materialLibraries
    Array<integer> groupIndices
    Array<integer> objectIndices
    Array<integer> useMaterialIndices
    text groupName = undefined
    VertexFace currentFace

    action EnterStart
    end

    action ExitStart
    end

    action EnterGroup
        isGroup = true
    end

    action ExitGroup 
        isGroup = false
    end

    action EnterUseMaterial 
        isUseMaterial = true
    end

    action ExitUseMaterial 
        isUseMaterial = false
    end

    action EnterMaterialLibrary 
        isMaterialLibrary = true
    end

    action ExitMaterialLibrary 
        isMaterialLibrary = false
    end

    action EnterObject 
        isObject = true
    end

    action ExitObject 
        isObject = false
    end

    action EnterFace
        isFace = true
    end

    action ExitFace 
        isFace = false
        faces:AddRow(faceArray)
        Array<VertexFace> newArray
        faceArray = newArray
    end

    action EnterFacePart
        
    end

    action ExitFacePart
        faceArray:Add(currentFace)
        VertexFace face
        currentFace = face

        facePartPosition = 1
    end

    action EnterVertex
        isVertex = true
        positionIndex = 0
    end

    action ExitVertex 
        isVertex = false
        positions:Add(currentPosition)
        VertexNumbers vertex
        currentPosition = vertex
    end

    action EnterVertexNormal
        isVertexNormal = true
        normalIndex = 0
    end

    action ExitVertexNormal 
        isVertexNormal = false
        normals:Add(currentNormal)
        VertexNumbers vertex
        currentNormal = vertex
    end

    action EnterVertexTexture 
        isVertexTexture = true
        textureIndex = 0
    end

    action ExitVertexTexture 
        isVertexTexture = false
        textures:Add(currentTexture)
        VertexNumbers vertex
        currentTexture = vertex
    end

    action VisitID(ModelToken token)
        if isGroup
            groupIndices:Add(groupNames:GetSize())
            groupNames:Add(token:value)
        elseif isUseMaterial
            useMaterialIndices:Add(faces:GetNumberOfRows())
            useMaterialNames:Add(token:value)
        elseif isObject
            objectIndices:Add(objectNames:GetSize())
            objectNames:Add(token:value)
        elseif isMaterialLibrary
            materialLibraries:Add(token:value)
        end
    end

    action VisitNumber(ModelToken terminal)
        if isVertex
            if positionIndex = 0
                Vector3 vector = currentPosition:GetVector()
                vector:SetX(cast(number, terminal:value))
            elseif positionIndex = 1
                Vector3 vector = currentPosition:GetVector()
                vector:SetY(cast(number, terminal:value))
            elseif positionIndex = 2
                Vector3 vector = currentPosition:GetVector()
                vector:SetZ(cast(number, terminal:value))
            elseif positionIndex = 3
                currentPosition:SetWidth(cast(number, terminal:value))
            end
            positionIndex = positionIndex + 1
        elseif isVertexNormal
            if normalIndex = 0
                Vector3 vector = currentNormal:GetVector()
                vector:SetX(cast(number, terminal:value))
            elseif normalIndex = 1
                Vector3 vector = currentNormal:GetVector()
                vector:SetY(cast(number, terminal:value))
            elseif normalIndex = 2
                Vector3 vector = currentNormal:GetVector()
                vector:SetZ(cast(number, terminal:value))
            end
            normalIndex = normalIndex + 1
        elseif isVertexTexture
            if textureIndex = 0
                Vector3 vector = currentTexture:GetVector()
                vector:SetX(cast(number, terminal:value))
            elseif textureIndex = 1
                Vector3 vector = currentTexture:GetVector()
                vector:SetY(cast(number, terminal:value))
            elseif textureIndex = 2
                Vector3 vector = currentTexture:GetVector()
                vector:SetZ(cast(number, terminal:value))
            end
            textureIndex = textureIndex + 1
        elseif isFace
            if facePartPosition = 1
                currentFace:SetPosition(cast(integer, terminal:value))
            elseif facePartPosition = 2
                currentFace:SetTexture(cast(integer, terminal:value))
            elseif facePartPosition = 3
                currentFace:SetNormal(cast(integer, terminal:value))
            end
        end
    end

    action VisitForwardSlash(ModelToken token) 
        facePartPosition = facePartPosition + 1
    end

    action VisitError(ModelError error)
    end

    action GetPositions returns Array<VertexNumbers>
        return positions
    end

    action GetNormals returns Array<VertexNumbers>
        return normals
    end

    action GetTextures returns Array<VertexNumbers>
        return textures
    end

    action GetFaces returns Table<VertexFace>
        return faces
    end

    action GetMaterialLibraries returns Array<text> 
        return materialLibraries
    end

    action GetUseMaterialIndices returns Array<integer>
        return useMaterialIndices
    end

    action GetUseMaterialNames returns Array<text>
        return useMaterialNames
    end
end