package Libraries.Game.Graphics.ModelLoaders.WavefrontObject

use Libraries.System.File
use Libraries.Containers.Array

class WavefrontObjectLexer 
    public constant integer STRING = 0
    public constant integer LEFT_BRACKET = 1
    public constant integer RIGHT_BRACKET = 2
    public constant integer LEFT_BRACE = 3
    public constant integer RIGHT_BRACE = 4
    public constant integer COMMA = 5
    public constant integer COLON = 6
    public constant integer NUMBER = 7
    public constant integer TRUE = 8
    public constant integer FALSE = 9
    public constant integer NULL = 10
    public constant integer COMMENT = 11
    public constant integer GROUP = 12
    public constant integer VERTEX = 13
    public constant integer VERTEX_NORMAL = 14
    public constant integer FACE = 15
    public constant integer ID = 16
    public constant integer MATERIAL_LIBRARY = 17
    public constant integer OBJECT = 18
    public constant integer VERTEX_TEXTURE = 19
    public constant integer FORWARD_SLASH = 19
    public constant integer USE_MATERIAL = 20

    Array<ModelToken> tokens
    WavefrontObjectListener listener = undefined

    action GetListener returns WavefrontObjectListener
        return listener
    end

    action SetListener(WavefrontObjectListener listener)
        me:listener = listener
    end

    action GetToken(integer i) returns ModelToken
        return tokens:Get(i)
    end

    action GetSize returns integer
        return tokens:GetSize()
    end

    action IsEmpty returns boolean
        return tokens:IsEmpty()
    end

    action Read(File file)
        text value = file:Read()
        Read(value)
    end

    action Read(text value)
        text quote = value:GetDoubleQuote()
        text line = value:GetCarriageReturn() + value:GetLineFeed()
        if line:IsEmpty()
            return now
        end
        integer currentLine = 0
        integer currentColumn = -1
        text string = ""
        i = 0
        repeat while i < value:GetSize()
            text char = value:GetCharacter(i)
            ModelToken token

            if char = value:GetLineFeed()
                currentLine = currentLine + 1
                currentColumn = -1
            end
            currentColumn = currentColumn + 1

            token:startLine = currentLine
            token:startColumn = currentColumn
            token:startIndex = i

            if char = "#"
                //greedily look forward until the end of the line
                string = "#"//quote
                j = i + 1
                repeat while j < value:GetSize()
                    string = string + value:GetCharacter(j)
                    currentColumn = currentColumn + 1
                    j = j + 1
                end
                i = j
                token:tokenID = COMMENT
                token:value = string
                tokens:Add(token)
            elseif char = "-" or IsDigit(char)
                string = char
                j = i + 1
                digitCount = 0
                if IsDigit(char)
                    digitCount = 1
                end

                done = false
                repeat while j < value:GetSize() and not done
                    char2 = value:GetCharacter(j)
                    if IsDigit(char2)
                        string = string + char2
                        digitCount = digitCount + 1
                        currentColumn = currentColumn + 1
                        j = j + 1
                    else //stop at the first non-digit
                        if digitCount = 0
                            ThrowError(currentLine,currentColumn + 4,j, "A Minus (-) must be followed by any number of digits (0-9)")
                        end
                        done = true
                    end
                end

                //we now have a bunch of digits. The next character is either 
                //an E, an e, or a dot.
                if j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = "."
                        string = string + char2
                        j = j + 1
                        done = false
                        digitCount = 0
                        repeat while j < value:GetSize() and not done
                            char2 = value:GetCharacter(j)
                            if IsDigit(char2)
                                string = string + char2
                                digitCount = digitCount + 1
                                currentColumn = currentColumn + 1
                                j = j + 1
                            else //stop at the first non-digit
                                if digitCount = 0
                                    ThrowError(currentLine,currentColumn + 4,j, "A period (.) must be followed by any number of digits (0-9)")
                                end
                                done = true
                            end
                        end
                    end
                end

                //whether there was a dot or not, the last thing 
                //we might have is the exponent
                if j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = "e" or char2 = "E"
                        string = string + char2
                        j = j + 1

                        //now check if is a plus or a minus
                        if j < value:GetSize()
                            char2 = value:GetCharacter(j)
                            if char2 = "+" or char2 = "-"
                                string = string + char2
                                j = j + 1
                            end
                        end

                        //now add more integers
                        done = false
                        digitCount = 0
                        repeat while j < value:GetSize() and not done
                            char2 = value:GetCharacter(j)
                            if IsDigit(char2)
                                string = string + char2
                                j = j + 1
                                currentColumn = currentColumn + 1
                                digitCount = digitCount + 1
                            else //stop at the first non-digit
                                if digitCount = 0
                                    ThrowError(currentLine,currentColumn + 4,j, "An exponent (e or E) must be followed by any number of digits (0-9)")
                                end
                                done = true
                            end
                        end
                    end
                end
                text testIfID = ID(value, i)
                if testIfID:GetSize() > string:GetSize()
                    i = i + testIfID:GetSize()
                    token:tokenID = ID
                    token:value = testIfID
                    tokens:Add(token)
                else
                    i = j - 1
                    token:tokenID = NUMBER
                    token:value = string
                    tokens:Add(token)
                end
            elseif char = "/"
                token:tokenID = FORWARD_SLASH
                token:value = "/"
                tokens:Add(token)
            elseif IsAlphaNumeric(char)
                text other = IDSlashes(value, i)
                i = i + other:GetSize()

                if other = "g"
                    token:tokenID = GROUP
                    token:value = "g"
                    tokens:Add(token)
                elseif other = "f"
                    token:tokenID = FACE
                    token:value = "f"
                    tokens:Add(token)
                elseif other = "mtllib"
                    token:tokenID = MATERIAL_LIBRARY
                    token:value = "mtllib"
                    tokens:Add(token)
                elseif other = "usemtl"
                    token:tokenID = USE_MATERIAL
                    token:value = "usemtl"
                    tokens:Add(token)
                elseif other = "v"
                    token:tokenID = VERTEX
                    token:value = "v"
                    tokens:Add(token)
                elseif other = "vn"
                    token:tokenID = VERTEX_NORMAL
                    token:value = "vn"
                    tokens:Add(token)
                elseif other = "vt"
                    token:tokenID = VERTEX_TEXTURE
                    token:value = "vt"
                    tokens:Add(token)
                elseif other = "o"
                    token:tokenID = OBJECT
                    token:value = "o"
                    tokens:Add(token)
                else 
                    token:tokenID = ID
                    token:value = other
                    tokens:Add(token)
                end
            end

            token:endLine = currentLine
            token:endColumn = currentColumn
            token:endIndex = i
            i = i + 1
        end
    end

    private action IsDigit(text char) returns boolean
        if  char = "0" or char = "1" or char = "2" or char = "3" or char = "4" or
            char = "5" or char = "6" or char = "7" or char = "8" or char = "9"
            return true
        end
        return false
    end

    private action IsAlphaNumericSlashes(text char) returns boolean
        if  char = "0" or char = "1" or char = "2" or char = "3" or char = "4" or
            char = "5" or char = "6" or char = "7" or char = "8" or char = "9"
            return true
        end

        //this is an ugly hack, which will be removed in a future release
        char = char:ToLowerCase()
        if  char = "a" or char = "b" or char = "c" or char = "d" or char = "e" or
            char = "f" or char = "g" or char = "h" or char = "i" or char = "j" or
            char = "k" or char = "l" or char = "m" or char = "n" or char = "o" or
            char = "p" or char = "q" or char = "r" or char = "s" or char = "t" or
            char = "u" or char = "v" or char = "w" or char = "x" or char = "y" or
            char  = "z"
            return true
        end

        //allow for a couple special characters
        if char = "_" or char = "-" or char = "." or char = "/" or char = "\"
            return true
        end
        
        return false
    end

    private action IDSlashes(text value, integer index) returns text
        text other = value:GetCharacter(index)
        boolean done = false
        j = index + 1
        repeat while j < value:GetSize() and not done
            char2 = value:GetCharacter(j)
            boolean alpha = IsAlphaNumeric(char2)
            if alpha
                other = other + char2
            else
                done = true
                j = j - 1
            end
            j = j + 1
        end

        return other
    end

    private action IsAlphaNumeric(text char) returns boolean
        if  char = "0" or char = "1" or char = "2" or char = "3" or char = "4" or
            char = "5" or char = "6" or char = "7" or char = "8" or char = "9"
            return true
        end

        //this is an ugly hack, which will be removed in a future release
        char = char:ToLowerCase()
        if  char = "a" or char = "b" or char = "c" or char = "d" or char = "e" or
            char = "f" or char = "g" or char = "h" or char = "i" or char = "j" or
            char = "k" or char = "l" or char = "m" or char = "n" or char = "o" or
            char = "p" or char = "q" or char = "r" or char = "s" or char = "t" or
            char = "u" or char = "v" or char = "w" or char = "x" or char = "y" or
            char  = "z"
            return true
        end

        //allow for a couple special characters
        if char = "_" or char = "-" or char = "."
            return true
        end
        
        return false
    end

    private action ID(text value, integer index) returns text
        text other = value:GetCharacter(index)
        boolean done = false
        j = index + 1
        repeat while j < value:GetSize() and not done
            char2 = value:GetCharacter(j)
            boolean alpha = IsAlphaNumeric(char2)
            if alpha
                other = other + char2
            else
                done = true
                j = j - 1
            end
            j = j + 1
        end

        return other
    end

    action ThrowError(integer line, integer column, integer index, text message)
        if listener not= undefined
            ModelError error
            error:SetLineNumber(line)
            error:SetColumnNumber(column)
            error:SetIndex(index)
            error:SetLineNumberEnd(line)
            error:SetColumnNumberEnd(column)
            error:SetIndexEnd(index)
            error:SetErrorMessage(message)
            listener:VisitError(error)
        end
    end
end