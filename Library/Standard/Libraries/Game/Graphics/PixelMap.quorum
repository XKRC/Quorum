package Libraries.Game.Graphics

use Libraries.Game.Disposable
use Libraries.Game.Graphics.Blending
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Filter
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Drawable
use Libraries.System.File
use Libraries.Compute.Matrix

/*
    The PixelMap class represents an image as a collection of individual pixels.
    It is used by the Texture class to draw shapes and load images from files.
    This is a class used internally by the game engine, and most users will not
    need to interface with this class directly.
*/
class PixelMap is Disposable
    
    Color color
    Format format

    /*
    This action takes a different PixelMap and draws it on top of this PixelMap
    at the given x,y coordinates on this PixelMap.
    */
    action DrawPixelMap(PixelMap pixmap, integer x, integer y)
        DrawPixelMap(pixmap, x, y, 0, 0, pixmap:GetWidth(), pixmap:GetHeight())
    end

    /*
    This action will draw a different PixelMap starting from the destX and destY
    with sourceWidth and sourceHeight on top of this PixelMap at the coordinates
    of sourceX, sourceY.
    */
    system action DrawPixelMap(PixelMap pixmap, integer sourceX, integer sourceY, integer destX, integer destY, integer sourceWidth, integer sourceHeight)

    /*
    Returns the Format that is used by this PixelMap.
    */
    action GetFormat returns Format
        return format
    end

    /*
    Returns the width of this PixelMap.
    */
    system action GetWidth returns integer
    
    /*
    Returns the height of this PixelMap.
    */
    system action GetHeight returns integer

    /*
    Returns the color being applied to this PixelMap.
    */
    action GetColor returns Color
        return color
    end

    /*
    Sets the color being used by this PixelMap using a Color object.
    */
    action SetColor(Color newColor) 
        color = newColor
    end

    /*
    Sets the color being used by this PixelMap using color component values
    between 0 and 1 for the red, green, blue, and alpha components.
    */
    action SetColor(number redValue, number greenValue, number blueValue, number alphaValue)
        color:SetColor(redValue, greenValue, blueValue, alphaValue)
    end

    /*
    Sets the color being used by this PixelMap using an integer color code.
    */
    action SetColorFromCode(integer code)
        color:SetColorFromCode(code)
    end

    /*
    This action will return the Blending being used on this PixelMap.
    */
    system action GetBlending returns Blending

    /*
    Sets the type of interpolation Filter to be used for this PixelMap.
    */
    action SetFilter(Filter filter)
        SetScale(filter:GetValue())
    end
    //Gdx2DPixmap.setScale(filter == Filter.NearestNeighbour ? Gdx2DPixmap.GDX2D_SCALE_NEAREST : Gdx2DPixmap.GDX2D_SCALE_LINEAR);
    
    /*
    This action will load a PixelMap using an image file.
    */
    system action LoadPixelMap(File file)

    /*
    This action will load a matrix into the PixelMap to create a monochrome
    (black and white) image. Each value is assumed to be between 0 and 1, 
    where 0 represents a black pixel and 1 represents a white pixel.

    Attribute: Parameter matrix The matrix representing the pixels to load.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.PixelMap
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Texture
    use Libraries.Compute.Matrix

    class Main is Game

        PixelMap pixelMap
        Texture texture
        Drawable drawable

        action Main
            StartGame()
        end

        action CreateGame
            Matrix matrix

            // 7x7 square that is black at edges and lightens as it goes towards the center.
            matrix:Fill(7, 7, 0)
            matrix:Set(1, 1, 0.33)
            matrix:Set(2, 1, 0.33)
            matrix:Set(3, 1, 0.33)
            matrix:Set(4, 1, 0.33)
            matrix:Set(5, 1, 0.33)
            matrix:Set(5, 2, 0.33)
            matrix:Set(5, 3, 0.33)
            matrix:Set(5, 4, 0.33)
            matrix:Set(5, 5, 0.33)
            matrix:Set(4, 5, 0.33)
            matrix:Set(3, 5, 0.33)
            matrix:Set(2, 5, 0.33)
            matrix:Set(1, 5, 0.33)
            matrix:Set(1, 4, 0.33)
            matrix:Set(1, 3, 0.33)
            matrix:Set(1, 2, 0.33)

            matrix:Set(2, 2, 0.66)
            matrix:Set(3, 2, 0.66)
            matrix:Set(4, 2, 0.66)
            matrix:Set(4, 3, 0.66)
            matrix:Set(4, 4, 0.66)
            matrix:Set(3, 4, 0.66)
            matrix:Set(2, 4, 0.66)
            matrix:Set(2, 3, 0.66)

            matrix:Set(3, 3, 1)

            pixelMap:LoadMatrix(matrix)

            // Loading the PixelMap and blowing up the size of the Drawable to make it easier to see.
            texture:LoadFromPixelMap(pixelMap)
            drawable:Load(texture)
            Add(drawable)

            drawable:SetPosition(200, 200)
            drawable:SetSize(100, 100)
        end
    end
    */
    action LoadMatrix(Matrix matrix)
        Format format
        format:SetValue(format:RGBA8888)

        CreatePixelMap(matrix:GetColumns(), matrix:GetRows(), format)
        
        Color color
        integer x = 0
        repeat while x < matrix:GetColumns()
            integer y = 0
            repeat while y < matrix:GetRows()
                number value = matrix:Get(x, y)
                color:SetColor(value, value, value, 1)
                SetPixel(x, y, color)
                y = y + 1
            end
            x = x + 1
        end
    end

    /*
    This action will asynchronously load the PixelMap (that is, it will be
    loaded separately from the rest of the program's execution) and then it will
    be loaded into the provided Texture, which will be used to load the provided
    Drawable (if it is not undefined). This is only needed for use on the web,
    and when loading Drawables or Textures directly via files or file paths, it
    is called automatically. Most users will never need to use this action
    directly.

    Attribute: Parameter file The image file to load the pixels from.
    Attribute: Parameter format The pixel format to be used for retrieving and storing the pixels.
    Attribute: Parameter useMipMaps Whether or not the generated Texture using this PixelMap should generate mip maps.
    Attribute: Parameter drawable The Drawable to be loaded using this PixelMap/Texture, if not undefined.
    Attribute: Parameter texture The Texture to be loaded using this PixelMap.
    */
    system action LoadAsynchronously(File file, Format format, boolean useMipMaps, Drawable drawable, Texture texture)

    /*
    This action will create new PixelMap data to be used in OpenGL with the
    given width, height, and Format.
    */
    system action CreatePixelMap (integer newWidth, integer newHeight, Format newFormat)

    /*
    This action will create OpenGL information for the currently loaded PixelMap
    information.
    */
    system action Define2DImage(integer target, integer mipLevel, integer border)

    /*
    This action will set the Blending to be used for this PixelMap.
    */
    system action SetBlending(Blending newBlend)
    
    /*
    This action will set the scaling filter to the given type.
    */
    system action SetScale(integer scale)

    /*
    This action will free up the memory used to store the pixel information of
    the image. This should only be used when the PixelMap is no longer needed.
    */
    system action Dispose
    
    /*
    This action returns an integer value representing the internal GL format.
    */
    system action GetGLInternalFormat() returns integer

    /* 
    This action will fill the complete bitmap with the given color.
    */
    action Fill(Color color)
        Fill(color:GetColorCode())
    end

    /*
    This action will draw a line on the PixelMap between the two points given
    using the given color.
    */
    action DrawLine(integer x1, integer y1, integer x2, integer y2, Color color)
        DrawLine(x1, y1, x2, y2, color:GetColorCode())
    end

    /*
    This action will draw a hollow rectangle at the given point with the given
    width and height using the given color.
    */
    action DrawRectangle(integer x, integer y, integer width, integer height, Color color)
        DrawRectangle(x, y, width, height, color:GetColorCode())
    end

    /*
    This action will draw a solid rectangle at the given point with the given
    width and height using the given color.
    */
    action FillRectangle(integer x, integer y, integer width, integer height, Color color)
        FillRectangle(x, y, width, height, color:GetColorCode())
    end

    /*
    This action will draw a hollow circle at the given point with the given
    radius using the given color.
    */
    action DrawCircle(integer x, integer y, integer radius, Color color)
        DrawCircle(x, y, radius, color:GetColorCode())
    end

    /*
    This action will draw a solid circle at the given point with the given
    radius using the given color.
    */
    action FillCircle(integer x, integer y, integer radius, Color color)
        FillCircle(x, y, radius, color:GetColorCode())
    end

    /*
    This action will draw a solid triangle using the three given points and the
    given color.
    */
    action FillTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, Color color)
        FillTriangle(x1, y1, x2, y2, x3, y3, color:GetColorCode())
    end

    /* 
    This action will fill the complete bitmap with the given color code.
    */
    system action Fill(integer color)

    /*
    This action will draw a line on the PixelMap between the two points given
    using the given color code.
    */
    system action DrawLine(integer x1, integer y1, integer x2, integer y2, integer color)
    
    /*
    This action will draw a hollow rectangle at the given point with the given
    width and height using the given color code.
    */
    system action DrawRectangle(integer x, integer y, integer width, integer height, integer color)

    /*
    This action will draw a solid rectangle at the given point with the given
    width and height using the given color code.
    */
    system action FillRectangle(integer x, integer y, integer width, integer height, integer color)

    /*
    This action will draw a hollow circle at the given point with the given
    radius using the given color code.
    */
    system action DrawCircle(integer x, integer y, integer radius, integer color)

    /*
    This action will draw a solid circle at the given point with the given
    radius using the given color code.
    */
    system action FillCircle(integer x, integer y, integer radius, integer color)

    /*
    This action will draw a solid triangle using the three given points and the
    given color.
    */
    system action FillTriangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color)

    /*
    This action will return an integer color code representing the color of the
    pixel at the given coordinates.
    */
    system action GetPixel(integer x, integer y) returns integer

    /*
    This action will set the pixel at the given coordinates with the PixelMap's
    current color.
    */
    action SetPixel(integer x, integer y)
        SetPixel(x, y, color:GetColorCode())
    end

    /*
    This action will set the pixel at the given coordinates with the given color.
    */
    action SetPixel(integer x, integer y, Color setColor)
        SetPixel(x, y, setColor:GetColorCode())
    end

    /*
    This action will set the pixel at the given coordinates with the given color
    code.
    */
    system action SetPixel(integer x, integer y, integer code)

end