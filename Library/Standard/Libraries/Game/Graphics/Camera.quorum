package Libraries.Game.Graphics

use Libraries.Compute.Frustum
use Libraries.Compute.Matrix4
use Libraries.Compute.Quaternion
use Libraries.Compute.Vector3
use Libraries.Compute.Ray
use Libraries.Compute.Math
use Libraries.Game.GameStateManager

class Camera 
    
    /*
    The position of the camera.
    */
    Vector3 position

    /*
    The unit length direction vector of the camera.
    */
    Vector3 direction

    /*
    The unit length up vector of the camera.
    */
    Vector3 up

    /*
    The projection matrix of the camera.
    */
    Matrix4 projection

    /*
    The view matrix of the camera.
    */
    Matrix4 view

    /*
    The combined projection and view matrix of the camera.
    */
    Matrix4 combined

    /*
    The inverse of the combined projection and view matrix.
    */
    Matrix4 inverseProjectionView

    /*
    The distance to the near clipping plane. Objects whose distance to the
    camera is shorter than the near value will not appear on camera. The value
    must be positive.
    */
    number near = 1

    /*
    The distance to the far clipping plane. Objects whose distance to the
    camera is farther than the far value will not appear on camera. The value
    must be positive.
    */
    number far = 1000

    /*
    The width of the camera viewport.
    */
    number viewportWidth = 0

    /*
    The height of the camera viewport.
    */
    number viewportHeight = 0

    /*
    The frustum containing the area which can be viewed by the camera.
    */
    Frustum frustum

    private Vector3 calcVector
    private Math math

    on create
        direction:Set(0, 0, -1)
        up:Set(0, 1, 0)

        GameStateManager manager
        viewportWidth = manager:GetGameDisplay():GetWidth()
        viewportHeight = manager:GetGameDisplay():GetHeight()
    end

    /*
    This action recalculates the camera's position and data. This should be used
    after the camera has been manipulated in any way. If this is not called
    manually, then it will be automatically called before the Game class draws
    on the screen.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4

    class Main is Game

        action Main
            action StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            cam:SetPosition(0, 2, 0)
            cam:LookAt(4, 0, 1)
            cam:Update()
            Matrix4 view = cam:GetViewMatrix()
        end

    end

    */
    blueprint action Update

    /*
    The SetZoom action will set the zoom level of the camera. A value of 1 will
    use the default zoom. A smaller value will zoom the camera out, while a
    larger value will zoom the camera in.

    Attribute: Parameter zoom The zoom level.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Camera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Drawable box
            box:LoadFilledRectangle(200, 200, color:Teal())
            box:SetPosition(300, 200)
            Add(box)
        end

        action Update(number seconds)
            Camera cam = GetCamera2D()

            if cam:GetZoom() < 2
                number newZoom = cam:GetZoom() + seconds / 4
                cam:SetZoom(newZoom)
            end
        end
    end

    */
    blueprint action SetZoom(number zoom)

    /*
    The GetZoom action returns the current level of zoom used by the camera. The
    default value is 1.

    Attribute: Returns The current zoom level.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Camera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Drawable box
            box:LoadFilledRectangle(200, 200, color:Teal())
            box:SetPosition(300, 200)
            Add(box)
        end

        action Update(number seconds)
            Camera cam = GetCamera2D()

            if cam:GetZoom() < 2
                number newZoom = cam:GetZoom() + seconds / 4
                cam:SetZoom(newZoom)
            end
        end
    end

    */
    blueprint action GetZoom returns number

    /*
    This action will angle the camera to look at the given point in 3D space.

    Attribute: Parameter x The x-coordinate of the point to look at.
    Attribute: Parameter y The y-coordinate of the point to look at.
    Attribute: Parameter z The z-coordinate of the point to look at.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        number targetX = 0

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Purple())
            box:SetPosition(10, 0, 0)
            Add(box)

            Camera cam = GetCamera3D()
            cam:SetPosition(0, 2, -7)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-1, -1, 2)
            Add(light)
        end

        action Update(number seconds)
            Camera cam = GetCamera3D()

            if targetX < 10
                targetX = targetX + seconds
                cam:LookAt(targetX, 0, 0)
            end
        end
    end

    */
    action LookAt(number x, number y, number z)
        calcVector:Set(x, y, z):Subtract(position):Normalize()
        if not calcVector:IsZero()
            // up and direction must ALWAYS be orthonormal vectors
            number dot = calcVector:DotProduct(up)
            if math:AbsoluteValue(dot - 1) < 0.000000001
                // Collinear
                up:Set(direction):Scale(-1)
            elseif math:AbsoluteValue(dot + 1) < 0.000000001
                // Collinear opposite
                up:Set(direction)
            end
            direction:Set(calcVector)
            NormalizeUp()
        end
    end

    // Is this ever needed as a public action?
    private action NormalizeUp
        calcVector:Set(direction):CrossProduct(up):Normalize()
        up:Set(calcVector):CrossProduct(direction):Normalize()
    end

    /*
    This action will angle the camera to look at the given point in 3D space.

    Attribute: Parameter target A Vector3 containing the point to look at.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Layer2D
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Compute.Vector3

    class Main is Game

        Vector3 target

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(2, 2, 2, color:Purple())
            box:SetPosition(10, 0, 0)
            Add(box)

            Camera cam = GetCamera3D()
            cam:SetPosition(0, 2, -7)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-1, -1, 2)
            Add(light)
        end

        action Update(number seconds)
            Camera cam = GetCamera3D()

            if target:GetX() < 10
                target:SetX(target:GetX() + seconds)
                cam:LookAt(target)
            end
        end
    end

    */
    action LookAt(Vector3 target)
        LookAt(target:GetX(), target:GetY(), target:GetZ())
    end

    /*
    This action rotates the camera the given number of degrees clockwise around
    an axis. The axis is essentially a ray that starts at the center of the 
    camera and points outward. The camera will then rotate clockwise around that
    ray. The ray is defined using three numbers, representing which way it 
    points on the x, y, and z planes, respectively.

    Attribute: Parameter degrees How many degrees to rotate about the axis.
    Attribute: Parameter axisX The x-component of the ray to rotate around.
    Attribute: Parameter axisY The y-component of the ray to rotate around.
    Attribute: Parameter axisZ The z-component of the ray to rotate around.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Camera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Drawable box1
            box1:LoadFilledRectangle(200, 200, color:Pink())
            box1:SetPosition(300, 0)
            Add(box1)

            Drawable box2
            box2:LoadFilledRectangle(200, 200, color:Maroon())
            box2:SetPosition(300, 400)
            Add(box2)
        end

        action Update(number seconds)
            Camera cam = GetCamera2D()
            cam:Rotate(20 * seconds, 0, 0, 1)
        end
    end

    */
    action Rotate(number axisX, number axisY, number axisZ, number degrees)
        direction:Rotate(degrees, axisX, axisY, axisZ)
        up:Rotate(degrees, axisX, axisY, axisZ)
    end

    /*
    This action rotates the camera the given number of degrees around the axis
    given as a 3D vector. The axis is essentially a ray that starts at the 
    center of the camera and points outward. The camera will then rotate 
    clockwise around that ray. 

    Attribute: Parameter axis The ray to rotate around.
    Attribute: Parameter degrees The number of degrees to rotate.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Drawable
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        Vector3 axis

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Drawable box1
            box1:LoadFilledRectangle(200, 200, color:Pink())
            box1:SetPosition(300, 0)
            Add(box1)

            Drawable box2
            box2:LoadFilledRectangle(200, 200, color:Maroon())
            box2:SetPosition(300, 400)
            Add(box2)

            axis:Set(0, 0, 1)
        end

        action Update(number seconds)
            Camera cam = GetCamera2D()
            cam:Rotate(axis, 20 * seconds)
        end
    end
    
    */
    action Rotate(Vector3 axis, number degrees)
        direction:Rotate(axis, degrees)
        up:Rotate(axis, degrees)
    end

    /*
    This action rotates the camera using the rotational information stored in a
    Matrix4 object. Typically the Matrix4 is primed using actions such as
    "SetToRotation" to store the rotational information before calling this
    action.

    Attribute: Example
    
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Matrix4 matrix
            matrix:SetToRotation(0, 1, 0, 45)

            Camera camera = GetCamera3D()
            camera:SetPosition(-3, 3, -3)
            camera:Rotate(matrix)
        end

        action Update(number seconds)
        end
    end
    */
    action Rotate(Matrix4 transform)
        direction:Rotate(transform)
        up:Rotate(transform)
    end

    /*
    This action rotates the camera the given number of degrees around the axis
    given as a 3D vector.
    */
    action Rotate(Quaternion quaternion)
        quaternion:Transform(direction)
        quaternion:Transform(up)
    end

    /*
    This action will rotate the camera clockwise around the given point, with the camera's
    rotation being about the given axis. The camera is rotated by the given
    number of degrees.

    Attribute: Parameter point The point to rotate around.
    Attribute: Parameter axis The axis that determines which direction the camera rotates in.
    Attribute: Parameter degrees How many degrees to rotate about the axis.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        Vector3 point
        Vector3 axis

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            point:Set(0, 0, 0)
            axis:Set(0, 1, 0)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)
        end

        action Update(number seconds)
            Camera cam = GetCamera3D()
            cam:RotateAround(point, axis, 30 * seconds)
        end
    end
    */  
    action RotateAround(Vector3 point, Vector3 axis, number degrees)
        calcVector:Set(point)
        calcVector:Subtract(position)
        Move(calcVector)
        Rotate(axis, degrees)
        calcVector:Rotate(axis, degrees)
        Move(-calcVector:GetX(), -calcVector:GetY(), -calcVector:GetZ())
    end

    /*
    This action will transform the position, direction, and up vector of this
    camera by the given matrix. The matrix should typically be primed using the
    "SetTo..." actions, such as "SetToTranslation" to set the position, 
    "SetToRotation" or "SetToLookAt" to determine the camera's angle, etc.

    Attribute: Parameter transform The Matrix4 containing transformations.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Matrix4 matrix
            matrix:SetToTranslation(-3, 3, 3)
            matrix:SetToRotation(0, 1, 0, 45)

            Camera camera = GetCamera3D()
            camera:Transform(matrix)
        end

        action Update(number seconds)
        end
    end
    */
    action Transform(Matrix4 transform)
        position:Multiply(transform)
        Rotate(transform)
    end

    /*
    This action moves the camera by the given amounts on the x, y, and z planes,
    respectively.

    Attribute: Parameter x How far to move the camera on the x-axis.
    Attribute: Parameter y How far to move the camera on the y-axis.
    Attribute: Parameter z How far to move the camera on the z-axis.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Camera cam = GetCamera3D()
            cam:SetPosition(-8, 2, 0)
        end

        action Update(number seconds)
            Camera cam = GetCamera3D()
            Vector3 position = cam:GetPosition()

            if position:GetX() < 0
                cam:Move(2 * seconds, 0, -1 * seconds)
            end
        end

    end

    */
    action Move(number x, number y, number z)
        position:Add(x, y, z)
    end
    
    /*
    This action moves the camera on the x, y, and z planes by the amounts stored
    in the given Vector3.

    Attribute: Parameter vector A Vector3 describing how far to move on each coordinate plane.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Compute.Vector3

    class Main is Game

        Vector3 moveVector

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Camera cam = GetCamera3D()
            cam:SetPosition(-8, 2, 0)
        end

        action Update(number seconds)
            Camera cam = GetCamera3D()
            Vector3 position = cam:GetPosition()

            if position:GetX() < 0
                moveVector:Set(2 * seconds, 0, -1 * seconds)
                cam:Move(moveVector)
            end
        end

    end

    */
    action Move(Vector3 vector)
        position:Add(vector)
    end

    /*
    This action will set the position of the Camera. It takes a Vector3 object
    containing the new x, y, and z coordinates to use for the camera's position.

    Attribute: Parameter newPosition The new position of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Vector3 position
            position:Set(0, 4, -10)

            Camera cam = GetCamera3D()
            cam:SetPosition(position)
        end

        action Update(number seconds)
        end

    end
    */
    action SetPosition(Vector3 newPosition)
        position:Set(newPosition:GetX(), newPosition:GetY(), newPosition:GetZ())
    end

    /*
    This action will set the position of the Camera. It takes three numbers
    representing the new x, y, and z coordinates to use for the camera's position.

    Attribute: Parameter x The new x-coordinate of the Camera.
    Attribute: Parameter y The new y-coordinate of the Camera.
    Attribute: Parameter z The new z-coordinate of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Camera cam = GetCamera3D()
            cam:SetPosition(0, 4, -10)
        end

        action Update(number seconds)
        end

    end
    */
    action SetPosition(number x, number y, number z)
        position:Set(x, y, z)
    end

    /*
    This action will return the current position of the Camera. The position is
    returned as a Vector3 object containing the current x, y, and z coordinates.
    This is a reference to the actual Vector3 used by the Camera, so changes to
    the vector will effect the Camera.

    Attribute: Returns The Vector3 used by the Camera to store its position.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            Vector3 position = cam:GetPosition()

            output "The default 3D camera position is " + position:GetX()
                 + ", " + position:GetY() + ", " + position:GetZ()
        end

        action Update(number seconds)
        end

    end

    */
    action GetPosition returns Vector3
        return position
    end

    /*
    This action will set the direction of the Camera. It takes a Vector3 object
    which contains the new directional vector to use for the camera.

    Attribute: Parameter newDirection The new direction of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Vector3 direction
            direction:Set(2, -2, 1)

            Camera cam = GetCamera3D()
            cam:SetDirection(direction)
        end

        action Update(number seconds)
        end

    end

    */
    action SetDirection(Vector3 newDirection)
        direction:Set(newDirection:GetX(), newDirection:GetY(), newDirection:GetZ())
    end

    /*
    This action will set the direction of the Camera. It takes three number
    values which represent the new directional vector to use for the camera.

    Attribute: Parameter x The new x-coordinate of the Camera.
    Attribute: Parameter y The new y-coordinate of the Camera.
    Attribute: Parameter z The new z-coordinate of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            cam:SetDirection(2, -2, 1)
        end

        action Update(number seconds)
        end

    end

    */
    action SetDirection(number x, number y, number z)
        direction:Set(x, y, z)
    end

    /*
    This action will return the current direction of the Camera. The direction
    is returned as a Vector3 object. This is a reference to the actual Vector3 
    used by the Camera, so changes to the vector will effect the Camera.

    Attribute: Returns The Vector3 used by this Camera to store its direction.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            Vector3 direction = cam:GetDirection()

            output "The default 3D camera direction is " + direction:GetX()
                 + ", " + direction:GetY() + ", " + direction:GetZ()
        end

        action Update(number seconds)
        end

    end

    */
    action GetDirection returns Vector3
        return direction
    end

    /*
    This action will set the direction that the camera considers to be up. The
    top of the camera will face the direction of the given Vector3 object.

    Attribute: Parameter newUp The direction the top of the Camera will face.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Camera cam = GetCamera3D()

            Vector3 up
            up:Set(cam:GetUp())

            // By scaling all values by -1, we are effectively flipping this upside down.
            up:Scale(-1, -1, -1)

            cam:SetUp(up)
        end

        action Update(number seconds)
        end

    end

    */
    action SetUp(Vector3 newUp)
        up:Set(newUp:GetX(), newUp:GetY(), newUp:GetZ())
    end

    /*
    This action will set the direction that the camera considers to be up. The
    top of the camera will face the direction indicated by the three given
    number values.

    Attribute: Parameter x The direction of the up vector along the x coordinate plane.
    Attribute: Parameter y The direction of the up vector along the y coordinate plane.
    Attribute: Parameter z The direction of the up vector along the z coordinate plane.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model cube
            cube:LoadBox(2, 2, 2, color:Orange())
            Add(cube)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(-0.5, -1.5, 1)
            Add(light)

            Camera cam = GetCamera3D()

            Vector3 up
            up:Set(cam:GetUp())

            // By scaling all values by -1, we are effectively flipping this upside down.
            number x = up:GetX() * -1
            number y = up:GetY() * -1
            number z = up:GetZ() * -1

            cam:SetUp(x, y, z)
        end

        action Update(number seconds)
        end

    end

    */
    action SetUp(number x, number y, number z)
        up:Set(x, y, z)
    end
    
    /*
    This action will return the direction that the camera considers to be up.
    The returned Vector3 indicates the direction that the top of the camera
    faces out towards. This is a reference to the actual Vector3 used by the
    Camera, so changes to the vector will effect the Camera.

    Attribute: Returns The Vector3 used by the Camera to store the "up" direction.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            Vector3 up = cam:GetUp()

            output "The default 3D camera up direction is " + up:GetX()
                 + ", " + up:GetY() + ", " + up:GetZ()
        end

        action Update(number seconds)
        end

    end

    */
    action GetUp returns Vector3
        return up
    end

    /*
    This action will set the distance to the near clipping plane of the camera. 
    Objects that are closer than the distance to the near clipping plane will 
    not be seen by the camera.

    Attribute: Parameter value The distance to the near clipping plane of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            cam:SetNear(0.5)
        end

        action Update(number seconds)
        end

    end

    */
    action SetNear(number value)
        near = value
    end

    /*
    This action will return the distance to the near clipping plane of the
    camera. Objects that are closer than the distance to the near clipping plane
    will not be seen by the camera.

    Attribute: Returns The distance to the near clipping plane of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            
            output "The default distance to the near clipping plane of the 3D camera is " + cam:GetNear()
        end

        action Update(number seconds)
        end

    end

    */
    action GetNear returns number
        return near
    end

    /*
    This action will set the distance to the far clipping plane of the camera. 
    Objects that are farther than the distance to the far clipping plane will 
    not be seen by the camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            cam:SetFar(2000)
        end

        action Update(number seconds)
        end

    end

    */
    action SetFar(number value)
        far = value
    end

    /*
    This action will return the distance to the far clipping plane of the
    camera. Objects that are farther than the distance to the far clipping plane
    will not be seen by the camera.

    Attribute: Returns The distance to the far clipping plane of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            
            output "The default distance to the far clipping plane of the 3D camera is " + cam:GetFar()
        end

        action Update(number seconds)
        end

    end
    */
    action GetFar returns number
        return far
    end

    /*
    This action will set the effective width of the camera lens.
    */
    action SetWidth(number width)
        viewportWidth = width
    end

    /*
    This action will return the effective width of the camera lens.

    Attribute: Returns The width of the Camera lens.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            
            output "The default width of the 3D camera is " + cam:GetWidth()
        end

        action Update(number seconds)
        end

    end
    */
    action GetWidth returns number
        return viewportWidth
    end

    /*
    This action will set the effective height of the camera lens.
    */
    action SetHeight(number height)
        viewportHeight = height
    end

    /*
    This action will return the effective height of the camera lens.

    Attribute: Returns The height of the Camera lens.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            
            output "The default height of the 3D camera is " + cam:GetHeight()
        end

        action Update(number seconds)
        end

    end

    */
    action GetHeight returns number
        return viewportHeight
    end

    /*
    This action will set the effective width and height of the camera lens.
    */
    action SetSize(number width, number height)
        viewportWidth = width
        viewportHeight = height
    end

    /*
    This action returns the calculated projection matrix of the Camera. This is
    primarily used internally by the engine for calculations.

    Attribute: Returns The projection Matrix of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Camera cam = GetCamera3D()
            Matrix4 projection = cam:GetProjectionMatrix()
        end

        action Update(number seconds)
        end

    end

    */
    action GetProjectionMatrix returns Matrix4
        return projection
    end

    /*
    This action returns the calculated view matrix of the camera. This is
    primarily used internally by the engine for calculations.

    Attribute: Returns The view Matrix of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            Matrix4 view = cam:GetViewMatrix()
        end

        action Update(number seconds)
        end

    end

    */
    action GetViewMatrix returns Matrix4
        return view
    end

    /*
    This action returns a matrix containing the combined values of the camera's
    projection and view matrices. This is primarily used internally by the 
    engine for calculations.

    Attribute: Returns The combined projection and view Matrix of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            Matrix4 combined = cam:GetCombinedMatrix()
        end

        action Update(number seconds)
        end

    end

    */
    action GetCombinedMatrix returns Matrix4
        return combined
    end

    /*
    This action returns a matrix containing the inversed combined projection and
    view matrices. This is primarily used internally by the engine for 
    calculations.

    Attribute: Returns The inverse of the combined projection and view Matrices of the Camera.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Matrix4

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            Matrix4 inverse = cam:GetInverseCombinedMatrix()
        end

        action Update(number seconds)
        end

    end

    */
    action GetInverseCombinedMatrix returns Matrix4
        return inverseProjectionView
    end

    /*
    This action returns a frustum containing the area visible to the camera.

    Attribute: Returns The frustum that contains the Camera's visible area.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Frustum

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera3D()
            Frustum frustum = cam:GetFrustum()
        end

        action Update(number seconds)
        end

    end

    */
    action GetFrustum returns Frustum
        return frustum
    end

    /*
    This action will translate a point given in screen coordinates to the world
    space. The calculated point will be on the near plane of the camera.

    Attribute: Returns A Vector3 containing the world coordinates of the given point.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame

            Camera cam = GetCamera2D()
            cam:Move(150, -200, 0)
            Vector3 coordinates = ScreenToWorldCoordinates(100, 100)
        end

        action Update(number seconds)
        end

    end

    */
    action ScreenToWorldCoordinates(number x, number y) returns Vector3
        Vector3 vector
        vector:Set(x, y, 0)
        return ScreenToWorldCoordinates(vector)
    end

    /*
    This action will translate a point given in screen coordinates to the world
    space. If the action is passed a true boolean value, the calculated point
    will be on the near clipping plane of the camera. Otherwise, it will be on
    the far plane.
    */
    action ScreenToWorldCoordinates(number x, number y, boolean useNearPlane) returns Vector3
        Vector3 vector
        if useNearPlane
            vector:Set(x, y, 0)
        else
            vector:Set(x, y, 1)
        end
        return ScreenToWorldCoordinates(vector)
    end

    /*
    This action will translate a point given in screen coordinates to the world
    space. The z-coordinate of the given coordinates will be used to determine
    if the world coordinate returned should be on the near or far plane of the
    camera. A z-coordinate of 0 will get a point on the near plane, and a
    z-coordinate of 1 will get a point on the far plane. The calculated point
    will be contained in the Vector3 object that was passed as a parameter.
    */
    action ScreenToWorldCoordinates(Vector3 coords) returns Vector3
        return ScreenToWorldCoordinates(coords, 0, 0, GetWidth(), GetHeight())
    end

    /*
    This action will translate a point given in screen coordinates to the world
    space. The z-coordinate of the given coordinates will be used to determine
    if the world coordinate returned should be on the near or far plane of the
    camera. A z-coordinate of 0 will get a point on the near plane, and a
    z-coordinate of 1 will get a point on the far plane. The calculated point
    will be contained in the Vector3 object that was passed as a parameter.

    This action also takes the position of the viewport's origin as x and y
    coordinates, and the width and height of the viewport.
    */
    action ScreenToWorldCoordinates(Vector3 coords, number viewportX, number viewportY, number viewportWidth, number viewportHeight) returns Vector3
        number x = coords:GetX() - viewportX
        number y = coords:GetY() - viewportY
        coords:SetX((2 * x) / viewportWidth - 1)
        coords:SetY((2 * y) / viewportHeight - 1)
        coords:SetZ(2 * coords:GetZ() - 1)
        coords:Project(inverseProjectionView)
        return coords
    end

    /*
    This action will return the screen coordinates of a point in the world space.
    The returned point will be stored in a new Vector3 object.
    */
    action WorldToScreenCoordinates(number x, number y, number z) returns Vector3
        Vector3 temp
        temp:Set(x, y, z)
        return WorldToScreenCoordinates(temp)
    end

    /*
    This action will return the screen coordinates of a point in the world space.
    The returned point will be stored in the same coordinate vector used to
    indicate the world coordinates. 
    */
    action WorldToScreenCoordinates(Vector3 coords) returns Vector3
        return WorldToScreenCoordinates(coords, 0, 0, GetWidth(), GetHeight())
    end

    /*
    This action will return the screen coordinates of a point in the world space.
    The returned point will be stored in the same coordinate vector used to
    indicate the world coordinates. 

    This action will calculate the point using the given position and dimensions
    of the viewport.
    */
    action WorldToScreenCoordinates(Vector3 coords, number viewportX, number viewportY, number viewportWidth, number viewportHeight) returns Vector3
        coords:Project(combined)
        coords:SetX(viewportWidth * (coords:GetX() + 1) / 2 + viewportX)
        coords:SetY(viewportHeight * (coords:GetY() + 1) / 2 + viewportY)
        coords:SetZ((coords:GetZ() + 1) / 2)
        return coords
    end

    /*
    GetPickRay will return a ray that begins at the given screen coordinates and
    points in the direction that the camera is viewing. The Ray's position will
    be in world coordinates.
    */
    action GetPickRay(number screenX, number screenY) returns Ray
        return GetPickRay(screenX, screenY, 0, 0, GetWidth(), GetHeight())
    end

    /*
    GetPickRay will return a ray that begins at the given screen coordinates and
    points in the direction that the camera is viewing. The Ray's position will
    be in world coordinates.

    This action will calculate the point using the given position and dimensions
    of the viewport.
    */
    action GetPickRay(number screenX, number screenY, number viewportX, number viewportY, number viewportWidth, number viewportHeight) returns Ray
        Ray ray
        ScreenToWorldCoordinates(ray:GetOrigin():Set(screenX, screenY, 0), viewportX, viewportY, viewportWidth, viewportHeight)
        ScreenToWorldCoordinates(ray:GetDirection():Set(screenX, screenY, 1), viewportX, viewportY, viewportWidth, viewportHeight)
        ray:GetDirection():Subtract(ray:GetOrigin()):Normalize()
        return ray
    end

    /*
    The SetYawPitchRoll action sets the direction and orientation of the
    Camera using yaw, pitch, and roll angles. All angles are in degrees. The
    starting direction of the Camera (when the provided yaw, pitch, and roll are
    0) is a camera pointing directly along the positive Z axis, with the top of
    the camera directly pointing along the positive Y axis.

    The yaw describes how far the camera is rotated along the X/Z axis. It
    effectively controls how the camera turns left and right. A positive value
    will rotate the camera clockwise (typically to the right).

    The pitch describes how far the camera is angled up or down. The pitch value
    should typically be between -90 and 90 degrees. Larger values will cause the
    camera to look in the opposite direction specified by the yaw value. For
    pitch values between -90 and 90, positive values angle the camera upwards,
    and negative values angle it downwards.

    The roll describes how the top of the camera is oriented. A roll value of 0
    will angle the camera so the top of the camera points upward, towards the
    positive Y axis. A positive roll value "twists" the camera clockwise, and a
    negative value will twist it counter-clockwise.

    Attribute: Parameter yaw The yaw angle, measured in degrees.
    Attribute: Parameter pitch The pitch angle, measured in degrees.
    Attribute: Parameter roll The roll angle, measured in degrees.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Camera
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model box
            box:LoadBox(2, 4, 2, color:Green())
            box:SetPosition(0, 0, 0)
            Add(box)

            Model floor
            floor:LoadBox(10, 2, 10, color:Maroon())
            floor:SetPosition(0, -3, 0)
            Add(floor)

            DirectionalLight light
            light:SetColor(color:White())
            light:SetDirection(2, -2, 4)
            Add(light)

            Camera camera = GetCamera3D()
            camera:SetPosition(-5, 2, -5)
            // The camera will be looking 45 degrees to the right and 30 degrees
            // down, and be tilted 30 degrees clockwise.
            camera:SetYawPitchRoll(45, -30, 30)
        end
    end
    */
    action SetYawPitchRoll(number yaw, number pitch, number roll)
        number y = math:DegreesToRadians(yaw)
        number p = math:DegreesToRadians(pitch)
        number cosP = math:Cosine(p)
        direction:SetX(cosP * math:Sine(y))
        direction:SetY(math:Sine(p))
        direction:SetZ(cosP * math:Cosine(y))
        direction:Normalize()

        calcVector:Set(direction:GetX(), 0, direction:GetZ())
        calcVector:Normalize()
        calcVector:Rotate(90, 0, 1, 0)

        up:Set(direction):CrossProduct(calcVector):Normalize()
        up:Rotate(direction, -roll)
    end
end