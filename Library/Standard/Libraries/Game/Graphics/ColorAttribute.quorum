package Libraries.Game.Graphics

/*
The ColorAttribute class represents a single visual property of a 3D object or
scene which can be described as a color. 

Attribute: Author William Allee

Attribute: Example

use Libraries.Game.Game
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.PointLight
use Libraries.Containers.Array

class Main is Game

    Model sphere

    action Main
        StartGame()
    end

    action CreateGame
        Color color
        //Model sphere
        sphere:LoadSphere(2, 2, 2, color:Purple())
        Add(sphere)

        AmbientLight ambient
        ambient:SetColor(0.6, 0.6, 0.6, 1)
        SetAmbientLight(ambient)
        
        PointLight light
        light:SetColor(0.8, 0.8, 0.8, 1)
        light:SetPosition(-3, 1, -3)
        light:SetIntensity(15)
        Add(light)

        Model orbiter
        orbiter:LoadSphere(1, 1, 1, color:Orange())
        orbiter:SetPosition(-3, 0, 0)
        sphere:Add(orbiter)

        // When loading a primitive, the resulting Model will contain a single
        // material in the array returned by GetMaterials().
        Array<Material> materials = sphere:GetMaterials()
        Material material = materials:Get(0)

        Array<Material> orbiterMaterials = orbiter:GetMaterials()
        Material orbiterMaterial = orbiterMaterials:Get(0)

        // By adding a specular color attribute to each of these materials, the
        // models will now reflect specular light.
        ColorAttribute specular
        specular:SetAttribute(specular:GetSpecularValue(), color:White())
        material:Add(specular)
        orbiterMaterial:Add(specular)
    end

    action Update(number seconds)
        // Rotating the Models will help us see the added specular attribute at work.
        sphere:Rotate(0, 1, 0, 30 * seconds)
    end
end
*/
class ColorAttribute is Attribute
    public Color color

    public constant text DIFFUSE_ALIAS = "diffuseColor"
    public constant text SPECULAR_ALIAS = "specularColor"
    public constant text AMBIENT_ALIAS = "ambientColor"
    public constant text EMISSIVE_ALIAS = "emissiveColor"
    public constant text REFLECTION_ALIAS = "reflectionColor"
    public constant text AMBIENT_LIGHT_ALIAS = "ambientLightColor"
    public constant text FOG_ALIAS = "fogColor"

    /*
    The CreateAmbient action will create a new ColorAttribute using the
    Ambient value. This attribute can be added to the Material of a Model to set
    its ambient color.

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support it. The
    AmbientLight attribute, however, is functional and serves a similar purpose.

    Attribute: Parameter setColor The color to use for the Ambient attribute.

    Attribute: Returns A ColorAttribute set with the Ambient value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            ColorAttribute ambient = attribute:CreateAmbient(color:Green())
            material:Add(ambient)
        end
    end
    */
    action CreateAmbient(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetAmbientValue(), setColor)
        return attribute
    end

    /*
    The CreateAmbient action will create a new ColorAttribute using the
    Ambient value. This attribute can be added to the Material of a Model to set
    its ambient color.

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support it. The
    AmbientLight attribute, however, is functional and serves a similar purpose.

    Attribute: Parameter red The red component of the color value to use for the ambient attribute.
    Attribute: Parameter green The green component of the color value to use for ambient attribute.
    Attribute: Parameter blue The blue component of the color value to use for ambient attribute.
    Attribute: Parameter alpha The alpha component of the color value to use for ambient attribute.

    Attribute: Returns A ColorAttribute set with the Ambient value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            ColorAttribute ambient = attribute:CreateAmbient(0, 1, 0, 1)
            material:Add(ambient)
        end
    end
    */
    action CreateAmbient(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetAmbientValue(), setColor)
        return attribute
    end

    /*
    The CreateDiffuse action will create a new ColorAttribute using the
    Diffuse value. This attribute can be added to the Material of a Model. Doing
    so will make the faces of the Model appear to be the given diffuse color.

    Attribute: Parameter setColor The color to use for the Diffuse attribute.

    Attribute: Returns A ColorAttribute set with the Diffuse value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            // When we loaded our Model as an orange sphere, the Model's
            // material was already given a diffuse attribute with an orange
            // color. By adding another one with a different color, we overwrite
            // the old color.
            ColorAttribute diffuse = attribute:CreateDiffuse(color:Cyan())
            material:Add(diffuse)
        end
    end
    */
    action CreateDiffuse(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetDiffuseValue(), setColor)
        return attribute
    end

    /*
    The CreateDiffuse action will create a new ColorAttribute using the
    Diffuse value. This attribute can be added to the Material of a Model. Doing
    so will make the faces of the Model appear to be the given diffuse color.

    Attribute: Parameter red The red component of the color value to use for the diffuse attribute.
    Attribute: Parameter green The green component of the color value to use for diffuse attribute.
    Attribute: Parameter blue The blue component of the color value to use for diffuse attribute.
    Attribute: Parameter alpha The alpha component of the color value to use for diffuse attribute.

    Attribute: Returns A ColorAttribute set with the Diffuse value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            // When we loaded our Model as an orange sphere, the Model's
            // material was already given a diffuse attribute with an orange
            // color. By adding another one with a different color, we overwrite
            // the old color.
            ColorAttribute diffuse = attribute:CreateDiffuse(0, 1, 1, 1)
            material:Add(diffuse)
        end
    end
    */
    action CreateDiffuse(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetDiffuseValue(), setColor)
        return attribute
    end

    /*
    The CreateSpecular action will create a new ColorAttribute using the
    Specular value. This attribute can be added to the Material of a Model
    to give the Model specular highlighting - most typically seen as a shiny
    spot reflecting light brightly, similar to a shiny metallic object.

    Attribute: Parameter setColor The color to use for the emissive attribute.

    Attribute: Returns A ColorAttribute set with the Specular value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            // Typically, specular lighting looks best when it's set to white,
            // but to make it easier to distinguish from the normal lighting in
            // the scene, we set it to green in this example.
            ColorAttribute specular = attribute:CreateSpecular(color:Green())
            material:Add(specular)
        end
    end
    */
    action CreateSpecular(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetSpecularValue(), setColor)
        return attribute
    end

    /*
    The CreateSpecular action will create a new ColorAttribute using the
    Specular value. This attribute can be added to the Material of a Model
    to give the Model specular highlighting - most typically seen as a shiny
    spot reflecting light brightly, similar to a shiny metallic object.

    Attribute: Parameter red The red component of the color value to use for the specular attribute.
    Attribute: Parameter green The green component of the color value to use for specular attribute.
    Attribute: Parameter blue The blue component of the color value to use for specular attribute.
    Attribute: Parameter alpha The alpha component of the color value to use for specular attribute.

    Attribute: Returns A ColorAttribute set with the Specular value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            // Typically, specular lighting looks best when it's set to white,
            // but to make it easier to distinguish from the normal lighting in
            // the scene, we set it to green in this example.
            ColorAttribute specular = attribute:CreateSpecular(0, 1, 0, 1)
            material:Add(specular)
        end
    end
    */
    action CreateSpecular(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetSpecularValue(), setColor)
        return attribute
    end

    /*
    The CreateReflection action will create a new ColorAttribute using the
    Reflection value. This attribute is meant to be used in conjunction with a
    reflection TextureAttribute. The two used together signify the color of the
    reflected scene and the visual appearance of the reflection, respectively.

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support it.

    Attribute: Parameter setColor The color to apply to the reflection.
    */
    action CreateReflection(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetReflectionValue(), setColor)
        return attribute
    end

    /*
    The CreateReflection action will create a new ColorAttribute using the
    Reflection value. This attribute is meant to be used in conjunction with a
    reflection TextureAttribute. The two used together signify the color of the
    reflected scene and the visual appearance of the reflection, respectively.

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support it.

    Attribute: Parameter red The red component of the reflective color.
    Attribute: Parameter green The green component of the reflective color.
    Attribute: Parameter blue The blue component of the reflective color.
    Attribute: Parameter alpha The alpha component of the reflective color.
    */
    action CreateReflection(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetReflectionValue(), setColor)
        return attribute
    end
    
    /*
    The CreateEmissive action will create a new ColorAttribute using the
    Emissive value. This attribute can be added to the Material of a Model
    to give the Model a "glow", as if emitting light.

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support emissive
    lighting.

    Attribute: Parameter setColor The color to use for the emissive attribute.

    Attribute: Returns A ColorAttribute set with the Emissive value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model box
            box:LoadBox(2, 2, 2, color:Orange())
            Add(box)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(15)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = box:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            ColorAttribute emissive = attribute:CreateEmissive(color:White())
            material:Add(emissive)
        end
    end
    */
    action CreateEmissive(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetEmissiveValue(), setColor)
        return attribute
    end

    /*
    The CreateEmissive action will create a new ColorAttribute using the
    Emissive value. This attribute can be added to the Material of a Model
    to give the Model a "glow", as if emitting light.

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support emissive
    lighting.

    Attribute: Parameter red The red component of the color value to use for the emissive attribute.
    Attribute: Parameter green The green component of the color value to use for emissive attribute.
    Attribute: Parameter blue The blue component of the color value to use for emissive attribute.
    Attribute: Parameter alpha The alpha component of the color value to use for emissive attribute.

    Attribute: Returns A ColorAttribute set with the Emissive value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model box
            box:LoadBox(2, 2, 2, color:Orange())
            Add(box)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(15)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = box:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            ColorAttribute emissive = attribute:CreateEmissive(0.8, 0.8, 0.8, 1)
            material:Add(emissive)
        end
    end
    */
    action CreateEmissive(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetEmissiveValue(), setColor)
        return attribute
    end

    /*
    The CreateAmbientLight action will create a new ColorAttribute using the
    AmbientLight value. This attribute can be added to an Environment to set the
    ambient lighting for a scene, or added directly to the Material of a Model
    to set the ambient lighting for just that Model.

    Attribute: Parameter setColor The color value of the ambient lighting to use.

    Attribute: Returns A ColorAttribute set with the AmbientLight value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model box
            box:LoadBox(2, 2, 2, color:Orange())
            Add(box)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(15)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = box:GetMaterials()
            Material material = materials:Get(0)

            // Adding an ambient light to the Model directly will make sure that,
            // regardless of the light in the scene, the box always has at least as
            // much color as the ambient light value. This will override the scene's
            // normal ambient lighting for this object, if there is any.
            ColorAttribute attribute
            ColorAttribute ambientLight = attribute:CreateAmbientLight(color:Gray())
            material:Add(ambientLight)
        end
    end
    */
    action CreateAmbientLight(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetAmbientLightValue(), setColor)
        return attribute
    end

    /*
    The CreateAmbientLight action will create a new ColorAttribute using the
    AmbientLight value. This attribute can be added to an Environment to set the
    ambient lighting for a scene, or added directly to the Material of a Model
    to set the ambient lighting for just that Model.

    Attribute: Parameter red The red component of the color to use for ambient lighting.
    Attribute: Parameter green The green component of the color to use for ambient lighting.
    Attribute: Parameter blue The blue component of the color to use for ambient lighting.
    Attribute: Parameter alpha The alpha component of the color to use for ambient lighting.

    Attribute: Returns A ColorAttribute set with the AmbientLight value.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model box
            box:LoadBox(2, 2, 2, color:Orange())
            Add(box)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(15)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = box:GetMaterials()
            Material material = materials:Get(0)

            // Adding an ambient light to the Model directly will make sure that,
            // regardless of the light in the scene, the box always has at least as
            // much color as the ambient light value. This will override the scene's
            // normal ambient lighting for this object, if there is any.
            ColorAttribute attribute
            ColorAttribute ambientLight = attribute:CreateAmbientLight(0.5, 0.5, 0.5, 1)
            material:Add(ambientLight)
        end
    end
    */
    action CreateAmbientLight(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetAmbientLightValue(), setColor)
        return attribute
    end

    /*
    The CreateFog action will create a new ColorAttribute using the Fog value.
    This can be applied to an Environment to make distant objects appear 
    obscured (i.e., there is fog between the object and the viewer).

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support it.

    Attribute: Parameter setColor The color to use for the Fog attribute.
    */
    action CreateFog(Color setColor) returns ColorAttribute
        ColorAttribute attribute
        attribute:SetAttribute(GetFogValue(), setColor)
        return attribute
    end

    /*
    The CreateFog action will create a new ColorAttribute using the Fog value.
    This can be applied to an Environment to make distant objects appear 
    obscured (i.e., there is fog between the object and the viewer).

    Note that although the Game engine infrastructure will allow for use of this
    type of Attribute, the rendering step does not currently support it.

    Attribute: Parameter red The red component of the reflective color.
    Attribute: Parameter green The green component of the reflective color.
    Attribute: Parameter blue The blue component of the reflective color.
    Attribute: Parameter alpha The alpha component of the reflective color.
    */
    action CreateFog(number red, number green, number blue, number alpha) returns ColorAttribute
        Color setColor
        setColor:SetColor(red, green, blue, alpha)
        ColorAttribute attribute
        attribute:SetAttribute(GetFogValue(), setColor)
        return attribute
    end

    /*
    The SetAttribute action is used to set the type and color of this
    ColorAttribute. The type should be set using one of the actions in this
    class that provide a type code, such as GetSpecularValue or GetDiffuseValue.

    Attribute: Parameter setType An integer code representing the type of this Attribute.
    Attribute: Parameter setColor The color to use for this ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.PointLight
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            Model sphere
            sphere:LoadSphere(2, 2, 2, color:Orange())
            Add(sphere)

            PointLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetPosition(-3, 2, -3)
            light:SetIntensity(20)
            Add(light)

            // When loading a primitive, the resulting Model will contain a single
            // material in the array returned by GetMaterials().
            Array<Material> materials = sphere:GetMaterials()
            Material material = materials:Get(0)

            ColorAttribute attribute
            attribute:SetAttribute(attribute:GetSpecularValue(), color:Green())
            material:Add(attribute)
        end
    end
    */
    action SetAttribute(integer setType, Color setColor)
        parent:Attribute:SetAttribute(setType)
        if not SupportsAttribute(setType)
            alert("The given attribute type with integer value " + setType + " is not supported by ColorAttribute.")
        end
        if setColor not= undefined
            color = setColor
        end
    end

    /*
    The Copy action returns a new Attribute that is a copy of this
    ColorAttribute object.

    Attribute: Returns A new Attribute that is a copy of this object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Attribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            ColorAttribute attribute
            attribute:SetAttribute(attribute:GetDiffuseValue(), color:Green())
            Attribute copy = attribute:Copy()
        end
    end
    */
    action Copy returns Attribute
        ColorAttribute new
        new:SetAttribute(parent:Attribute:type, color)
        return new
    end

    /*
    This action returns whether or not the given attribute type is supported by
    the ColorAttribute class.

    Attribute: Parameter type An integer code representing an Attribute type.

    Attribute: Returns Whether or not the given Attribute type is supported by the ColorAttribute class.

    Attribute: Example
    
    use Libraries.Game.Game
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            ColorAttribute attribute
            boolean supports = attribute:SupportsAttribute(attribute:GetDiffuseValue())
            output "The value of supports is " + supports
        end
    end
    */
    system action SupportsAttribute(integer type) returns boolean

    /*
    This action returns the integer value representing a Diffuse color attribute.

    Attribute: Returns An integer code representing a Diffuse ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetDiffuseValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetDiffuseValue returns integer

    /*
    This action returns the integer value representing a Specular color attribute.

    Attribute: Returns An integer code representing a Specular ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetSpecularValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetSpecularValue returns integer

    /*
    This action returns the integer value representing an Ambient color attribute.

    Attribute: Returns An integer code representing an Ambient ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetAmbientValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetAmbientValue returns integer

    /*
    This action returns the integer value representing an Emissive color attribute.

    Attribute: Returns An integer code representing an Emissive ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetEmissiveValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetEmissiveValue returns integer

    /*
    This action returns the integer value representing a Reflection color attribute.

    Attribute: Returns An integer code representing a Reflection ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetReflectionValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetReflectionValue returns integer

    /*
    This action returns the integer value representing an AmbientLight color attribute.

    Attribute: Returns An integer code representing an AmbientLight ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetAmbientLightValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetAmbientLightValue returns integer

    /*
    This action returns the integer value representing a Fog color attribute.

    Attribute: Returns An integer code representing a Fog ColorAttribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color
            ColorAttribute attribute

            integer value = attribute:GetFogValue()
            attribute:SetAttribute(value, color:Green())
        end
    end
    */
    system action GetFogValue returns integer

    /*
    Returns the sum of all color attribute values.

    Attribute: Returns The sum of all integer codes of attribute types supported by this class.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.ColorAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            ColorAttribute attribute

            integer mask = attribute:GetColorAttributeMask()

            output "The ColorAttribute's mask is " + mask + "."
        end
    end
    */
    system action GetColorAttributeMask returns integer
    
end