package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Language.Object

/*
The Attribute class represents a single visual property that is to be used
during 3D rendering. Each Attribute contains data that describes how to handle
a step during the rendering process. The base Attribute class can not be
instantiated directly, but there are many classes that inherit from it, such as 
the ColorAttribute and TextureAttribute classes.

Attribute: Author William Allee
*/
class Attribute 
    
    /*
    An integer code that describes a specific type of Attribute.
    */
    public integer type = 0 //long?

    private integer typeBit = 0

    /*
    GetAttributeType will take a text alias for a particular type of Attribute
    and return an integer code representing that type. Each class that inherits
    from Attribute will contain a series of public constant text fields that
    contain an alias for a given type. The contents of this Attribute are not
    considered during this action, and can be ignored.

    Attribute: Parameter alias A text alias describing an Attribute type.

    Attribute: Returns An integer code representing the described Attribute type.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.TextureAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Using the TextureAttribute class, which inherits from Attribute.
            TextureAttribute attribute
            integer code = attribute:GetAttributeType(attribute:DIFFUSE_ALIAS)

            output "The type code for a diffuse TextureAttribute is " + code
        end
    end
    */
    system action GetAttributeType(text alias) returns integer//long?


    /*
    GetAttributeAlias will take an integer code for a particular type of 
    Attribute and return a text alias representing that type. Each class that 
    inherits from Attribute will contain a series of actions that will return an
    integer code for a given type. The contents of this Attribute are not
    considered during this action, and can be ignored.

    Attribute: Parameter type An integer code describing an Attribute type.

    Attribute: Returns A text alias representing the described Attribute type.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.TextureAttribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Using the TextureAttribute class, which inherits from Attribute.
            TextureAttribute attribute
            text alias = attribute:GetAttributeAlias(attribute:GetDiffuseValue())

            output "The alias for a diffuse TextureAttribute is " + alias
        end
    end
    */
    system action GetAttributeAlias(integer /*long?*/ type) returns text

    /*
    SetAttribute will set data used by this Attribute. Note that most classes
    which inherit from Attribute will have their own implementations of
    SetAttribute which may require different parameters - e.g., to use
    SetAttribute in the ColorAttribute class, it requires both an integer type,
    but also a color. Most users should not use this action directly.

    Attribute: Parameter setType The type to set this Attribute to.
    */
    action SetAttribute(integer /*long?*/ setType)
        type = setType
        typeBit = setType:TrailingZeros()
    end

    /*
    This action will return a copy of this Attribute.
    
    Attribute: Returns A copy of this Attribute.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Attribute
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Using the ColorAttribute class, which inherits from Attribute.
            ColorAttribute attribute
            Color green
            green:SetColor(0, 1, 0, 1)
            attribute:SetAttribute(attribute:GetDiffuseValue(), green)

            Attribute copiedAttribute = attribute:Copy()
        end
    end
    */
    blueprint action Copy returns Attribute

    /*
    This action will return a hash code that identifies an Attribute by its type.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Attribute
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            // Using the ColorAttribute class, which inherits from Attribute.
            ColorAttribute attribute
            Color green
            green:SetColor(0, 1, 0, 1)
            attribute:SetAttribute(attribute:GetDiffuseValue(), green)

            output "The hash code for the attribute is " + attribute:GetHashCode()
        end
    end
    */
    action HashCode returns integer
        return 7489 * typeBit
    end

    /*
    This action will test to see if two Attributes are of the same type. Note
    that it will not test if the contents of the Attributes are the same.

    Attribute: Parameter other The Attribute to compare against.

    Attribute: Returns Whether or not the two attributes are of the same type.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Game.Graphics.Attribute
    use Libraries.Game.Graphics.Color

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            // Using the ColorAttribute class, which inherits from Attribute.
            ColorAttribute attribute1

            attribute1:SetAttribute(attribute1:GetDiffuseValue(), color:Green())
            Attribute attribute2 = attribute1:Copy()

            output "attribute1 = attribute2 is " + attribute1:Equals(attribute2)

        end
    end
    */
    action Equals(Attribute other) returns boolean
        return other:HashCode() = HashCode()
    end

    /*
    This action determines if the given object is equal to this Attribute.

    Attribute: Parameter object The object to be compared.

    Attribute: Returns True if the object is an Attribute with the same type, otherwise it returns false.
    */ 
    action Equals(Object object) returns boolean
        if object = undefined
            return false
        elseif not (object is Attribute)
            return false
        end

        Attribute temp = cast(Attribute, object)
        if temp = me
            return true
        elseif type not= temp:type
            return false
        end
        return Equals(temp)
    end
    
end