package Libraries.Game.Graphics

use Libraries.Game.Graphics.ModelData.Node
use Libraries.Game.Graphics.ModelData.Animation
use Libraries.Game.Graphics.ModelData.NodePart
use Libraries.Game.Graphics.ModelData.NodeKeyframe
use Libraries.Game.Graphics.ModelData.NodeAnimation
use Libraries.Game.Graphics.ModelData.MeshPart
use Libraries.Game.Graphics.ModelBuilder
use Libraries.Game.Graphics.ModelLoaders.ModelReader
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Containers.HashTable
use Libraries.Compute.Matrix4
use Libraries.Compute.Vector3
use Libraries.Compute.Quaternion
use Libraries.Interface.Item3D
use Libraries.Game.BoundingBox
use Libraries.System.File
use Libraries.Game.Collision.Shapes.all

/*
The Model class represents a 3D model to be drawn on the screen by the Game
engine. The Model can load data from .obj, .g3db, or .g3dj files, or can be set
to some primitive shapes (such as boxes or cylinders).

Attribute: Author William Allee

Attribute: Example

use Libraries.Game.Game
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color

class Main is Game

    Model cube

    action Main
        StartGame()
    end

    action CreateGame
        Color cyan
        cyan:SetColor(0, 0.75, 1, 1)
        
        cube:LoadBox(2, 2, 2, cyan)
        Add(cube)
    end

    action Update(number seconds)
        cube:Rotate(0, 1, 0, 45 * seconds)
    end
end
*/
class Model is Item3D
    
    Array<Material> materials
    Array<Node> nodes
    Array<Animation> animations
    ModelBlueprint modelBlueprint = undefined
    //public Matrix4 transform = undefined
    //public Object userData // Used to pass data to the shader

    // Static in libGDX: is this necessary?
    private boolean defaultShareKeyframes = true

    private HashTable<NodePart, HashTable<Node, Matrix4>> nodePartBones

    /*
    This action returns an array containing all Material objects used by this
    Model.

    Attribute: Returns The array containing the Materials used by this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Containers.Array

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Color cyan
            cyan:SetColor(0, 0.75, 1, 1)

            cube:LoadBox(2, 2, 2, cyan)
            Add(cube)

            Array<Material> materials = cube:GetMaterials()
            output "This model uses " + materials:GetSize() + " material(s)."
        end
    end

    */
    action GetMaterials returns Array<Material>
        return materials
    end

    /*
    This action returns an array containing all Node objects used by this
    Model.

    Attribute: Returns The array containing the Nodes used by this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ModelData.Node
    use Libraries.Containers.Array

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Color cyan
            cyan:SetColor(0, 0.75, 1, 1)

            cube:LoadBox(2, 2, 2, cyan)
            Add(cube)

            Array<Node> nodes = cube:GetNodes()
            output "This model uses " + nodes:GetSize() + " node(s)."
        end
    end

    */
    action GetNodes returns Array<Node>
        return nodes
    end

    /*
    This action returns an array containing all Animation objects used by this
    Model.

    Attribute: Returns The array containing the Animations used by this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ModelData.Animation
    use Libraries.Containers.Array

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Color cyan
            cyan:SetColor(0, 0.75, 1, 1)

            cube:LoadBox(2, 2, 2, cyan)
            Add(cube)

            Array<Animation> animations = cube:GetAnimations()
            output "This model uses " + animations:GetSize() + " animation(s)."
        end
    end

    */
    action GetAnimations returns Array<Animation>
        return animations
    end

    /*
    Sets a reference to the ModelBlueprint that this model was loaded from.
    */
    private action SetModelBlueprint(ModelBlueprint schematic)
        modelBlueprint = schematic
    end

    /*
    This action will return the ModelBlueprint that this model was loaded from.

    Attribute: Returns The ModelBlueprint that this Model was loaded from.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.ModelBlueprint

    class Main is Game

        Model cube
        ModelBlueprint schematic = undefined

        action Main
            StartGame()
        end

        action CreateGame
            Color cyan
            cyan:SetColor(0, 0.75, 1, 1)

            cube:LoadBox(2, 2, 2, cyan)
            Add(cube)

            schematic = cube:GetModelBlueprint()
        end
    end

    */
    action GetModelBlueprint returns ModelBlueprint
        return modelBlueprint
    end

    /*
    This action will return the identifier for the ModelBlueprint that this 
    model was loaded from.

    Attribute: Returns A text value identifying the ModelBlueprint used to load this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Color cyan
            cyan:SetColor(0, 0.75, 1, 1)

            cube:LoadBox(2, 2, 2, cyan)
            Add(cube)

            text id = cube:GetBlueprintKey()
            output "The cube's ModelBlueprint ID is " + id
        end
    end

    */
    action GetBlueprintKey returns text
        return modelBlueprint:id
    end

    /*
    This action will load a model from a given model file. The supported file
    extensions are .obj, .g3db, and .g3dj.

    Attribute: Parameter file The file containing the model data to be loaded.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.System.File
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model hat

        action Main
            StartGame()
        end

        action CreateGame
            File file
            file:SetPath("Sombrero.obj")
            hat:Load(file)
            Add(hat)
        end
    end

    */
    action Load(File file)
        ModelBlueprint schematic = GetCachedBlueprint(file)
        Load(schematic)
    end

    /*
    This action will load the Model file with the given file name from the
    default file directory. The supported file extensions are .obj, .g3db, and
    .g3dj.

    Attribute: Parameter fileName The name of the file to be loaded.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.System.File
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model cup

        action Main
            StartGame()
        end

        action CreateGame
            cup:Load("brown-mug.obj")
            Add(cup)
        end
    end
    */
    action Load(text fileName)
        File file
        file:SetPath(fileName)
        Load(file)
    end

    /*
    This action will search the cached blueprint hash table for a ModelBlueprint
    that was loaded from the given file. If the blueprint was not loaded before,
    it will be loaded and cached.
    */
    private system action GetCachedBlueprint(File file) returns ModelBlueprint

    /*
    This action will return the base (that is, unscaled) dimensions of the axis
    aligned bounding box of the ModelBlueprint. This will return a cached value
    if there is one, or compute the dimensions then cache the result.
    */
    private system action GetCachedDimensions(ModelBlueprint schematic) returns Vector3
    
    /*
    This action will load the Model with a box with the given width, height,
    depth, and color.

    Attribute: Parameter width How long the box should be along the x-axis.
    Attribute: Parameter height How long the box should be along the y-axis.
    Attribute: Parameter depth How long the box should be along the z-axis.
    Attribute: Parameter color What color the box should be.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Color cyan
            cyan:SetColor(0, 0.75, 1, 1)

            cube:LoadBox(2, 2, 2, cyan)
            Add(cube)
        end
    end

    */
    action LoadBox(number width, number height, number depth, Color color)
        ModelBlueprint schematic = GetCachedBox(width, height, depth, color)
        Load(schematic)
        SetDiffuseColor(color)
        Box box
        box:Set(width, height, depth)
        SetShape(box)
    end

    /*
    This action will load the Model with a box with the given width, height,
    and depth. The box will use the texture located in the provided file.

    Attribute: Parameter width How long the box should be along the x-axis.
    Attribute: Parameter height How long the box should be along the y-axis.
    Attribute: Parameter depth How long the box should be along the z-axis.
    Attribute: Parameter textureFile A file containing a texture to show on each side of the box.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.System.File

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            File texture
            texture:SetPath("Crate.png")

            cube:LoadBox(2, 2, 2, texture)
            Add(cube)
        end
    end

    */
    action LoadBox(number width, number height, number depth, File textureFile)
        Texture texture
        texture:LoadFromFile(textureFile)
        LoadBox(width, height, depth, texture)
    end

    /*
    This action will load the Model with a box with the given width, height,
    and depth. The box will use the texture located at the provided file path.

    Attribute: Parameter width How long the box should be along the x-axis.
    Attribute: Parameter height How long the box should be along the y-axis.
    Attribute: Parameter depth How long the box should be along the z-axis.
    Attribute: Parameter textureFile The name of a texture file to be displayed on each side of the box.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            cube:LoadBox(2, 2, 2, "Box.png")
            Add(cube)
        end
    end

    */
    action LoadBox(number width, number height, number depth, text textureFile)
        Texture texture
        texture:LoadFromFile(textureFile)
        LoadBox(width, height, depth, texture)
    end

    /*
    This action will load the Model with a box with the given width, height,
    and depth. The box will use the texture that has been loaded by the given
    Drawable.

    Attribute: Parameter width How long the box should be along the x-axis.
    Attribute: Parameter height How long the box should be along the y-axis.
    Attribute: Parameter depth How long the box should be along the z-axis.
    Attribute: Parameter drawable A loaded Drawable containing an image to be used on each side of the box.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Drawable logo
            logo:Load("Logo.png")

            cube:LoadBox(2, 2, 2, logo)
            Add(cube)
        end
    end

    */
    action LoadBox(number width, number height, number depth, Drawable drawable)
        Texture texture = drawable:GetTexture()
        LoadBox(width, height, depth, texture)
    end

    /*
    This action will load the Model with a box with the given width, height,
    depth, and texture.

    Attribute: Parameter width How long the box should be along the x-axis.
    Attribute: Parameter height How long the box should be along the y-axis.
    Attribute: Parameter depth How long the box should be along the z-axis.
    Attribute: Parameter drawable A loaded Drawable containing an image to be used on each side of the box.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Texture

    class Main is Game

        Model cube

        action Main
            StartGame()
        end

        action CreateGame
            Texture texture
            texture:LoadFilledCircle(150)

            cube:LoadBox(2, 2, 2, texture)
            Add(cube)
        end
    end

    */
    action LoadBox(number width, number height, number depth, Texture texture)
        ModelBlueprint schematic = GetCachedBox(width, height, depth, texture)
        Load(schematic)
        SetTexture(texture)
        Box box
        box:Set(width, height, depth)
        SetShape(box)
    end

    /*
    This action will load the Model with a cylinder with the given width,
    height, depth, and color. The default cylinder will be made using 16
    straight sides to simulate the curve of the cylinder.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter color What color the cylinder should be.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            Color orange
            orange:SetColor(1, 0.5, 0, 1)

            tube:LoadCylinder(2, 2, 2, orange)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, Color color)
        LoadCylinder(width, height, depth, 16, color)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and color. The provided number of divisions will be used to simulate the
    curve of the cylinder - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter divisions How many straight edges to use to simulate the curve of the cylinder.
    Attribute: Parameter color What color the cylinder should be.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            Color orange
            orange:SetColor(1, 0.5, 0, 1)

            tube:LoadCylinder(2, 2, 2, 8, orange)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, integer divisions, Color color)
        ModelBlueprint schematic = GetCachedCylinder(width, height, depth, divisions, color)
        Load(schematic)
        SetDiffuseColor(color)
        Cylinder cylinder
        cylinder:Set(width, height, depth)
        SetShape(cylinder)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and texture. The provided number of divisions will be used to simulate the
    curve of the cylinder - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter divisions How many straight edges to use to simulate the curve of the cylinder.
    Attribute: Parameter textureFile A texture file containing the texture to display on the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.System.File

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            File image
            image:SetPath("Steel.png")

            tube:LoadCylinder(2, 2, 2, 8, image)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, integer divisions, File textureFile)
        Texture texture
        texture:LoadFromFile(textureFile)
        LoadCylinder(width, height, depth, divisions, texture)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and texture. The provided number of divisions will be used to simulate the
    curve of the cylinder - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter divisions How many straight edges to use to simulate the curve of the cylinder.
    Attribute: Parameter textureFile The name of a file containing the texture to display on the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            tube:LoadCylinder(2, 2, 2, 8, "Concrete.png")
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, integer divisions, text textureFile)
        Texture texture
        texture:LoadFromFile(textureFile)
        LoadCylinder(width, height, depth, divisions, texture)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and using the texture contained in the provided Drawable. The Drawable must
    be loaded. The provided number of divisions will be used to simulate the
    curve of the cylinder - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter divisions How many straight edges to use to simulate the curve of the cylinder.
    Attribute: Parameter drawable A loaded Drawable that contains a texture to be displayed on the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            Drawable image
            image:Load("Steel.png")

            tube:LoadCylinder(2, 2, 2, 8, image)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, integer divisions, Drawable drawable)
        Texture texture = drawable:GetTexture()
        LoadCylinder(width, height, depth, divisions, texture)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and texture. The provided number of divisions will be used to simulate the
    curve of the cylinder - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter divisions How many straight edges to use to simulate the curve of the cylinder.
    Attribute: Parameter texture The texture to draw on the sides of the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Texture

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            Texture texture
            texture:LoadFromFile("Cable.png")

            tube:LoadCylinder(2, 2, 2, 8, texture)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, integer divisions, Texture texture)
        ModelBlueprint schematic = GetCachedCylinder(width, height, depth, divisions, texture)
        Load(schematic)
        SetTexture(texture)
        Cylinder cylinder
        cylinder:Set(width, height, depth)
        SetShape(cylinder)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and texture. The curve of the cylinder will be approximated using 16
    straight edges.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter textureFile A file containing the texture to draw onto the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.System.File

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            File file
            file:SetPath("Trunk.png")

            tube:LoadCylinder(2, 2, 2, file)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, File textureFile)
        LoadCylinder(width, height, depth, 16, textureFile)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and texture. The curve of the cylinder will be approximated using 16
    straight edges.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter textureFile The name of a file containing the texture to draw onto the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            tube:LoadCylinder(2, 2, 2, "Barrel.png")
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, text textureFile)
        LoadCylinder(width, height, depth, 16, textureFile)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions,
    using the texture contained in the given (loaded) Drawable. The curve of the
    cylinder will be approximated using 16 straight edges.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter drawable A loaded Drawable to draw onto the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            Drawable image
            image:Load("Pillar.png")

            tube:LoadCylinder(2, 2, 2, image)
            Add(tube)
        end
    end
    */
    action LoadCylinder(number width, number height, number depth, Drawable drawable)
        LoadCylinder(width, height, depth, 16, drawable)
    end

    /*
    This action will load the Model with a cylinder with the given dimensions
    and texture. The curve of the cylinder will be approximated using 16
    straight edges.

    Attribute: Parameter width How long the cylinder should be along the x-axis.
    Attribute: Parameter height How long the cylinder should be along the y-axis.
    Attribute: Parameter depth How long the cylinder should be along the z-axis.
    Attribute: Parameter texture The texture to be drawn onto the cylinder.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Texture

    class Main is Game

        Model tube

        action Main
            StartGame()
        end

        action CreateGame
            Texture texture
            texture:LoadFromFile("Stripes.png")

            tube:LoadCylinder(2, 2, 2, texture)
            Add(tube)
        end
    end

    */
    action LoadCylinder(number width, number height, number depth, Texture texture)
        LoadCylinder(width, height, depth, 16, texture)
    end

    /*
    This action will load the Model with a sphere with the given width,
    height, depth, and color. The default sphere will be made using 25
    straight sides on the horizontal plane and 16 straight sides on the vertical
    plane to simulate the curve of a true sphere.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter color What color the sphere should be.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            Color orange
            orange:SetColor(1, 0.65, 0, 1)

            ball:LoadSphere(2, 2, 2, orange)
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, Color color)
        LoadSphere(width, height, depth, 25, 16, color)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and color. The provided number of divisions will be used to simulate the
    curve of the sphere - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter horizontalDivisions How many straight edges to use on the horizontal plane to simulate the curve of the sphere.
    Attribute: Parameter verticalDivisions How many straight edges to use on the vertical plane to simulate the curve of the sphere.
    Attribute: Parameter color What color the sphere should be.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            Color orange
            orange:SetColor(1, 0.65, 0, 1)

            tube:LoadSphere(2, 2, 2, 12, 8, orange)
            Add(tube)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, integer horizontalDivisions, integer verticalDivisions, Color color)
        ModelBlueprint schematic = GetCachedSphere(width, height, depth, horizontalDivisions, verticalDivisions, color)
        Load(schematic)
        SetDiffuseColor(color)
        Sphere sphere
        sphere:Set(width / 2)
        SetShape(sphere)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and texture. The provided number of divisions will be used to simulate the
    curve of the sphere - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter horizontalDivisions How many straight edges to use on the horizontal plane to simulate the curve of the sphere.
    Attribute: Parameter verticalDivisions How many straight edges to use on the vertical plane to simulate the curve of the sphere.
    Attribute: Parameter textureFile A texture file containing the texture to display on the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.System.File

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            File image
            image:SetPath("Steel.png")

            ball:LoadSphere(2, 2, 2, 12, 8, image)
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, integer horizontalDivisions, integer verticalDivisions, File textureFile)
        Texture texture
        texture:LoadFromFile(textureFile)
        LoadSphere(width, height, depth, horizontalDivisions, verticalDivisions, texture)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and texture. The provided number of divisions will be used to simulate the
    curve of the sphere - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter horizontalDivisions How many straight edges to use on the horizontal plane to simulate the curve of the sphere.
    Attribute: Parameter verticalDivisions How many straight edges to use on the vertical plane to simulate the curve of the sphere.
    Attribute: Parameter textureFile The name of a file containing the texture to display on the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            ball:LoadSphere(2, 2, 2, 12, 8, "Concrete.png")
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, integer horizontalDivisions, integer verticalDivisions, text textureFile)
        Texture texture
        texture:LoadFromFile(textureFile)
        LoadSphere(width, height, depth, horizontalDivisions, verticalDivisions, texture)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and using the texture contained in the provided Drawable. The Drawable must
    be loaded. The provided number of divisions will be used to simulate the
    curve of the sphere - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter horizontalDivisions How many straight edges to use on the horizontal plane to simulate the curve of the sphere.
    Attribute: Parameter verticalDivisions How many straight edges to use on the vertical plane to simulate the curve of the sphere.
    Attribute: Parameter drawable A loaded Drawable that contains a texture to be displayed on the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            Drawable image
            image:Load("Steel.png")

            ball:LoadSphere(2, 2, 2, 12, 8, image)
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, integer horizontalDivisions, integer verticalDivisions, Drawable drawable)
        Texture texture = drawable:GetTexture()
        LoadSphere(width, height, depth, horizontalDivisions, verticalDivisions, texture)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and texture. The provided number of divisions will be used to simulate the
    curve of the sphere - the more divisions used, the smoother the curve will
    appear.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter horizontalDivisions How many straight edges to use on the horizontal plane to simulate the curve of the sphere.
    Attribute: Parameter verticalDivisions How many straight edges to use on the vertical plane to simulate the curve of the sphere.
    Attribute: Parameter texture The texture to draw on the sides of the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Texture

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            Texture texture
            texture:LoadFromFile("Orb.png")

            ball:LoadSphere(2, 2, 2, 12, 8, texture)
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, integer horizontalDivisions, integer verticalDivisions, Texture texture)
        ModelBlueprint schematic = GetCachedSphere(width, height, depth, horizontalDivisions, verticalDivisions, texture)
        Load(schematic)
        SetTexture(texture)
        Sphere sphere
        sphere:Set(width / 2)
        SetShape(sphere)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and texture. The curve of the sphere will be approximated using 25 straight
    edges along the horizontal plane, and 16 straight edges along the vertical
    plane.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter textureFile A file containing the texture to draw onto the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.System.File

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            File file
            file:SetPath("Rubber.png")

            ball:LoadSphere(2, 2, 2, file)
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, File textureFile)
        LoadSphere(width, height, depth, 25, 16, textureFile)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and texture. The curve of the cylinder will be approximated using 25 straight
    edges along the horizontal plane, and 16 straight edges along the vertical
    plane.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter textureFile The name of a file containing the texture to draw onto the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            ball:LoadSphere(2, 2, 2, "Cannonball.png")
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, text textureFile)
        LoadSphere(width, height, depth, 25, 16, textureFile)
    end

    /*
    This action will load the Model with a sphere with the given dimensions,
    using the texture contained in the given (loaded) Drawable. The curve of the
    sphere will be approximated using 25 straight edges along the horizontal
    plane and 16 straight edges along the vertical plane.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter drawable A loaded Drawable to draw onto the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Drawable

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            Drawable image
            image:Load("Plaid.png")

            ball:LoadSphere(2, 2, 2, image)
            Add(ball)
        end
    end
    */
    action LoadSphere(number width, number height, number depth, Drawable drawable)
        LoadSphere(width, height, depth, 25, 16, drawable)
    end

    /*
    This action will load the Model with a sphere with the given dimensions
    and texture. The curve of the cylinder will be approximated using 25 straight
    edges along the horizontal plane, and 16 straight edges along the vertical
    plane.

    Attribute: Parameter width How long the sphere should be along the x-axis.
    Attribute: Parameter height How long the sphere should be along the y-axis.
    Attribute: Parameter depth How long the sphere should be along the z-axis.
    Attribute: Parameter texture The texture to be drawn onto the sphere.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Texture

    class Main is Game

        Model ball

        action Main
            StartGame()
        end

        action CreateGame
            Texture texture
            texture:LoadFromFile("Stripes.png")

            ball:LoadBall(2, 2, 2, texture)
            Add(ball)
        end
    end

    */
    action LoadSphere(number width, number height, number depth, Texture texture)
        LoadSphere(width, height, depth, 25, 16, texture)
    end

    /*
    This action will set the diffuse color of any Materials being used by this
    Model. Used after loading a cached primitive shape, in case the cached shape
    was built with a different color than this one.
    */
    private action SetDiffuseColor(Color color)
        integer counter = 0
        repeat materials:GetSize() times
            Material material = materials:Get(counter)
            ColorAttribute attribute
            if material:HasAttribute(attribute:GetDiffuseValue())
                attribute = cast(ColorAttribute, material:GetAttribute(attribute:GetDiffuseValue()))
                attribute:SetAttribute(attribute:GetDiffuseValue(), color)
            end
            counter = counter + 1
        end
    end

    /*
    This action will set the texture of any Materials being used by this Model.
    This is used after loading a cached primitive shape, in case the cached
    shape was using a different texture than this one.
    */
    private action SetTexture(Texture texture)
        integer counter = 0
        repeat materials:GetSize() times
            Material material = materials:Get(counter)
            TextureAttribute attribute
            if material:HasAttribute(attribute:GetDiffuseValue())
                attribute = cast(TextureAttribute, material:GetAttribute(attribute:GetDiffuseValue()))
                attribute:SetAttribute(attribute:GetDiffuseValue(), texture)
            end
            counter = counter + 1
        end
    end

    /*
    Find a box matching the dimensions (but not necessarily color) provided,
    and return it. If none is found, create a new one and cache it.
    */
    private system action GetCachedBox(number width, number height, number depth, Color color) returns ModelBlueprint

    /*
    Find a cylinder matching the dimensions (but not necessarily color) provided,
    and return it. If none is found, create a new one and cache it.
    */
    private system action GetCachedCylinder(number width, number height, number depth, integer divisions, Color color) returns ModelBlueprint

    /*
    Find a sphere matching the dimensions (but not necessarily color) provided,
    and return it. If none is found, create a new one and cache it.
    */
    private system action GetCachedSphere(number width, number height, number depth, integer hDivisions, integer vDivisions, Color color) returns ModelBlueprint

    /*
    Find a box matching the dimensions (but not necessarily texture) provided,
    and return it. If none is found, create a new one and cache it.
    */
    private system action GetCachedBox(number width, number height, number depth, Texture texture) returns ModelBlueprint

    /*
    Find a cylinder matching the dimensions (but not necessarily texture) provided,
    and return it. If none is found, create a new one and cache it.
    */
    private system action GetCachedCylinder(number width, number height, number depth, integer divisions, Texture texture) returns ModelBlueprint

    /*
    Find a sphere matching the dimensions (but not necessarily texture) provided,
    and return it. If none is found, create a new one and cache it.
    */
    private system action GetCachedSphere(number width, number height, number depth, integer hDivisions, integer vDivisions, Texture texture) returns ModelBlueprint

    /*
    This action will load this Model using the data contained in the given
    ModelBlueprint.

    Attribute: Parameter loader The ModelBlueprint to load.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.ModelBlueprint
    use Libraries.Game.Graphics.Color

    class Main is Game

        Model cube
        Model cubeCopy

        action Main
            StartGame()
        end

        action CreateGame
            Color mint
            mint:SetColor(0.5, 1, 0.75, 1)

            cube:LoadBox(2, 2, 2, mint)
            Add(cube)

            ModelBlueprint schematic = cube:GetModelBlueprint()
            cubeCopy:Load(schematic)
            Add(cubeCopy)

            cube:SetX(-2)
            cubeCopy:SetX(2)
        end
    end

    */
    action Load(ModelBlueprint loader)
        Load(loader, undefined)
    end

    /*
    This action will load this Model using the data contained in the given
    ModelBlueprint, and set its transform using the given Matrix4 (if it is
    defined).

    Attribute: Parameter loader The ModelBlueprint to load.
    Attribute: Parameter matrix The Matrix4 used to transform this Model.

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.ModelBlueprint
    use Libraries.Game.Graphics.Color
    use Libraries.Compute.Matrix4

    class Main is Game

        Model cube
        Model cubeCopy

        action Main
            StartGame()
        end

        action CreateGame
            Color mint
            mint:SetColor(0.5, 1, 0.75, 1)

            cube:LoadBox(2, 2, 2, mint)
            Add(cube)

            Matrix4 matrix
            matrix:SetToTranslation(2, 0, 0)
            matrix:Rotate(0, 1, 0, 45)

            ModelBlueprint schematic = cube:GetModelBlueprint()
            cubeCopy:Load(schematic, matrix)
            Add(cubeCopy)

            cube:SetX(-2)
        end
    end

    */
    action Load(ModelBlueprint loader, Matrix4 matrix)
        modelBlueprint = loader
        if matrix not= undefined
            GetTransform():Set(matrix)
        end

        CopyNodes(loader:nodes)
        CopyAnimations(loader:animations)
        CalculateTransforms()

        SetDimensions(GetCachedDimensions(loader))
    end

    /*
    Copy the nodes from the given array into this model's data structures.

    FIX-ME: SetBones() commented, will eventually need to be fixed for animations.
    */
    private action CopyNodes(Array<Node> copyNodes)
        nodePartBones:Empty()
        integer index = 0
        repeat copyNodes:GetSize() times
            Node node = copyNodes:Get(index)
            nodes:Add(CopyNode(node))
            index = index + 1
        end
        //SetBones()
    end

    /*
    Copy data from a single node into this object's data structures.
    */
    private action CopyNode(Node node) returns Node
        Node copy
        copy:id = node:id
        copy:inheritTransform = node:inheritTransform
        copy:translation:Set(node:translation)
        copy:rotation:Set(node:rotation)
        copy:scale:Set(node:scale)
        copy:localTransform:Set(node:localTransform)
        copy:globalTransform:Set(node:globalTransform)
        
        integer index = 0
        NodePart nodePart = undefined
        repeat node:parts:GetSize() times
            nodePart = node:parts:Get(index)
            copy:parts:Add(CopyNodePart(nodePart))
            index = index + 1
        end

        Iterator<Node> iterator = node:GetChildren()
        Node child = undefined
        repeat while iterator:HasNext()
            child = iterator:Next()
            copy:Add(CopyNode(child))
        end
        return copy
    end

    /*
    Copy data from a single NodePart into this object's data structures.
    */
    private action CopyNodePart(NodePart nodePart) returns NodePart
        NodePart copy
        MeshPart meshPart = copy:meshPart
        meshPart:id = nodePart:meshPart:id
        meshPart:indexOffset = nodePart:meshPart:indexOffset
        meshPart:verticesCount = nodePart:meshPart:verticesCount
        meshPart:primitiveType = nodePart:meshPart:primitiveType
        meshPart:mesh = nodePart:meshPart:mesh
        
        if nodePart:invBoneBindTransforms not= undefined
            nodePartBones:Add(copy, nodePart:invBoneBindTransforms)
        end

        integer index = materials:GetFirstLocation(nodePart:material)
        if index < 0
            copy:material = nodePart:material:Copy()
            materials:Add(copy:material)
        else
            copy:material = materials:Get(index)
        end

        return copy
    end

    /*
    Set the bones using the previously set nodes.
    */
    private action SetBones
        Iterator<NodePart> iterator = nodePartBones:GetKeyIterator()
        NodePart key = undefined
        HashTable<Node, Matrix4> value = undefined
        repeat while iterator:HasNext()
            key = iterator:Next()
            value = nodePartBones:GetValue(key)
            
            key:invBoneBindTransforms:Empty()

            Iterator<Node> iterator2 = value:GetKeyIterator()
            Node key2 = undefined
            Matrix4 value2 = undefined
            repeat while iterator2:HasNext()
                key2 = iterator2:Next()
                value2 = value:GetValue(key2)

                key:invBoneBindTransforms:Add(GetNode(key2:id), value2)
            end

            key:bones:SetMaxSize(value:GetSize())
            
            integer index = 0
            repeat value:GetSize() times
                Matrix4 temp
                key:bones:Set(index, temp)
                index = index + 1
            end
        end
    end

    /*
    Find a node in this Model with the matching text ID.
    */
    private action GetNode(text nodeID) returns Node
        integer counter = 0
        Node node = undefined
        repeat nodes:GetSize() times
            node = nodes:Get(counter)
            if node:id = nodeID
                return node
            end
            counter = counter + 1
        end
        counter = 0
        Node result = undefined
        repeat nodes:GetSize() times
            node = nodes:Get(counter)
            result = node:GetChild(nodeID)
            if result not= undefined
                return result
            end
            counter = counter + 1
        end

        return result
    end

    /*
    Copy the animations from the given array into this object.
    */
    private action CopyAnimations(Array<Animation> source)
        integer index = 0
        Animation anim = undefined
        repeat source:GetSize() times
            anim = source:Get(index)

            Animation animation
            animation:id = anim:id
            animation:duration = anim:duration

            integer index2 = 0
            NodeAnimation nanim = undefined
            repeat anim:nodeAnimations:GetSize() times
                nanim = anim:nodeAnimations:Get(index2)

                Node node = GetNode(nanim:node:id)
                
                if node not= undefined
                    NodeAnimation nodeAnim
                    nodeAnim:node = node

                    if defaultShareKeyframes
                        nodeAnim:translation = nanim:translation
                        nodeAnim:rotation = nanim:rotation
                        nodeAnim:scaling = nanim:scaling
                    else
                        if nanim:translation not= undefined
                            Array<NodeKeyframe<Vector3>> temp
                            nodeAnim:translation = temp
                            integer index3 = 0
                            NodeKeyframe<Vector3> kf = undefined
                            repeat nanim:translation:GetSize() times
                                kf = nanim:translation:Get(index3)

                                NodeKeyframe<Vector3> newKF
                                newKF:Initialize(kf:keyTime, cast(Vector3, kf:value))
                                nodeAnim:translation:Add(newKF)

                                index3 = index3 + 1
                            end
                        end

                        if nanim:rotation not= undefined
                            Array<NodeKeyframe<Quaternion>> temp
                            nodeAnim:rotation = temp
                            integer index3 = 0
                            NodeKeyframe<Quaternion> kf = undefined
                            repeat nanim:rotation:GetSize() times
                                kf = nanim:rotation:Get(index3)

                                NodeKeyframe<Quaternion> newKF
                                newKF:Initialize(kf:keyTime, cast(Quaternion, kf:value))
                                nodeAnim:rotation:Add(newKF)

                                index3 = index3 + 1
                            end
                        end

                        if nanim:scaling not= undefined
                            Array<NodeKeyframe<Vector3>> temp
                            nodeAnim:scaling = temp
                            integer index3 = 0
                            NodeKeyframe<Vector3> kf = undefined
                            repeat nanim:scaling:GetSize() times
                                kf = nanim:scaling:Get(index3)

                                NodeKeyframe<Vector3> newKF
                                newKF:Initialize(kf:keyTime, cast(Vector3, kf:value))
                                nodeAnim:scaling:Add(newKF)

                                index3 = index3 + 1
                            end
                        end
                    end

                    if nodeAnim:translation not= undefined or nodeAnim:rotation not= undefined or nodeAnim:scaling not= undefined
                        animation:nodeAnimations:Add(nodeAnim)
                    end

                end
                if animation:nodeAnimations:GetSize() > 0 
                    animations:Add(animation)
                end
                index2 = index2 + 1
            end

            index = index + 1
        end
    end
    
    /*
    This action will calculate the local and world transforms of all Nodes in
    this model, and then calculate the updated bone matrices.
    */
    private action CalculateTransforms
        integer index = 0
        integer size = nodes:GetSize()
        repeat size times
            nodes:Get(index):CalculateAllTransforms()
            index = index + 1
        end
        index = 0
        repeat size times
            nodes:Get(index):CalculateAllBoneTransforms()
            index = index + 1
        end
    end

    /*
    GetRenderables is used to retrieve all of the individual renderable
    components of this Model. This action is used internally by the Game engine.
    Most users should never need to access this action directly.
    
    Attribute: Parameter renderables An array that will contain all of the retrieved Renderables.
    */
    action GetRenderables(Array<Renderable> renderables)
        Node node = undefined
        integer index = 0
        repeat nodes:GetSize() times
            node = nodes:Get(index)
            GetRenderables(node, renderables)
            index = index + 1
        end
    end

    /*
    Retrieve all Renderables managed by a single node.
    */
    private action GetRenderables(Node node, Array<Renderable> renderables)
        if node:parts:GetSize() > 0
            NodePart nodePart = undefined
            integer index = 0
            repeat node:parts:GetSize() times
                nodePart = node:parts:Get(index)
                if nodePart:enabled
                    renderables:Add(GetRenderable(node, nodePart))
                end
                index = index + 1
            end
        end

        Iterator<Node> childIterator = node:GetChildren()
        Node child = undefined
        repeat while childIterator:HasNext()
            child = childIterator:Next()
            GetRenderables(child, renderables)
        end
    end

    /*
    Return a single renderable, and set it in the given NodePart. The Node is
    only used to set the transform.
    */
    private action GetRenderable(Node node, NodePart nodePart) returns Renderable
        Renderable out
        nodePart:SetRenderable(out)
        if nodePart:bones = undefined and GetTransform() not= undefined
            out:worldTransform:Set(GetTransform()):Multiply(node:globalTransform)
        elseif GetTransform() not= undefined
            out:worldTransform:Set(GetTransform())
        else
            out:worldTransform:IdentityMatrix()
        end

        //out:userData = userData
        return out
    end

    /*
    The Draw action is what makes a Model appear on the screen. This action
    will automatically be called by the Game class if the Model has been
    added to the Game with the Add(Item) action. Most users will never need to
    use this action directly.

    Attribute: Parameter painter The Painter3D being used to draw this Model.
    */
    action Draw(Painter3D painter)
        if not IsShowing()
            return now
        end

        painter:Render(me)

        parent:Item3D:Draw(painter)
    end

    /*
    CalculateBoundingBox will create a new BoundingBox object that contains the
    bounds of the Model.

    Attribute: Returns A new axis-aligned BoundingBox for this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.BoundingBox

    class Main is Game

        Model cube
        
        action Main
            StartGame()
        end

        action CreateGame
            Color mint
            mint:SetColor(0.5, 1, 0.75, 1)

            cube:LoadBox(2, 2, 2, mint)
            Add(cube)

            BoundingBox box = cube:CalculateBoundingBox()
            output "The dimensions of the bounding box are: " + box:GetWidth() + ", " + box:GetHeight() + ", " + box:GetDepth()
        end
    end

    */
    action CalculateBoundingBox returns BoundingBox
        BoundingBox box
        return CalculateBoundingBox(box)
    end

    /*
    CalculateBoundingBox will compute the bounds of this Model, and then store
    them inside the provided BoundingBox object. If any data was previously
    stored in this BoundingBox, it will be overwritten.

    Attribute: Returns The given axis-aligned BoundingBox, which will contain the bounds of this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.BoundingBox

    class Main is Game

        Model cube
        BoundingBox box
        
        action Main
            StartGame()
        end

        action CreateGame
            Color mint
            mint:SetColor(0.5, 1, 0.75, 1)

            cube:LoadBox(2, 2, 2, mint)
            Add(cube)

            cube:CalculateBoundingBox(box)
            output "The dimensions of the bounding box are: " + box:GetWidth() + ", " + box:GetHeight() + ", " + box:GetDepth()
        end
    end

    */
    action CalculateBoundingBox(BoundingBox box) returns BoundingBox
        box:Invalidate()
        return ExtendBoundingBox(box)
    end

    /*
    ExtendBoundingBox will expand the bounds of the given BoundingBox to fully
    encapsulate the bounds of this Model.

    Attribute: Parameter box The BoundingBox to extend.

    Attribute: Returns The given BoundingBox, which now includes the bounds of this Model.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.BoundingBox

    class Main is Game

        Model cube
        Model cylinder
        
        action Main
            StartGame()
        end

        action CreateGame
            Color blue
            blue:SetColor(0, 0, 1, 1)

            cube:LoadBox(2, 2, 2, blue)
            Add(cube)

            cylinder:LoadCylinder(1, 4, 1, blue)
            Add(cylinder)

            BoundingBox box = cube:CalculateBoundingBox()
            cylinder:ExtendBoundingBox(box)
            output "The dimensions of the bounding box are: " + box:GetWidth() + ", " + box:GetHeight() + ", " + box:GetDepth()
        end
    end

    */
    action ExtendBoundingBox(BoundingBox box) returns BoundingBox
        integer counter = 0

        repeat nodes:GetSize() times
            nodes:Get(counter):ExtendBoundingBox(box)
        end

        return box
    end

end