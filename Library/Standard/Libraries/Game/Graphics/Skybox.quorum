package Libraries.Game.Graphics

use Libraries.System.File
use Libraries.Compute.Matrix4
use Libraries.Compute.Vector3

class Skybox

    // OpenGL constants for the sides of the cube map.
    // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
    constant integer GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069
    constant integer GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070
    constant integer GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071
    constant integer GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072
    constant integer GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073
    constant integer GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074

    Texture cubeMap = undefined
    Matrix4 transform
    
    // Used to invert the skybox. A value of -1 inverts the box, while a value of 1 leaves it as it is.
    number inverter = 1

    /*
    Flags to indicate which sides are loaded. A Skybox can only be rendered if
    all of the sides of the Skybox are loaded. These are set to true inside the
    LoadSide action, and set to false by the Dispose action.
    */
    boolean rightLoaded = false
    boolean leftLoaded = false
    boolean upLoaded = false
    boolean downLoaded = false
    boolean frontLoaded = false
    boolean backLoaded = false

    /*
    The Load action loads all six sides of the Skybox. It takes six text
    parameters, which are the the file paths from the default working directory
    for images comprising the right, left, top, bottom, front, and back sides of
    the Skybox, respectively.

    Attribute: Parameter right The file path to an image representing the right side of the skybox.
    Attribute: Parameter left The file path to an image representing the left side of the skybox.
    Attribute: Parameter up The file path to an image representing the top of the skybox.
    Attribute: Parameter down The file path to an image representing the bottom of the skybox.
    Attribute: Parameter forward The file path to an image representing the front of the skybox.
    Attribute: Parameter back The file path to an image representing the back of the skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action Load(text right, text left, text up, text down, text forward, text back)
        File positiveX
        File negativeX
        File positiveY
        File negativeY
        File positiveZ
        File negativeZ
        positiveX:SetPath(right)
        negativeX:SetPath(left)
        positiveY:SetPath(up)
        negativeY:SetPath(down)
        positiveZ:SetPath(forward)
        negativeZ:SetPath(back)
        Load(positiveX, negativeX, positiveY, negativeY, positiveZ, negativeZ)
    end

    /*
    The Load action loads all six sides of the Skybox. It takes six files as
    parameters, which represent the images that form the right, left, top, 
    bottom, front, and back sides of the Skybox, respectively.

    Attribute: Parameter right An image file representing the right side of the skybox.
    Attribute: Parameter left An image file representing the left side of the skybox.
    Attribute: Parameter up An image file representing the top of the skybox.
    Attribute: Parameter down An image file representing the bottom of the skybox.
    Attribute: Parameter forward An image file representing the front of the skybox.
    Attribute: Parameter back An image file representing the back of the skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            right:SetPath("Skybox/right.jpg")
            File left
            left:SetPath("Skybox/left.jpg")
            File top
            top:SetPath("Skybox/top.jpg")
            File bottom
            bottom:SetPath("Skybox/bottom.jpg")
            File front
            front:SetPath("Skybox/front.jpg")
            File back
            back:SetPath("Skybox/back.jpg")
            skybox:Load(right, left, top, bottom, front, back)
            SetSkybox(skybox)
        end
    end

    */
    action Load(File right, File left, File up, File down, File forward, File back)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(right, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_X)
        LoadSide(left, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_X)
        LoadSide(up, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Y)
        LoadSide(down, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)
        // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
        LoadSide(forward, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)
        LoadSide(back, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Z)
    end

    /*
    This action loads the right side of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter fileName The path from the default working directory to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:LoadRight("Skybox/right.jpg")
            skybox:LoadLeft("Skybox/left.jpg")
            skybox:LoadTop("Skybox/top.jpg")
            skybox:LoadBottom("Skybox/bottom.jpg")
            skybox:LoadFront("Skybox/front.jpg")
            skybox:LoadBack("Skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action LoadRight(text fileName)
        File image
        image:SetPath(fileName)
        LoadRight(image)
    end

    /*
    This action loads the right side of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter image An image file to be used for the side of the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            File left
            File top
            File bottom
            File front
            File back
            right:SetPath("Skybox/right.jpg")
            left:SetPath("Skybox/left.jpg")
            top:SetPath("Skybox/top.jpg")
            bottom:SetPath("Skybox/bottom.jpg")
            front:SetPath("Skybox/front.jpg")
            back:SetPath("Skybox/back.jpg")

            skybox:LoadRight(right)
            skybox:LoadLeft(left)
            skybox:LoadTop(top)
            skybox:LoadBottom(bottom)
            skybox:LoadFront(front)
            skybox:LoadBack(back)
            SetSkybox(skybox)
        end
    end

    */
    action LoadRight(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_X)
    end

    /*
    This action loads the left side of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter fileName The path from the default working directory to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:LoadRight("Skybox/right.jpg")
            skybox:LoadLeft("Skybox/left.jpg")
            skybox:LoadTop("Skybox/top.jpg")
            skybox:LoadBottom("Skybox/bottom.jpg")
            skybox:LoadFront("Skybox/front.jpg")
            skybox:LoadBack("Skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action LoadLeft(text fileName)
        File image
        image:SetPath(fileName)
        LoadLeft(image)
    end

    /*
    This action loads the left side of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter image An image file to be used for the side of the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            File left
            File top
            File bottom
            File front
            File back
            right:SetPath("Skybox/right.jpg")
            left:SetPath("Skybox/left.jpg")
            top:SetPath("Skybox/top.jpg")
            bottom:SetPath("Skybox/bottom.jpg")
            front:SetPath("Skybox/front.jpg")
            back:SetPath("Skybox/back.jpg")

            skybox:LoadRight(right)
            skybox:LoadLeft(left)
            skybox:LoadTop(top)
            skybox:LoadBottom(bottom)
            skybox:LoadFront(front)
            skybox:LoadBack(back)
            SetSkybox(skybox)
        end
    end

    */
    action LoadLeft(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_X)
    end

    /*
    This action loads the top of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter fileName The path from the default working directory to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:LoadRight("Skybox/right.jpg")
            skybox:LoadLeft("Skybox/left.jpg")
            skybox:LoadTop("Skybox/top.jpg")
            skybox:LoadBottom("Skybox/bottom.jpg")
            skybox:LoadFront("Skybox/front.jpg")
            skybox:LoadBack("Skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action LoadTop(text fileName)
        File image
        image:SetPath(fileName)
        LoadTop(image)
    end

    /*
    This action loads the top of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter image An image file to be used for the side of the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            File left
            File top
            File bottom
            File front
            File back
            right:SetPath("Skybox/right.jpg")
            left:SetPath("Skybox/left.jpg")
            top:SetPath("Skybox/top.jpg")
            bottom:SetPath("Skybox/bottom.jpg")
            front:SetPath("Skybox/front.jpg")
            back:SetPath("Skybox/back.jpg")

            skybox:LoadRight(right)
            skybox:LoadLeft(left)
            skybox:LoadTop(top)
            skybox:LoadBottom(bottom)
            skybox:LoadFront(front)
            skybox:LoadBack(back)
            SetSkybox(skybox)
        end
    end

    */
    action LoadTop(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Y)
    end

    /*
    This action loads the bottom of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter fileName The path from the default working directory to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:LoadRight("Skybox/right.jpg")
            skybox:LoadLeft("Skybox/left.jpg")
            skybox:LoadTop("Skybox/top.jpg")
            skybox:LoadBottom("Skybox/bottom.jpg")
            skybox:LoadFront("Skybox/front.jpg")
            skybox:LoadBack("Skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action LoadBottom(text fileName)
        File image
        image:SetPath(fileName)
        LoadBottom(image)
    end

    /*
    This action loads the bottom of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter image An image file to be used for the side of the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            File left
            File top
            File bottom
            File front
            File back
            right:SetPath("Skybox/right.jpg")
            left:SetPath("Skybox/left.jpg")
            top:SetPath("Skybox/top.jpg")
            bottom:SetPath("Skybox/bottom.jpg")
            front:SetPath("Skybox/front.jpg")
            back:SetPath("Skybox/back.jpg")

            skybox:LoadRight(right)
            skybox:LoadLeft(left)
            skybox:LoadTop(top)
            skybox:LoadBottom(bottom)
            skybox:LoadFront(front)
            skybox:LoadBack(back)
            SetSkybox(skybox)
        end
    end

    */
    action LoadBottom(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)
    end

    /*
    This action loads the front of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter fileName The path from the default working directory to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:LoadRight("Skybox/right.jpg")
            skybox:LoadLeft("Skybox/left.jpg")
            skybox:LoadTop("Skybox/top.jpg")
            skybox:LoadBottom("Skybox/bottom.jpg")
            skybox:LoadFront("Skybox/front.jpg")
            skybox:LoadBack("Skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action LoadFront(text fileName)
        File image
        image:SetPath(fileName)
        LoadFront(image)
    end

    /*
    This action loads the front of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter image An image file to be used for the side of the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            File left
            File top
            File bottom
            File front
            File back
            right:SetPath("Skybox/right.jpg")
            left:SetPath("Skybox/left.jpg")
            top:SetPath("Skybox/top.jpg")
            bottom:SetPath("Skybox/bottom.jpg")
            front:SetPath("Skybox/front.jpg")
            back:SetPath("Skybox/back.jpg")

            skybox:LoadRight(right)
            skybox:LoadLeft(left)
            skybox:LoadTop(top)
            skybox:LoadBottom(bottom)
            skybox:LoadFront(front)
            skybox:LoadBack(back)
            SetSkybox(skybox)
        end
    end

    */
    action LoadFront(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)
    end

    /*
    This action loads the back of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter fileName The path from the default working directory to an image file.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:LoadRight("Skybox/right.jpg")
            skybox:LoadLeft("Skybox/left.jpg")
            skybox:LoadTop("Skybox/top.jpg")
            skybox:LoadBottom("Skybox/bottom.jpg")
            skybox:LoadFront("Skybox/front.jpg")
            skybox:LoadBack("Skybox/back.jpg")
            SetSkybox(skybox)
        end
    end

    */
    action LoadBack(text fileName)
        File image
        image:SetPath(fileName)
        LoadBack(image)
    end

    /*
    This action loads the back of the Skybox. Note that all six sides of
    the Skybox must be loaded before it can be used. Attempting to use a Skybox
    without loading all six sides will throw an error.

    Attribute: Parameter image An image file to be used for the side of the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.System.File

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            File right
            File left
            File top
            File bottom
            File front
            File back
            right:SetPath("Skybox/right.jpg")
            left:SetPath("Skybox/left.jpg")
            top:SetPath("Skybox/top.jpg")
            bottom:SetPath("Skybox/bottom.jpg")
            front:SetPath("Skybox/front.jpg")
            back:SetPath("Skybox/back.jpg")

            skybox:LoadRight(right)
            skybox:LoadLeft(left)
            skybox:LoadTop(top)
            skybox:LoadBottom(bottom)
            skybox:LoadFront(front)
            skybox:LoadBack(back)
            SetSkybox(skybox)
        end
    end

    */
    action LoadBack(File image)
        if cubeMap = undefined
            Texture texture
            cubeMap = texture
            InitializeCubeMap(texture)
        end

        // Note that positive Z in OpenGL is negative Z in Quorum, and vice versa.
        LoadSide(image, cubeMap, GL_TEXTURE_CUBE_MAP_POSITIVE_Z)
    end

    /*
    Initializes the given texture to be used as a cube map, instead of a single
    2D texture.
    */
    private system action InitializeCubeMap(Texture texture)

    /*
    Load pixels from a file into a pixel map, then apply it to the
    given side of the given cube map texture. The side should be one of the 
    GL_TEXTURE_CUBE_MAP constants at the top of this class.

    This is done as a system action due to asynchronous file loading on the web.
    */
    private system action LoadSide(File file, Texture texture, integer side)

    /*
    Whether this Skybox has been loaded or not yet. On most platforms, this is
    true immediately after calling the Load action. On the web, this is true at
    some point in time after Load is called, due to the nature of how image
    loading is handled during online execution.
    */
    action IsLoaded returns boolean
        return rightLoaded = true and leftLoaded = true and upLoaded = true and
            downLoaded = true and frontLoaded = true and backLoaded = true
    end

    /*
    This action releases all the memory used to store the Skybox's texture. Once
    this has been called, it won't be initialized anymore, so it will need to be
    loaded again to be used.
    */
    action Dispose
        cubeMap:Dispose()
        cubeMap = undefined
        rightLoaded = false
        leftLoaded = false
        upLoaded = false
        downLoaded = false
        frontLoaded = false
        backLoaded = false
    end

    /*
    This action will rotate the Skybox about an axis represented by the given
    numbers. The axis is essentially a ray that starts at the center of the
    Skybox and points in the direction of the provided x, y, and z values. The
    Skybox will then rotate clockwise around that ray. The Skybox will be 
    rotated by an angle given in degrees. 

    Attribute: Parameter x How far the ray points along the x-axis.
    Attribute: Parameter y How far the ray points along the y-axis.
    Attribute: Parameter z How far the ray points along the z-axis.
    Attribute: Parameter degrees How many degrees to rotate (clockwise).

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        Skybox skybox

        action Main
            StartGame()
        end

        action CreateGame
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)
        end

        action Update(number seconds)
            // The Skybox will rotate around the y-axis at a rate of 2 degrees per second.
            skybox:Rotate(0, 1, 0, 2 * seconds)
        end
    end
    */
    action Rotate(number x, number y, number z, number degrees)
        transform:Rotate(x, y, z, degrees)
    end

    /*
    This action will rotate the Skybox about an axis represented by the given
    Vector3. The axis is essentially a ray that starts at the center of the
    Skybox and points outward. The Skybox will then rotate clockwise around that
    ray. The Skybox will be rotated by an angle given in degrees. 

    Attribute: Parameter axis The axis or ray to rotate around.
    Attribute: Parameter degrees How many degrees to rotate (clockwise).

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.Compute.Vector3

    class Main is Game

        Skybox skybox
        Vector3 axis

        action Main
            StartGame()
        end

        action CreateGame
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)

            axis:Set(0, 1, 0)
        end

        action Update(number seconds)
            // The Skybox will rotate around the axis at a rate of 2 degrees per second.
            skybox:Rotate(axis, 2 * seconds)
        end
    end
    */
    action Rotate(Vector3 axis, number degrees)
        Rotate(axis:GetX(), axis:GetY(), axis:GetZ(), degrees)
    end

    /*
    The SetToRotation action will rotate the Skybox from its base orientation,
    ignoring any previous rotations that have been applied to it. The rotation
    is measured as a number of degrees rotated clockwise around the given axis.
    The axis is essentially a ray that begins in the center of the Skybox and 
    extends outward.

    Attribute: Parameter x How far the ray points along the x-axis.
    Attribute: Parameter y How far the ray points along the y-axis.
    Attribute: Parameter z How far the ray points along the z-axis.
    Attribute: Parameter degrees The number of degrees to rotate the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)

            skybox:SetToRotation(0, 1, 0, 90)
        end
    end
    */
    action SetToRotation(number x, number y, number z, number degrees)
        transform:SetToRotation(x, y, z, degrees)
    end

    /*
    The SetToRotation action will rotate the Skybox from its base orientation,
    ignoring any previous rotations that have been applied to it. The rotation
    is measured as a number of degrees rotated clockwise around the given axis.
    The axis is essentially a ray that begins in the center of the Skybox and 
    extends outward.

    Attribute: Parameter axis The ray to rotate the Skybox around.
    Attribute: Parameter degrees The number of degrees to rotate the Skybox.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox
    use Libraries.Compute.Vector3

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "skybox" containing our six images.
            skybox:Load("skybox/right.jpg", "skybox/left.jpg", "skybox/top.jpg", "skybox/bottom.jpg", "skybox/front.jpg", "skybox/back.jpg")
            SetSkybox(skybox)

            Vector3 axis
            axis:Set(0, 1, 0)
            skybox:SetToRotation(axis, 90)
        end
    end
    */
    action SetToRotation(Vector3 axis, number degrees)
        SetToRotation(axis:GetX(), axis:GetY(), axis:GetZ(), degrees)
    end

    /*
    This action returns whether or not the images of the Skybox are currently
    inverted. This will cause them to appear to be drawn backwards. By default,
    Skyboxes are inverted, so this will return true. This can be disabled or
    enabled using the InvertSkybox action.

    Attribute: Returns Whether or not the Skybox is inverted. This is true by default.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "Skybox" containing our six images.
            skybox:Load("Skybox/right.jpg", "Skybox/left.jpg", "Skybox/top.jpg", "Skybox/bottom.jpg", "Skybox/front.jpg", "Skybox/back.jpg")
            SetSkybox(skybox)
            
            boolean inverted = skybox:IsInverted()
            output "Is the Skybox inverted? " + inverted
        end
    end
    */
    action IsInverted returns boolean
        return inverter = 1
    end

    /*
    The InvertSkybox action sets whether or not the images of the Skybox should
    be inverted when used. If this is true, images will appear to be flipped
    around the y-axis (or in other words, appear to be drawn backwards). If this
    is set to false, then the images will appear to be drawn in the correct
    direction, but the left image will appear on the right, and the right image
    will appear on the left. By default, this value is set to true.

    Attribute: Parameter invert Whether or not the Skybox should be inverted.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Skybox

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Skybox skybox
            // Assuming we have a folder named "Skybox" containing our six images.
            skybox:Load("Skybox/right.jpg", "Skybox/left.jpg", "Skybox/top.jpg", "Skybox/bottom.jpg", "Skybox/front.jpg", "Skybox/back.jpg")
            skybox:InvertSkybox(false)
            SetSkybox(skybox)
        end
    end
    */
    action InvertSkybox(boolean invert)
        if invert
            inverter = 1
        else
            inverter = -1
        end
    end
end
