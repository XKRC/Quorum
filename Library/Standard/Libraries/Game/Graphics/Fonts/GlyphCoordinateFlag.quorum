package Libraries.Game.Graphics.Fonts

use Libraries.Compute.BitwiseOperations
use Libraries.Game.Graphics.Fonts.all

/*
The GlyphCoordinateFlag class is used to maintain information about points for a
given character's glyph.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.BinaryFileReader

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            File file
            ByteArray byteArray = undefined
            ByteReader byteReader = undefined
            FontFileReader reader
            // This is the directory for fonts on Mac
            file:SetWorkingDirectory("/Library/Fonts")
            file:SetPath("Arial.ttf")
            reader:Load(file)
            TrueTypeFileInformation fileInformation = reader:GetFileInformation()
            BinaryFileReader binaryReader
            binaryReader:OpenForRead(file)
            byteArray = binaryReader:ReadBytes()
            byteArray:SetBigEndian(true)
            byteReader = byteArray:GetByteReader()
            // This is assuming the current position of the byteReader is at the
            // right location. By default, it will not be. This will also need
            // to iterate over the total number of points for the glyph outline,
            // and add all of the information to an array of GlyphCoordinateFlags.
            integer flags = byteReader:NextByteAsUnsignedInteger()
            GlyphCoordinateFlag coordinateFlag
            coordinateFlag:SetFlags(flags)
        end
    end
*/
class GlyphCoordinateFlag 
    // For more information about these flags, see the Mac documentation for
    // TrueType tables. These flags are found in the "glyf" table in the "Outline
    // flags" subtable.
    /*If this bit is set, the point is on the curve. Otherwise, it is off the curve.*/
    boolean onCurve = false
    /*If set, the corresponding x-coordinate is 1 byte long, otherwise it is 2 bytes long.*/
    boolean xShort = false
    /*If set, the corresponding y-coordinate is 1 byte long, otherwise it is 2 bytes lone.*/
    boolean yShort = false
    /*If this bit is set, the next byte specifies the number of additional times
    that this set of flags is to be repeated.*/
    boolean repetition = false
    /*If the x-short bit is set, this bit describes the sign of the value, where
    1 is positive and 0 is negative.

    If the x-short bit is not set and this bit is set, then the current x-coordinate
    is the same as the previous x-coordinate.

    If the x-short bit is not set and this bit is not set, then the current x-coordinate
    is a signed 16-bit delta vector, which represents the change in x.*/
    boolean xSame = false
    /*If the y-short bit is set, this bit describes the sign of the value, where
    1 is positive and 0 is negative.

    If the y-short bit is not set and this bit is set, then the current y-coordinate
    is the same as the previous y-coordinate.

    If the y-short bit is not set and this bit is not set, then the current y-coordinate
    is a signed 16-bit delta vector, which represents the change in y.*/
    boolean ySame = false

    /*
    This action sets the flags for a point of the glyph.

    Attribute: Parameter flags The flags for a point of the glyph.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
            end
        end
    */
    action SetFlags(integer flags)
        BitwiseOperations ops
        onCurve = ops:And(flags, 1) > 0 
        xShort = ops:And(flags, 2) > 0 
        yShort = ops:And(flags, 4) > 0 
        repetition = ops:And(flags, 8) > 0 
        xSame = ops:And(flags, 16) > 0  
        ySame = ops:And(flags, 32) > 0 
    end

    /*
    This action returns whether or not a point is on the curve of a glyph.

    Attribute: Returns Returns true if the point is on the curve of a glyph, and
    flase if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                output coordinateFlag:IsOnCurve()
            end
        end
    */
    action IsOnCurve() returns boolean
        return onCurve
    end

    /*
    This action returns whether or not the x-coordinate of this point is one byte.

    Attribute: Returns Returns true if the x-coordinate is one byte, and false if
    it is two bytes.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                output coordinateFlag:XCoordinateIsOneByte()
            end
        end
    */
    action XCoordinateIsOneByte() returns boolean
        return xShort
    end

    /*
    This action returns whether or not the y-coordinate of this point is one byte.

    Attribute: Returns Returns true if the y-coordinate is one byte, and false if
    it is two bytes.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                output coordinateFlag:YCoordinateIsOneByte()
            end
        end
    */
    action YCoordinateIsOneByte() returns boolean
        return yShort
    end
    
    /*
    This action returns a value that is based on the xShort variable. If xShort
    is true, then this action will return the sign of the x-coordinate for this
    point, where true is positive and false is negative. If xShort is false, then
    if this is true it means that the current x-coordinate is the same as the previous
    x-coordinate. If xShort and xSame are false, then it means this x-coordinate
    represents the change in x.

    Attribute: Returns The return of this action depends on the value of xShort.
    See the action documentation for specifics.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                output coordinateFlag:XCoordinateIsSame()
            end
        end
    */
    action XCoordinateIsSame() returns boolean
        return xSame
    end

    /*
    This action returns a value that is based on the yShort variable. If yShort
    is true, then this action will return the sign of the y-coordinate for this
    point, where true is positive and false is negative. If yShort is false, then
    if this is true it means that the current y-coordinate is the same as the previous
    y-coordinate. If yShort and ySame are false, then it means this y-coordinate
    represents the change in y.

    Attribute: Returns The return of this action depends on the value of yShort.
    See the action documentation for specifics.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                output coordinateFlag:YCoordinateIsSame()
            end
        end
    */
    action YCoordinateIsSame() returns boolean
        return ySame
    end
    
    /*
    This action returns the value of the repetition variable. If it is true,
    then the flags that were set are to be repeated the next byte number of times
    for the next points on the glyph. If it is false, then the next point on the
    glyph has different flags than these flags.

    Attribute: Returns Returns true if these flags will repeat for the next point(s)
    and false if they will not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                output coordinateFlag:RepetitionIsTrue()
            end
        end
    */
    action RepetitionIsTrue() returns boolean
        return repetition
    end

    /*
    This action prints to the screen the various boolean values of this class.
    Used for debugging and making sure the reading and setting of the flags is
    working correctly.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.System.File
        use Libraries.Containers.ByteArray
        use Libraries.Containers.Support.ByteReader
        use Libraries.System.BinaryFileReader

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                File file
                ByteArray byteArray = undefined
                ByteReader byteReader = undefined
                FontFileReader reader
                // This is the directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                reader:Load(file)
                TrueTypeFileInformation fileInformation = reader:GetFileInformation()
                BinaryFileReader binaryReader
                binaryReader:OpenForRead(file)
                byteArray = binaryReader:ReadBytes()
                byteArray:SetBigEndian(true)
                byteReader = byteArray:GetByteReader()
                // This is assuming the current position of the byteReader is at the
                // right location. By default, it will not be. This will also need
                // to iterate over the total number of points for the glyph outline,
                // and add all of the information to an array of GlyphCoordinateFlags.
                integer flags = byteReader:NextByteAsUnsignedInteger()
                GlyphCoordinateFlag coordinateFlag
                coordinateFlag:SetFlags(flags)
                coordinateFlag:DebugPrintBooleans()
            end
        end
    */
    action DebugPrintBooleans () 
        output "" + IsOnCurve() + ", " + XCoordinateIsOneByte() + ", " + YCoordinateIsOneByte() + ", " + RepetitionIsTrue() + ", " + XCoordinateIsSame() + ", " + YCoordinateIsSame()
    end
end