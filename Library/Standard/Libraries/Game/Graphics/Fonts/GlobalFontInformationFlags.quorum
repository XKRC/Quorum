package Libraries.Game.Graphics.Fonts

use Libraries.Compute.BitwiseOperations
use Libraries.Game.Graphics.Fonts.all

/*
The GlobalFontInformationFlags class is used to store information about the font
files. Each font file has a variety of flags such as how the fonts are laid out
in the file, and these flags are used in the file reading process.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.BinaryFileReader

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            File file
            ByteArray byteArray = undefined
            ByteReader byteReader = undefined
            FontFileReader reader
            // This is the directory for fonts on Mac
            file:SetWorkingDirectory("/Library/Fonts")
            file:SetPath("Arial.ttf")
            reader:Load(file)
            TrueTypeFileInformation fileInformation = reader:GetFileInformation()
            BinaryFileReader binaryReader
            binaryReader:OpenForRead(file)
            byteArray = binaryReader:ReadBytes()
            byteArray:SetBigEndian(true)
            byteReader = byteArray:GetByteReader()
            // This is assuming the current position of the byteReader is at the
            // right location. By default, it will not be.
            integer flags = byteReader:NextTwoByteUnsignedInteger()
            fileInformation:SetGlobalFontInformationFlags(flags)
        end
    end
*/
class GlobalFontInformationFlags 
    // For more/better information, Microsoft has good documentation on these
    // flags. They are the "flags" bits in the "head" table.
    /*Baseline for the font at y = 0.*/
    boolean yValueBaseline = false
    /*Left sidebearing point at x = 0. Only relevant for TrueType rasterizers.*/
    boolean xPositionLeastSignificantBit = false
    /*Hinting instructions may depend on the font point size.*/
    boolean scaledNotActualSize = false
    /*Force points per EM to integer values for all internal scaling math. May
    use fractional values if this bit is clear.*/
    boolean integerInsteadOfFractional = false
    /*Instructions may alter advance width, and not scale linearly.*/
    boolean microsoftBit = false
    /*If this bit is set, it may cause unexpected behavior across platforms.*/
    boolean verticalLayout = false
    /*These bits should always be cleared. They do nothing.*/
    boolean correctLinguisticRendering = false
    /*Font data is lossless if this bit is set.*/
    boolean metamorphosis = false
    /*Font has been converted to right to left.*/
    boolean rightToLeft = false
    /*Font is optimized for ClearType if this bit is set.*/
    boolean rearrangementEffects = false
    /*Indicates that the glyphs in cmap subtables are generic symbolic representations
    of code point ranges and don't truly represent support for these code points.*/
    boolean genericSymbols = false

    /*
    This action sets the general flags of the font file.

    Attribute: Parameter flags The flags of the font file.

    Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.BinaryFileReader

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            File file
            ByteArray byteArray = undefined
            ByteReader byteReader = undefined
            FontFileReader reader
            // This is the directory for fonts on Mac
            file:SetWorkingDirectory("/Library/Fonts")
            file:SetPath("Arial.ttf")
            reader:Load(file)
            TrueTypeFileInformation fileInformation = reader:GetFileInformation()
            BinaryFileReader binaryReader
            binaryReader:OpenForRead(file)
            byteArray = binaryReader:ReadBytes()
            byteArray:SetBigEndian(true)
            byteReader = byteArray:GetByteReader()
            // This is assuming the current position of the byteReader is at the
            // right location. By default, it will not be.
            integer flags = byteReader:NextTwoByteUnsignedInteger()
            fileInformation:SetGlobalFontInformationFlags(flags)
        end
    end
    */
    action Set(integer flags)
        BitwiseOperations ops

        yValueBaseline = ops:And(flags, 1) > 0
        xPosLSB = ops:And(flags, 2) > 0
        scaledNotActualSize = ops:And(flags, 4) > 0 
        integerInsteadOfFractional = ops:And(flags, 8) > 0 
        microsoftbit = ops:And(flags, 16) > 0  
        verticalLayout = ops:And(flags, 32) > 0 
        correctLinguisticRendering = ops:And(flags, 128) > 0 
        metamorphosis = ops:And(flags, 256) > 0 
        rightToLeft = ops:And(flags, 512) > 0
        rearrangementEffects = ops:And(flags, 1024) > 0
        genericsymbols = ops:And(flags, 16384) > 0
    end
end