package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Game.Graphics.Fonts.all

/*
The CoordinateContainer class is used to maintain an array of x-intercepts
for a character's glyph. This is used in the rasterization process, where every
y value has a list of corresponding x-intercepts which indicate the glyph's
outline.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.Containers.Array

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            CoordinateContainer coordinates
            Array<XCoordinateList> xCoordinates = coordinates:GetList()
        end
    end     
*/
class CoordinateContainer 
    /*Array of x-intercepts for a given y position.*/
    Array<XCoordinateList> list

    /*
    This action returns the array of x-intercepts.

    Attribute: Returns Returns the array of x-intercepts.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                Array<XCoordinateList> xCoordinates = coordinates:GetList()
            end
        end
    */
    action GetList() returns Array<XCoordinateList>
        return me:list
    end

    /*
    This action sets the array of x-intercepts.

    Attribute: Parameter list The array of x-intercepts.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame
                CoordinateContainer coordinates
                XCoordinateList coordinate
                Array<XCoordinateList> list
                list:Add(coordinate)
                coordinates:SetList(list)
            end 
        end
    */
    action SetList(Array<XCoordinateList> list)
        me:list = list
    end

    /*
    This action returns the size of the XCoordinate list.

    Attribute: Returns Returns the size of the XCoordinate list.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                output coordinates:GetSize()
            end
        end
    */
    action GetSize() returns integer
        return me:list:GetSize()
    end

    /*
    This action returns the item in the XCoordinateList at the specified location.

    Attribute: Parameter location The location of the XCoordinates inside the
    array.

    Attribute: Returns Returns the XCoordinateList at the specified location.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                XCoordinateList list = coordinates:Get(0)
            end
        end
    */
    action Get(integer location) returns XCoordinateList
        if me:list:GetSize() > location and location > -1
            return me:list:Get(location)
        else
            XCoordinateList xList
            return xList
        end
    end

    /*
    This action adds an XCoordinateList to the first position of the XCoordinateList
    array.

    Attribute: Parameter item The XCoordinateList to add to the array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                XCoordinateList xCoordinates
                coordinates:AddToFront(xCoordinates)
            end
        end
    */
    action AddToFront(XCoordinateList item) 
        me:list:AddToFront(item)
    end

    /*
    This action adds an XCoordinateList to the last position of the XCoordinateList
    array.

    Attribute: Parameter item The XCoordinateList to add to the array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                XCoordinateList xCoordinates
                coordinates:AddToEnd(xCoordinates)
            end
        end
    */
    action AddToEnd(XCoordinateList item) 
        me:list:AddToEnd(item)
    end

    /*
    This action adds an XCoordinateList to the XCoordinateList array at the specified
    position.

    Attribute: Parameter position The position within the array to add the item to.

    Attribute: Parameter item The XCoordinateList to add to the array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                XCoordinateList xCoordinates
                coordinates:Add(0, xCoordinates)
            end
        end
    */
    action Add(integer position, XCoordinateList item) 
        me:list:Add(position, item)
    end
    
    /*
    This action adds an XCoordinateList to the end of the XCoordinateList array.

    Attribute: Parameter item The XCoordinateList to add to the array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                XCoordinateList xCoordinates
                coordinates:Add(xCoordinates)
            end
        end
    */
    action Add(XCoordinateList item)
        me:list:Add(item)
    end

    /*
    This action takes the contents of the XCoordinateList array and turns it into
    a text object.

    Attribute: Returns Returns the text representation of the contents of the
    array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                output coordinates:ToText()
            end
        end
    */
    action ToText() returns text
        text t = ""
        integer i = 0
        repeat while i < me:list:GetSize()
            XCoordinateList l = list:Get(i)
            t = t + " :: " + l:ToText()
            i = i + 1
        end
        return t
    end

    /*
    This action removes duplicate entries from the XCoordinateList array.

    Attribute: Example
        
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateContainer coordinates
                coordinates:RemoveDuplicates()
            end
        end
    */  
    action RemoveDuplicates()
        integer i = 0
        repeat while i < me:list:GetSize()
            XCoordinateList item = list:Get(i)
            integer j = 0
            repeat while j < item:GetSize()
                PixelIntersection xCoord = item:Get(j)
                integer k = j + 1
                repeat while k < item:GetSize()
                    if xCoord:GetXPosition() = item:Get(k):GetXPosition()
                        item:Remove(k)
                        item = list:Get(i)
                        k = k - 1
                    end
                    k = k + 1
                end
                j = j + 1
            end
        i = i + 1    
        end
    end
end