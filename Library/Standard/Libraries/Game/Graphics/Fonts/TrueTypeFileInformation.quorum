package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Compute.BigInteger
use Libraries.Game.Graphics.Fonts.all

/*
The TrueTypeFileInformation class is used to maintain information that is read
from TrueType format (.ttf) files. This includes how many tables are in the file,
the offsets for each table, font flags, and more. 

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            TrueTypeFileInformation information
            // Sets the number of pixels between two characters on different lines.
            // This value is combined with the maximum height of a possible glyph
            // in the font to create the appropriate spacing.
            information:SetLineGap(1)
            // Sets the number of pixels that the tallest glyph in the font will
            // extend above the baseline by to 20. Used in calculating line spacing.
            information:SetMaximumAscent(20)
        end
    end 
*/
class TrueTypeFileInformation 
    // For more information on these variables, see the Apple TrueType documentation.
    /*This array holds information about all of the tables in the font file.*/
    Array<TrueTypeFontTableDirectory> directoryEntries
    /*A value in the font files that determines if the file is truly a TrueType
    font or not.*/
    integer scalerType = -1
    /*The number of tables in the font file.*/
    integer numberOfTables = -1
    /*The maximum index range for reading a table.*/
    integer searchRange = -1
    /*The index of the current entry in the table.*/
    integer entrySelector = -1
    /*How much each index of the table needs to be shifted by to get to the next
    index.*/
    integer rangeShift = -1
    /*The offset needed to access the glyph outline table.*/
    integer glyphOutlineTablePosition = -1
    /*The offset needed to access the character map table.*/
    integer characterMapTablePosition = -1
    /*The offset needed to access the glyph data table.*/
    integer glyphDataLocationTablePosition = -1
    /*The offset needed to access the kerning table.*/
    integer kerningTablePosition = -1
    /*The offset needed to access the kerning values table.*/
    integer kerningValuesTablePosition = -1
    /*The format that the character map table is in.*/
    integer characterMapFormat = -1 
    /*The offset needed to access the horizontal header table.*/
    integer horizontalHeaderTablePosition = -1
    /*The date the font file was created.*/
    BigInteger createdDate
    /*The date the font file was last changed.*/
    BigInteger lastChangedDate
    /*The units per EM of the font.*/
    integer unitsPerEm = -1
    /*The leftmost x-coordinate position for a glyph in the font.*/
    Signed16BitFontUnit xMinimum
    /*The lowermost y-coordinate position for a glyph in the font.*/
    Signed16BitFontUnit yMinimum
    /*The rightmost x-coordinate position for a glyph in the font.*/
    Signed16BitFontUnit xMaximum
    /*The uppermost y-coordinate position for a glyph in the font.*/
    Signed16BitFontUnit yMaximum
    /*The maximum ascent of a font. This is the height from the baseline to the
    top of the highest glyph in the font.*/
    integer maximumAscent = -1
    /*The maximum descent of a font. This is the height from the baseline to the
    bottom of the lowest glyph in the font.*/
    integer maximumDescent = -1
    /*The line gap value used between two lines of characters. This is used in
    conjunction with maximumAscent and maximumDescent to find the proper spacing
    between lines.*/
    integer lineGap = -1
    /*The lowest recommended amount of pixels per EM to use for the font, which
    means the lowest recommended resolution.*/
    integer lowestRecommendedPixelsPerEm = - 1
    /*The direction to hint the font in.*/
    integer fontDirectionHint = -1
    /*The format of indecies used to access the location table.*/
    integer indexToLocationTableFormat = -1
    /*Flags that set some general information about the font file. See the
    GlobalFontInformationFlags class for details on these flags, or visit the
    Apple documentation on the "head" table.*/
    GlobalFontInformationFlags globalFontInformationFlags
    /*Flags that are specifically used when rendering the fonts on Mac. See the
    MacStyleFlags class for details on these flags, or visit the Apple documentation
    on the "head" table.*/
    MacStyleFlags macStyleFlags

    /*
    This action sets the line gap value to use when creating space between two
    lines of text. The value is in number of pixels.

    Attribute: Parameter value The number of pixels to use as the line gap between
    two lines of text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetLineGap(1)
            end
        end
    */
    action SetLineGap(integer value)
        me:lineGap = value
    end

    /*
    This action returns the line gap value to use when creating space between two
    lines of text.

    Attribute: Returns Returns the line gap value to use when creating space between
    two lines of text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:GetLineGap()
            end
        end
    */
    action GetLineGap() returns integer
        return me:lineGap
    end

    /*
    This action sets the maximum ascent, the distance from the baseline of the font
    to the highest point of the tallest glyph of the font, of the font, in pixels.

    Attribute: Parameter value The maximum ascent of the font, in pixels.
    
    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetMaximumAscent(20)
            end
        end
    */
    action SetMaximumAscent(integer value)
        me:maximumAscent = value
    end

    /*
    This action returns the maximum ascent, the distance from the baseline of the font
    to the highest point of the tallest glyph of the font, of the font, in pixels.

    Attribute: Returns Returns the maximum ascent of the font, in pixels.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetMaximumAscent()
            end
        end
    */
    action GetMaximumAscent() returns integer
        return me:maximumAscent
    end

    /*
    This action sets the maximum descent, the distance from the baseline of the font
    to the lowest point of the lowest glyph of the font, of the font, in pixels.

    Attribute: Parameter value The maximum descent of the font, in pixels.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetMaximumDescent(10)
            end
        end
    */
    action SetMaximumDescent(integer value)
        me:maximumDescent = value
    end

    /*
    This action returns the maximum descent, the distance from the baseline of the font
    to the lowest point of the lowest glyph of the font, of the font, in pixels.

    Attribute: Returns Returns the maximum descent of the font, in pixels.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetMaximumDescent()
            end
        end
    */  
    action GetMaximumDescent() returns integer
        return me:maximumDescent
    end

    /*
    This action sets the Mac style flags of the font.

    Attribute: Parameter flags The Mac style flags of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                // The flags will need to be properly read from the file, not
                // created arbitrarily.
                integer flags = 10111010
                information:SetMacStyleFlags(flags)
            end
        end    
    */
    action SetMacStyleFlags(integer flags) 
        me:macStyleFlags:Set(flags)
    end

    /*
    This action sets the general flags of the font.

    Attribute: Parameter flags The general flags of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                // The flags will need to be properly read from the file, not
                // created arbitrarily.
                integer flags = 10111010
                information:SetGlobalFontInformationFlags(flags)
            end
        end    
    */
    action SetGlobalFontInformationFlags(integer flags)
        me:globalFontInformationFlags:Set(flags)
    end

    /*
    This action sets the format of the indecies used to access the location table.

    Attribute: Parameter indexToLocationFormat The format of the indecies used to
    access the location table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                // The format will need to be properly read from the file, not
                // created arbitrarily.
                integer format = 10111010
                information:SetIndexToLocationTableFormat(format)
            end
        end 
    */
    action SetIndexToLocationTableFormat(integer indexToLocationFormat)
        me:indexToLocationTableFormat = indexToLocationFormat
    end

    /*
    This action returns the format of the indecies used to access the location table.

    Attribute: Returns Returns the format of the indecies used to access the location table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetIndexToLocationTableFormat()
            end
        end 
    */
    action GetIndexToLocationTableFormat() returns integer
        return me:indexToLocationTableFormat
    end

    /*
    This action sets the direction to adjust pixels when performing hinting.

    Attribute: Parameter fontDirectionHint The direction to adjust pixels when
    performing hinting.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetFontDirectionHint(0)
            end
        end 
    */  
    action SetFontDirectionHint(integer fontDirectionHint)
        me:fontDirectionHint = fontDirectionHint
    end

    /*
    This action returns the direction to adjust pixels when performing hinting.

    Attribute: Returns Returns the direction to adjust pixels when performing hinting.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetFontDirectionHint()
            end
        end 
    */
    action GetFontDirectionHint() returns integer
        return me:fontDirectionHint
    end
    
    /*
    This action sets the lowest recommended pixels per EM of the font. Fonts
    displayed on screens that cannot meet this minimum are likely to look worse.

    Attribute: Parameter lowestRecommendedPixelsPerEm The lowest recommended pixels
    per EM of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetLowestRecommendedPixelsPerEm(100)
            end
        end 
    */
    action SetLowestRecommendedPixelsPerEm(integer lowestRecommendedPixelsPerEm)
        me:lowestRecommendedPixelsPerEm = lowestRecommendedPixelsPerEm
    end

    /*
    This action returns the lowest recommended pixels per EM of the font.

    Attribute: Returns Returns the lowest recommended pixels per EM of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetLowestRecommendedPixelsPerEm()
            end
        end 
    */
    action GetLowestRecommendedPixelsPerEm() returns integer
        return me:lowestRecommendedPixelsPerEm
    end

    /*
    This action sets the date the font file was created.

    Attribute: Parameter createdDate The date the font file was created.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Compute.BigInteger

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                BigInteger date
                date:SetValue("01012001")
                information:SetCreatedDate(date)
            end
        end 
    */
    action SetCreatedDate (BigInteger createdDate) 
        me:createdDate = createdDate
    end

    /*
    This action sets the date the font file was last changed.

    Attribute: Parameter lastChangedDate The date the font file was last changed.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Compute.BigInteger

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                BigInteger date
                date:SetValue("01012001")
                information:SetLastChangedDate(date)
            end
        end 
    */
    action SetLastChangedDate (BigInteger lastChangedDate)
        me:lastChangedDate = lastChangedDate
    end

    /*
    This action returns the date the font file was created.

    Attribute: Returns Returns the date the font file was created.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Compute.BigInteger

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                BigInteger date
                date = information:GetCreatedDate()
            end
        end 
    */
    action GetCreatedDate() returns BigInteger
        return me:createdDate
    end

    /*
    This action returns the date the font file was last changed.

    Attribute: Returns Returns the date the font file was last changed.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Compute.BigInteger

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                BigInteger date
                date = information:GetLastChangedDate()
            end
        end 
    */
    action GetLastChangedDate() returns BigInteger
        return me:lastChangedDate
    end

    /*
    This action sets the units per EM of the font.

    Attribute: Parameter unitsPerEm The units per EM of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetUnitsPerEm(10)
            end
        end 
    */
    action SetUnitsPerEm (integer unitsPerEM)
        me:unitsPerEm = unitsPerEM
    end
    
    /*
    This action returns the units per EM of the font.

    Attribute: Returns Returns the uits per EM of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetUnitsPerEm()
            end
        end 
    */  
    action GetUnitsPerEm () returns integer
        return me:unitsPerEm
    end

    /*
    This action sets the leftmost x-coordinate position of the font; no glyph in
    the font should be farther left than this point.

    Attribute: Parameter xMinimum The leftmost x-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit:SetFontUnit(0)
                information:SetXMinimum(fontUnit)
            end
        end 
    */
    action SetXMinimum (Signed16BitFontUnit xMinimum)
        me:xMinimum = xMinimum
    end

    /*
    This action returns the leftmost x-coordinate position of the font; no glyph in
    the font should be father left than this point.

    Attribute: Returns Returns the leftmost x-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit = information:GetXMinimum()
            end
        end 
    */
    action GetXMinimum() returns Signed16BitFontUnit
        return xMinimum
    end

    /*
    This action sets the lowermost y-coordinate position of the font; no glyph in
    the font should be below this point.

    Attribute: Parameter yMinimum The lowermost y-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit:SetFontUnit(-10)
                information:SetYMinimum(fontUnit)
            end
        end 
    */  
    action SetYMinimum (Signed16BitFontUnit yMinimum)
        me:yMinimum = yMinimum
    end
    
    /*
    This action returns the lowermost y-coordinate position of the font; no glyph
    in the font should be below this point.

    Attribute: Returns Returns the lowermost y-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit = information:GetYMinimum()
            end
        end 
    */
    action GetYMinimum () returns Signed16BitFontUnit
       return yMinimum
    end

    /*
    This action sets the rightmost x-coordinate position of the font; no glyph in
    the font should be farther to the right than this point.

    Attribute: Parameter xMaximum The rightmost x-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit:SetFontUnit(100)
                information:SetXMaximum(fontUnit)
            end
        end 
    */
    action SetXMaximum (Signed16BitFontUnit xMaximum)
        me:xMaximum = xMaximum
    end

    /*
    This action returns the rightmost x-coordinate position of the font; no glyph
    in the font should be farther to the right than this point.

    Attribute: Returns Returns the rightmost x-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit = information:GetXMaximum()
            end
        end 
    */
    action GetXMaximum () returns Signed16BitFontUnit
        return me:xMaximum
    end

    /*
    This action sets the uppermost y-coordinate position of the font; no glyph
    in the font should be above this point.

    Attribute: Parameter yMaximum The uppermost y-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit:SetFontUnit(100)
                information:SetYMaximum(fontUnit)
            end
        end 
    */
    action SetYMaximum(Signed16BitFontUnit yMaximum)
        me:yMaximum = yMaximum
    end
    
    /*
    This action returns the uppermost y-coordinate position of the font; no glyph
    in the font should be above this point.

    Attribute: Returns Returns the uppermost y-coordinate position of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                Signed16BitFontUnit fontUnit
                fontUnit = information:GetYMaximum()
            end
        end 
    */
    action GetYMaximum() returns Signed16BitFontUnit
        return me:yMaximum
    end

    /*
    This action sets the offset needed to access the glyph outline table in the
    font file.

    Attribute: Parameter glyfPosition The offset of the glyph outline table in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetGlyphOutlineTablePosition(10)
            end
        end 
    */
    action SetGlyphOutlineTablePosition (integer glyfPosition)
        // glyf table
        me:glyphOutlineTablePosition = glyfPosition
    end

    /*
    This action sets the offset needed to access the character map table in the
    font file, as well as the format of the character map table.

    Attribute: Parameter characterMapPosition The offset of the character map table in
    the font file.

    Attribute: Parameter format The format of the character map table in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetCharacterMapTablePosition(100, 0)
            end
        end 
    */
    action SetCharacterMapTablePosition (integer characterMapPosition, integer format)
        // cmap table
        me:characterMapTablePosition = characterMapPosition
        SetCharacterMapFormat(format)
    end

    /*
    This action sets the offset needed to access the glyph data table ("loca" table)
    in the font file.

    Attribute: Parameter glyphDataLocationPosition The offset needed to access
    the glyph data table ("loca" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetGlyphDataLocationTablePosition(200)
            end
        end 
    */
    action SetGlyphDataLocationTablePosition (integer glyphDataLocationPosition)
        // loca table
        me:glyphDataLocationTablePosition = glyphDataLocationPosition
    end

    /*
    This action sets the offset needed to access the horizontal header table
    ("head" table) in the font file.

    Attribute: Parameter horizontalPosition The offset needed to access the horizontal
    header table ("head" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetHorizontalHeaderTablePosition(300)
            end
        end 
    */
    action SetHorizontalHeaderTablePosition(integer horizontalPosition)
        me:horizontalHeaderTablePosition = horizontalPosition
    end

    /*
    This action returns the offset needed to access the horizontal header table
    ("head" table) in the font file.

    Attribute: Returns Returns the offset needed to access the horizontal header
    table ("head" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                integer offset = information:GetHorizontalHeaderTablePosition()
            end
        end 
    */
    action GetHorizontalHeaderTablePosition() returns integer
        return me:horizontalHeaderTablePosition
    end

    /*
    This action sets the offset needed to access the kerning table ("kern" table)
    in the font file.

    Attribute: Parameter kernPosition The offset needed to access the kerning table
    ("kern" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetKerningSubtablePosition(50)
            end
        end 
    */
    action SetKerningSubtablePosition (integer kernPosition)
        me:kerningTablePosition = kernPosition
    end

    /*
    This action sets the offset needed to access the kerning values table ("kerx"
    table) in the font file.

    Attribute: Parameter kerningValuesTablePosition The offset needed to access
    the kerning values table ("kerx" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetKerningValuesTablePosition(60)
            end
        end 
    */
    action SetKerningValuesTablePosition (integer kerningValuesTablePosition)
        me:kerningValuesTablePosition = kerningValuesTablePosition
    end

    /*
    This action returns the offset needed to access the glyph outline table ("glyf"
    table) in the font file.

    Attribute: Returns Returns the offset needed to access the glyph outline table
    ("glyf" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                integer offset = information:GetGlyphOutlineTablePosition()
            end
        end 
    */
    action GetGlyphOutlineTablePosition () returns integer
        return me:glyphOutlineTablePosition
    end

    /*
    This action returns the offset needed to access the character map table
    ("cmap" table) in the font file.

    Attribute: Returns Returns the offset needed to access the character map table
    ("cmap" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                integer offset = information:GetCharacterMapTablePosition()
            end
        end 
    */
    action GetCharacterMapTablePosition() returns integer
        return me:characterMapTablePosition
    end

    /*
    This action returns the offset needed to access the glyph data location table
    ("loca" table) in the font file.

    Attribute: Returns Returns the offset needed to access the glyph data location
    table ("loca" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                integer offset = information:GetGlyphDataLocationTablePosition()
            end
        end 
    */
    action GetGlyphDataLocationTablePosition() returns integer
        return me:glyphDataLocationTablePosition
    end
    
    /*
    This action returns the offset needed to access the kerning table ("kern" table)
    in the font file.

    Attribute: Returns Returns the offset needed to access the kerning table
    ("kern" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                integer offset = information:GetKerningSubtablePosition()
            end
        end 
    */
    action GetKerningSubtablePosition() returns integer
        return me:kerningTablePosition
    end

    /*
    This action returns the offset needed to access the kerning values table
    ("kerx" table) in the font file.

    Attribute: Returns Returns the offset needed to access the kerning values table
    ("kerx" table) in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                integer offset = information:GetKerningValuesTablePosition()
            end
        end 
    */
    action GetKerningValuesTablePosition() returns integer
        return me:kerningValuesTablePosition
    end

    /*
    This action adds information about a table from the font file to the array of
    table directories. These entries contain the tag of the table, such as "glyf",
    a checksum value to make sure the table is accurate, the offset to access the
    table, and the size of the table.

    Attribute: Parameter tag The name of the table, such as "glyf".

    Attribute: Parameter checksum An error-checking value to make sure the table
    is correct.

    Attribute: Parameter offset The offset needed to access this table in the font
    file.

    Attribute: Parameter length The size of the table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:AddFontTableDirectoryEntry("glyf", 0, 100, 500)
            end
        end 
    */
    action AddFontTableDirectoryEntry(text tag, integer checksum, integer offset, integer length)
        TrueTypeFontTableDirectory entry

        entry:SetTag(tag)
        entry:SetChecksum(checksum)
        entry:SetOffset(offset)
        entry:SetLength(length)

        AddFontTableDirectoryEntry(entry)
    end

    /*
    Adds the actual table information to the array.
    */
    private action AddFontTableDirectoryEntry(TrueTypeFontTableDirectory entry)
        directoryEntries:Add(entry)
    end

    /*
    This action sets the scaler type of the font file. Some font files use certain
    scaler values, like TrueType files, and others that are supported by TrueType
    may use different scaler values. This determines how the file is read.

    Attribute: Parameter value The scaler type of the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetScalerType(0)
            end
        end 
    */
    action SetScalerType(integer value)
        scalerType = value
    end

    /*
    This action returns the scaler type of the font file. Some font files use certain
    scaler values, like TrueType files, and others that are supported by TrueType
    may use different scaler values. This determines how the file is read.

    Attribute: Returns Returns the scaler type of the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetScalerType()
            end
        end 
    */
    action GetScalerType returns integer
        return scalerType
    end

    /*
    This action sets the number of tables in the font file.

    Attribute: Parameter value The number of tables in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetNumberOfTables(5)
            end
        end 
    */
    action SetNumberOfTables(integer value)
        numberOfTables = value
    end

    /*
    This action returns the number of tables in the font file.

    Attribute: Returns Returns the number of tables in the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetNumberOfTables()
            end
        end 
    */
    action GetNumberOfTables returns integer 
        return numberOfTables
    end

    /*
    This action sets the maximum index range for reading a table in the font file.

    Attribute: Parameter value The maximum index range for reading a table in the
    font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetSearchRange(500)
            end
        end 
    */
    action SetSearchRange(integer value)
        searchRange = value
    end

    /*
    This action returns the maximum index range for reading a table in the font file.

    Attribute: Returns Returns the maximum index range for reading a table in the
    font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetSearchRange()
            end
        end 
    */
    action GetSearchRange returns integer
        return searchRange
    end
    
    /*
    This action sets the index of the current entry in a table from the font file.

    Attribute: Parameter value The index of the current entry in a table from
    the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetEntrySelector(200)
            end
        end 
    */
    action SetEntrySelector(integer value)
        entrySelector = value
    end

    /*
    This action returns the index of the current entry in a table from the font
    file.

    Attribute: Returns Returns the index of the current entry in a table from
    the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetEntrySelector()
            end
        end 
    */
    action GetEntrySelector returns integer
        return entrySelector
    end
    
    /*
    This action sets how much the index of a table has to be shifted by to move
    to the next location in the table.

    Attribute: Parameter value How much the index of a table has to be shifted by
    to move to the next location in the table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetRangeShift(1)
            end
        end 
    */
    action SetRangeShift(integer value)
        rangeShift = value
    end

    /*
    This action returns how much the index of a table has to be shifted by to move
    to the next location in the table.

    Attribute: Returns Returns how much the index of a table has to be shifted by
    to move to the next location in the table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetRangeShift()
            end
        end 
    */
    action GetRangeShift returns integer
        return rangeShift
    end

    /*
    This action returns the minimum and maximum x and y coordinate positions of
    the bounding box for the font file as text.

    Attribute: Returns Returns the minimum and maximum x and y coordinate positions
    of the boundign box for the font file as text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:BoundingBoxToText()
            end
        end 
    */
    action BoundingBoxToText() returns text
        return "(xMinimum: " + xMinimum:ToText() + ", yMinimum: " + yMinimum:ToText() + ") (xMaximum: " + xMaximum:ToText() + ", yMaximum: " + yMaximum:ToText() + ")"
    end

    /*
    This action scales a coordinate from its original size to a size based on
    the point size desired, such as 12 point font.
    */
    private action CalculateCoordinate(integer gridCoordinate, integer pixelSize, integer emSize, integer screensize) returns number
        if screensize = 0
           return cast(number, gridCoordinate) * pixelSize / emSize
        end
        return screensize - cast(number, gridCoordinate) * pixelSize / emSize
    end

    /*
    This action returns the scaled minimum and maximum x and y coordinate positions
    of the bounding box for the font file as text.

    Attribute: Parameter pixelSize The point size to scale to.

    Attribute: Parameter emSize The emSize of the font.

    Attribute: Returns Returns the scaled minimum and maximum x and y coordinate
    positions of the bounding box for the font file as text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:BoundingBoxToText(12, 2048)
            end
        end 
    */
    action BoundingBoxToText(integer pixelSize, integer emSize) returns text
        number xmin = CalculateCoordinate(xMinimum:GetFontUnit(), pixelSize, emSize, 0)
        number ymin = CalculateCoordinate(yMinimum:GetFontUnit(), pixelSize, emSize, 0)
        number xmax = CalculateCoordinate(xMaximum:GetFontUnit(), pixelSize, emSize, 0)
        number ymax = CalculateCoordinate(yMinimum:GetFontUnit(), pixelSize, emSize, 0)
        return "(xMinimum: " + xmin + ", yMinimum: " + ymin + ") (xMaximum: " + xmax + ", yMaximum: " + ymax + ")"
    end

    /*
    This action returns the format of the character map table of the font file.

    Attribute: Returns Returns the format of the character map table of the font file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                output information:GetCharacterMapFormat()
            end
        end 
    */
    action GetCharacterMapFormat() returns integer
        return me:characterMapFormat
    end
    
    /*
    This action sets the format of the character map table of the font file.

    Attribute: Parameter format The format of the character map table of the font
    file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                TrueTypeFileInformation information
                information:SetCharacterMapFormat(0)
            end
        end 
    */
    action SetCharacterMapFormat(integer format) 
        me:characterMapFormat = format
    end
end