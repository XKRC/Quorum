package Libraries.Game.Graphics.Fonts

use Libraries.Containers.HashTable
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Fonts.all

/*
The CharacterMap class is used to lookup characters in a hash table. Primarily,
it provides actions for finding the character code of a character, normally in
UNICODE, a character's Bezier curve points if they have been stored, a character's
glyph if it has been created, and the index and table offset of each character in
the font file.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            CharacterMap map
            output map:GetGlyphIndex("a")
        end
    end
*/
class CharacterMap
    /*Hash table mapping each character to a CharacterInformation.*/
    HashTable<text, CharacterInformation> characterTable

    /*
    Helper action for on create. Adds passed character to class characterTable
    Hash Table with characterInformation object containing passed character code.

    Attribute: Parameter character - text character to add to character table

    Attribute: Parameter characterCode - integer ASCII code corresponding
    to character
    */
    private action Add(text character, integer characterCode)
        CharacterInformation characterInformation
        characterInformation:SetCharacterCode(characterCode)
        characterTable:Add(character, characterInformation)
    end

    /*
    This action returns the character code for a given character.

    Attribute: Parameter character The character to get the character code of.

    Attribute: Returns Returns the character code, normally in UNICODE, of the character.

    Attribute: Example
    
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                output map:GetCharacterCode("a")
            end 
        end
    */
    action GetCharacterCode(text character) returns integer
        if HasKey(character)
            return characterTable:GetValue(character):GetCharacterCode()
        else
            Add(character, character:GetUnicodeInteger(0))
            return characterTable:GetValue(character):GetCharacterCode()
        end
    end

    /*
    This action returns the location of the character in the glyph table from the
    font file.

    Attribute: Parameter character The character to get the location for.

    Attribute: Returns Returns the location of the character in the glyph table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                output map:GetGlyphIndex("a")
            end
        end
    */
    action GetGlyphIndex(text character) returns integer
        if HasKey(character)
            return characterTable:GetValue(character):GetGlyphLocationTableIndex()
        else    
            return -1
        end
    end

    /*
    This action sets the index of the character in the font file's glyph offset
    location table, and the character's offset in the glyph table.

    Attribute: Parameter character The character to set the indices for.

    Attribute: Parameter glyphIndex The index of the character in the font file's
    glyph offset location table.

    Attribute: Parameter glyphOffset The offset of the character in the glyph
    table.

    Attribute: Example
    
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                map:SetGlyphIndexAndOffset("a", 0, 0)
            end
        end
    */
    action SetGlyphIndexAndOffset(text character, integer glyphIndex, integer glyphOffset)
        if characterTable:HasKey(character)
            characterTable:GetValue(character):SetGlyphIndexAndOffset(glyphIndex, glyphOffset)
        else
            Add(character, character:GetUnicodeInteger(0))
            characterTable:GetValue(character):SetGlyphIndexAndOffset(glyphIndex, glyphOffset)
        end
    end

    /*
    This action returns the Bezier curve glyph points of the given character.

    Attribute: Parameter character The character to get the glyph points of.

    Attribute: Returns Returns the Bezier curve glyph points of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                BezierCurveGlyphPoints points = map:GetGlyphPoints("a")
            end
        end
    */
    action GetGlyphPoints(text character) returns BezierCurveGlyphPoints
        if characterTable:HasKey(character)
            return characterTable:GetValue(character):GetGlyphPoints()
        else
            BezierCurveGlyphPoints points
            return points
        end
    end

    /*
    This action returns the glyph of the given character.

    Attribute: Parameter character The character to get the glyph of.

    Attribute: Returns Returns the glyph of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Game.Graphics.Glyph

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                Glyph glyph = map:GetGlyph("a")
            end
        end
    */
    action GetGlyph(text character) returns Glyph
        if HasKey(character)
            return characterTable:GetValue(character):GetGlyph()
        else
            Glyph glyph
            return glyph
        end
    end

    /*
    This action sets the Bezier curve glyph points for a given character.

    Attribute: Parameter character The character to set the Bezier curve
    glyph points of.

    Attribute: Parameter glyphPoints The Bezier curve glyph points of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end 

            action CreateGame
                CharacterMap map
                BezierCurveGlyphPoints glyphPoints
                map:SetGlyphPoints("a", glyphPoints)
            end
        end
    */
    action SetGlyphPoints(text character, BezierCurveGlyphPoints glyphPoints)
        if HasKey(character)
            characterTable:GetValue(character):SetGlyphPoints(glyphPoints)
        else
            Add(character, character:GetUnicodeInteger(0))
            SetGlyphPoints(character, glyphPoints)
        end
    end

    /*
    This action sets the glyph of a given character.

    Attribute: Parameter character The character to set the glyph of.

    Attribute: Parameter glyph The glyph to set to the character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Game.Graphics.Glyph

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                Glyph glyph
                map:SetGlyph("a", glyph)
            end
        end
    */
    action SetGlyph(text character, Glyph glyph)
        if HasKey(character)
            characterTable:GetValue(character):SetGlyph(glyph)
        else
            Add(character, character:GetUnicodeInteger(0))
            characterTable:GetValue(character):SetGlyph(glyph)
        end
    end

    /*
    This action returns whether or not a glyph has been created for the given
    character.

    Attribute: Parameter character The character to check whether or not it has
    a glyph.

    Attribute: Returns Returns true if there is a glyph for this character, and
    false if there is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                output map:HasGlyph("a")
            end
        end
    */
    action HasGlyph(text character) returns boolean
        if HasKey(character)
            return characterTable:GetValue(character):HasGlyph()
        else
            return false
        end
    end

    /*
    This action returns whether or not the given character is in the character
    table.

    Attribute: Parameter character The character to look for.

    Attribute: Returns Returns true if the character is in the character table,
    and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                output map:HasKey("a")
            end
        end  
    */
    action HasKey(text character) returns boolean
        return characterTable:HasKey(character)
    end

    /*
    This action checks if the given character's Bezier curve glyph points have
    already been read from the file.

    Attribute: Parameter character The character to check if the glyph points
    have already been read.

    Attribute: Returns Returns true if the glyph points have already been read
    from the file, and false if they have not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterMap map
                output map:GlyphPointsHaveBeenRead("a")
            end
        end
    */
    action GlyphPointsHaveBeenRead(text character) returns boolean
        if characterTable:HasKey(character)
            return characterTable:GetValue(character):GlyphPointsHaveBeenRead()
        else
            return false
        end
    end
end