package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Game.Graphics.Fonts.all

/*
The XCoordinateList class is used to maintain x-intercepts of a glyph's outline
for a given y-coordinate position. For every y-coordinate that has a line intersecting
the glyph outline, there will be a corresponding XCoordinateList containing every
point at which the line passes through the outline.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            XCoordinateList list
            PixelIntersection intersection
            intersection:SetXPosition(0)
            list:Add(intersection)
        end
    end 
*/
class XCoordinateList
    /*This array contains all of the x-intercepts for a y-coordinate.*/
    Array<PixelIntersection> list
    /*The nonzero value of an intersection. Lines are drawn based on this
    value, where a 0 indicates not to draw and any other value indicates to begin
    drawing, because you are inside the glyph outline.*/
    integer nonzero = 0

    /*
    This action sets the nonzero value of the intersection. 0 means do not draw
    and all other values means draw.

    Attribute: Parameter nonzero The nonzero value of the intersection.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                list:SetNonzero(0)
            end
        end 
    */
    action SetNonzero(integer nonzero)
        me:nonzero = nonzero
    end

    /*
    This action returns the nonzero value of the intersection. 0 means do not draw
    and all other values mean draw.

    Attribute: Returns Returns thr nonzero value of the intersection.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                output list:GetNonzero()
            end
        end 
    */
    action GetNonzero returns integer
        return me:nonzero
    end

    /*
    This action sets the list of the x-intersections for the y-coordinate position.

    Attribute: Parameter list The list of x-intersections for the y-coordinate position.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                PixelIntersection intersection
                Array<PixelIntersection> items
                intersection:SetXPosition(0)
                items:Add(intersection)
                list:SetList(items)
            end
        end 
    */
    action SetList(Array<PixelIntersection> list)
        me:list = list
    end

    /*
    This action returns the list of the x-intersections for the y-coordinate position.

    Attribute: Returns Returns the list of the x-intersections for the y-coordinate
    position.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                Array<PixelIntersection> items
                items = list:GetList()
            end
        end 
    */
    action GetList() returns Array<PixelIntersection>
        return me:list
    end
    
    /*
    This action returns the x-intercept from the x-intercept array at the given
    index.

    Attribute: Parameter index The index of where to retrieve the x-intercept
    from the array.

    Attribute: Returns Returns the x-intercept from the x-intercept array at the
    given location.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                PixelIntersection intersection
                intersection = list:Get(0)
            end
        end 
    */
    action Get(integer index) returns PixelIntersection
        return me:list:Get(index)
    end

    /*
    This action returns the last x-intercept from the x-intercept array.

    Attribute: Returns Returns the last x-intercept from the x-intercept array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                PixelIntersection intersection
                intersection = list:GetLast()
            end
        end 
    */
    action GetLast() returns PixelIntersection
        return me:list:Get(me:list:GetSize()-1)
    end

    /*
    This action adds an x-intercept to the x-intercept array.

    Attribute: Parameter intersection The x-intercept the add to the x-intercept array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                PixelIntersection intersection
                intersection:SetXPosition(0)
                list:Add(intersection)
            end
        end 
    */
    action Add(PixelIntersection intersection)
        me:list:Add(intersection)
    end

    /*
    This action adds an x-intercept to the x-intercept array at the specified
    location.

    Attribute: Parameter position The index location to add the x-intercept to.

    Attribute: Parameter intersection The x-intercept to add to the x-intercept
    array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                PixelIntersection intersection
                intersection:SetXPosition(0)
                list:Add(0, intersection)
            end
        end 
    */
    action Add(integer position, PixelIntersection intersection)
        me:list:Add(position, intersection)
    end

    /*
    This action removes the x-intercept at the specified location from the x-intercept
    array.

    Attribute: Parameter position The position of the x-intercept to be removed
    from the x-intercept array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                list:Remove(0)
            end
        end 
    */  
    action Remove(integer position)
        me:list:RemoveAt(position)
    end

    /*
    This action returns the size of the x-intercepts array.

    Attribute: Returns Returns the size of the x-intercepts array.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                output list:GetSize()
            end
        end 
    */
    action GetSize() returns integer
       return me:list:GetSize()
    end

    /*
    This action returns all of the x-intercepts in the x-intercepts array as text.

    Attribute: Returns Returns all of the x-intercepts in the x-intercepts array
    as text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                output list:ToText()
            end
        end 
    */
    action ToText() returns text
        integer x = 0
        text t = ""
        repeat while x < me:list:GetSize()
            t = t + ", x" + x+ ": " + me:list:Get(x):ToText()
            x = x + 1
        end
        return t
    end

    /*
    This action sorts the x-intercepts array in ascending order.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                list:Sort()
            end
        end
    */
    action Sort() 
        me:list:Sort()
    end

    /*
    This action checks whether or not the given XCoordinateList has the same items
    as the current XCoordinateList.

    Attribute: Parameter coordinateList The XCoordinateList to check the elements
    of.

    Attribute: Returns Returns true if the two lists are the same, and false if they
    are not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                XCoordinateList list
                XCoordinateList list2
                output list:ContainsSame(list2)
            end
        end
    */
    action ContainsSame(XCoordinateList coordinateList) returns boolean
        integer i = 0
        repeat while i < coordinateList:GetSize()
            integer j = 0
            repeat while j < me:list:GetSize()
                if coordinateList:Get(i):GetXPosition() = me:list:Get(j):GetXPosition()
                    return true
                end
                j = j + 1
            end
            i = i + 1
        end
        return false
    end
end