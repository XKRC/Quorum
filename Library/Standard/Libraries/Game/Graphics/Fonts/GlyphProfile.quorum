package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Language.Support.CompareResult
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.all

/*
The GlyphProfile class is used to maintain information about a glyph's outline
which is used in the rasterization process. Specifically, it saves the maximum
and minimum y values of the glyph, which is the range of performing scanlines
for the glyph, as well as where a given y-coordinate intersects with the glyph
outline, which are the x-intercepts.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            XCoordinateList item
            PixelIntersection intersection
            GlyphProfile glyphProfile
            intersection:SetXPosition(0)
            intersection:SetIntensity(1)
            item:Add(intersection)
            // This will add an x-intercept for y = 0, where it intercepts
            // the outline at x = 0
            glyphProfile:AddCoordinatesAt(0, item)
        end
    end
*/
class GlyphProfile 
    /*The highest point on the y-axis of the glyph.*/
    integer yMaximum = -1
    /*The lowest point on the y-axis of the glyph.*/
    integer yMinimum = -1
    /*Hash table that maps each y-coordinate to x intercepts.*/
    HashTable<integer, CoordinateContainer> xIntercepts
    /*Nonzero rule is used to determine when a coordinate signifies you have
    entered the glyph outline and need to start filling in, or when you have
    exited the glyph outline and need to stop drawing. Nonzero means you are
    inside, 0 means you are outside.*/
    integer nonzero = 0

    /*
    This action returns an iterator for the hash table of x-intercepts.

    Attribute: Returns Returns an iterator for the hash table of x-intercepts.
    
    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                Iterator<integer> iterator = glyphProfile:GetKeyIterator()
            end
        end
    */
    action GetKeyIterator() returns Iterator<integer>
        return me:xIntercepts:GetKeyIterator()
    end

    /*
    This action returns the current nonzero value of the line.

    Attribute: Returns Returns the current nonzero value of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                output glyphProfile:GetNonzero()
            end
        end 
    */
    action GetNonzero() returns integer
        return me:nonzero
    end

    /*
    This action sets the current nonzero value of the line.

    Attribute: Parameter nonzero The nonzero value of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                glyphProfile:SetNonzero(1)
            end
        end
    */
    action SetNonzero(integer nonzero)
        me:nonzero = nonzero
    end

    /*
    This action sets the x-intercepts hash table. Each y-coordinate of the glyph
    is used as a key to map to its x-intercepts.

    Attribute: Parameter intercepts Hash table containing keys of y-coordinates
    for the glyph, which map to corresponding x-intercepts.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.HashTable

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                HashTable<integer, CoordinateContainer> intercepts
                glyphProfile:SetXIntercepts(intercepts)
            end
        end
    */
    action SetXIntercepts (HashTable<integer, CoordinateContainer> intercepts) 
        me:xIntercepts = intercepts
    end

    /*
    This action returns all of the x-intercepts for the given y-coordinate.

    Attribute: Parameter y The y-coordinate to get the x-intercepts of.

    Attribute: Returns Returns the x-intercepts of the given y-coordinate.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                CoordinateContainer intercepts
                intercepts = glyphProfile:GetXInterceptAtY(0)
            end
        end
    */
    action GetXInterceptAtY(integer y) returns CoordinateContainer
        return me:xIntercepts:GetValue(y)
    end

    /*
    This action checks if a given y-coordinate has x-intercepts mapped to it in
    the hash table.

    Attribute: Parameter y The y-coordinate to check if it is present in the hash
    table.

    Attribute: Returns Returns true if the y-coordinate is in the hash table,
    and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                output glyphProfile:HasY(0) 
            end
        end
    */
    action HasY(integer y) returns boolean
        return me:xIntercepts:HasKey(y)
    end

    /*
    This action returns the hash table of x-intercepts and their corresponding
    y-coordinate values.

    Attribute: Returns Returns the hash table of x-intercepts.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.HashTable

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                HashTable<integer, CoordinateContainer> intercepts = glyphProfile:GetXIntercepts()
            end
        end
    */
    action GetXIntercepts returns HashTable<integer, CoordinateContainer>
        return me:xIntercepts
    end

    /*
    This action sets the highest point of the glyph, on the y-axis.

    Attribute: Parameter yMax The highest point of the glyph, on the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                glyphProfile:SetYMaximum(10)
            end
        end
    */
    action SetYMaximum(integer yMax)
        me:yMaximum = yMax
    end

    /*
    This action sets the lowest point of the glyph, on the y-axis.
    
    Attribute: Parameter yMin The lowest point of the glyph, on the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                glyphProfile:SetYMinimum(10)
            end
        end
    */
    action SetYMinimum(integer yMin)
        me:yMinimum = yMin
    end

    /*
    This action returns the highest point of the glyph, on the y-axis.

    Attribute: Returns Returns the highest point of the glyph, on the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                output glyphProfile:GetYMaximum()
            end
        end
    */
    action GetYMaximum returns integer
       return me:yMaximum
    end

    /*
    This action returns the lowest point of the glyph, on the y-axis.

    Attribute: Returns Returns the lowest point of the glyph, on the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame
                GlyphProfile glyphProfile
                output glyphProfile:GetYMinimum()
            end
        end
    */
    action GetYMinimum returns integer
        return me:yMinimum
    end

    /*
    This action returns the x-intercepts for a given y-coordinate as text.

    Attribute: Parameter y The y-coordinate to get the x-intercepts of.

    Attribute: Returns Returns the x-intercepts for the y-coordinate as text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                output glyphProfile:XInterceptsToText(0)
            end
        end
    */
    action XInterceptsToText(integer y) returns text
        text  t = ""
        if HasY(y)
            CoordinateContainer xl = xIntercepts:GetValue(y)
            integer i = 0
            repeat while i < xl:GetSize()
                t = t + xl:Get(i):ToText()
                i = i + 1
            end
        end
        return t
    end

    /*
    This action adds a list of x-intercepts for the given y-coordinate to the
    hash table.
    
    Attribute: Parameter y The y-coordinate to add x-intercepts to.

    Attribute: Parameter coordinates The x-intercepts for the y-coordinate.

    Attribute: Returns Returns true once the x-intercepts have been added to the
    hash table for the specified y-value.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                GlyphProfile glyphProfile
                XCoordinateList coordinates
                glyphProfile:AddCoordinatesAt(0, coordinates)
            end
        end
    */
    action AddCoordinatesAt(integer y, XCoordinateList coordinates) returns boolean
        CoordinateContainer value 
        if xIntercepts:HasKey(y)
            value = xIntercepts:GetValue(y)
        else 
            value:Add(coordinates)
            xIntercepts:Add(y, value)
            return true
        end
        integer i = 0 
        repeat while i < value:GetSize()
            XCoordinateList l = value:Get(i)
            
            if l:ContainsSame(coordinates)
               AddCoordinates(l, coordinates)
               return true
            end

            if coordinates:Get(0):GetXPosition() < l:Get(0):GetXPosition()
                value:Add(i, coordinates)
                return true
            end

            i = i + 1
        end
        value:AddToEnd(coordinates)
        return true
    end

    /*
    This action combines the elements of two x-intercepts lists into one.
    */
    private action AddCoordinates(XCoordinateList m, XCoordinateList l)
        integer i = 0
        if (m:GetNonzero() < 0 and l:GetNonzero() > 0) or (m:GetNonzero() > 0 and l:GetNonzero() < 0)   // this may need to be changed
            m:SetNonzero(0)
        end

        repeat while i < l:GetSize()
            PixelIntersection v = l:Get(i)
            integer j = 0
            boolean added = false
            repeat while j < m:GetSize() and not added
                PixelIntersection d = m:Get(j)
                if d = v
                    added = true
                elseif v:GetXPosition() < d:GetXPosition()
                    m:Add(j, v)
                    added = true
                end
                j = j + 1
            end
            if not added
                m:Add(v)
                added = true
            end
            i = i + 1
        end
    end
end