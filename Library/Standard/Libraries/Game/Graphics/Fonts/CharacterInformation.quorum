package Libraries.Game.Graphics.Fonts

use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Fonts.all

/*
The CharacterInformation class is used to store information about each character
and ways to retrieve that information.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.Containers.HashTable

    class Main is Game
        action Main
            StartGame()
        end
        
        action CreateGame
            HashTable<text, CharacterInformation> characterTable
            CharacterInformation info
            info:SetCharacterCode(97)
            characterTable:Add("a", info)
        end
    end
*/
class CharacterInformation
    /*The character code, normally UNICODE, for a character.*/
    integer characterCode = -1
    /*The location of this character within the glyph table.*/
    integer glyphLocationTableIndex = -1
    /*The offset of the glyph table in the font file.*/
    integer glyphTableOffset = -1
    /*The Bezier curve points that define the character.*/
    BezierCurveGlyphPoints glyphPoints
    /*The glyph representing the character.*/
    Glyph glyph
    /*Whether or not the character points have already been read from the file.*/
    boolean glyphPointsHaveBeenRead = false
    /*Whether or not the glyph for this character has been made.*/
    boolean glyphHasBeenMade = false

    /*
    This action sets the character code, normally in UNICODE, for the character.

    Attribute: Parameter charCode The numeric code, normally in UNICODE, for the character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                info:SetCharacterCode(97)
            end
        end
    */ 
    action SetCharacterCode(integer charCode)
        me:characterCode = charCode
    end

    /*
    This action sets the offset of the glyph table in the font file, and the
    index of this glyph within the glyph table.

    Attribute: Parameter glyphIndex The location of the glyph within the table.

    Attribute: Parameter glyphOffset The location of the glyph table within the file.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                info:SetGlyphIndexAndOffset(0, 0)
            end
        end
    */
    action SetGlyphIndexAndOffset(integer glyphIndex, integer glyphOffset) 
        me:glyphLocationTableIndex = glyphIndex
        me:glyphTableOffset = glyphOffset
    end

    /*
    This action sets the Bezier curve points of the glyph for a given character.

    Attribute: Parameter glyphPoints The Bezier curve points of the glyph for a given character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                BezierCurveGlyphPoints glyphOutline
                info:SetGlyphPoints(glyphOutline)
            end
        end
    */
    action SetGlyphPoints(BezierCurveGlyphPoints glyphPoints)
        me:glyphPoints = glyphPoints
        me:glyphPointsHaveBeenRead = true
    end
    
    /*
    This actions sets the glyph for a given character.

    Attribute: Parameter glyph The glyph for a given character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                Glyph glyph
                info:SetGlyph(glyph)
            end
        end
    */
    action SetGlyph(Glyph glyph)
        me:glyph = glyph
        me:glyphHasBeenMade = true
    end

    /*
    This action returns the character code, normally in UNICODE, for a given character.

    Attribute: Returns Returns the character code of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                integer characterCode = info:GetCharacterCode()
            end
        end
    */  
    action GetCharacterCode returns integer
        return me:characterCode
    end

    /*
    This action returns the location of the glyph within the glyph table.

    Attribute: Returns Returns the location of the glyph within the glyph table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                integer location = info:GetGlyphLocationTableIndex()
            end
        end
    */
    action GetGlyphLocationTableIndex returns integer 
        return me:glyphLocationTableIndex
    end

    /*
    This action returns the offset for the location of the glyph table within
    the file.

    Attribute: Returns Returns the offset for the location of the glyph table.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                integer offset = info:GetGlyphTableOffset()
            end
        end    
    */
    action GetGlyphTableOffset returns integer
        return me:glyphTableOffset
    end

    /*
    This action returns the Bezier curve glyph points for a given character.

    Attribute: Returns Returns the Bezier curve glyph points for a given character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                BezierCurveGlyphPoints glyphPoints = info:GetGlyphPoints()
            end
        end
    */
    action GetGlyphPoints returns BezierCurveGlyphPoints
        return me:glyphPoints
    end

    /*
    This action returns the glyph for a given character.

    Attribute: Returns Returns the glyph for a given character.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end 

            action CreateGame
                CharacterInformation info
                Glyph glyph = info:GetGlyph()
            end
        end
    */
    action GetGlyph returns Glyph
        return me:glyph
    end

    /*
    This action returns whether or not the Bezier curve glyph points have been
    read from the file.

    Attribute: Returns Returns true if the Bezier curve glyph points have been
    read from the file, and false if they have not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
       
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                output info:GlyphPointsHaveBeenRead()
            end
        end
    */
    action GlyphPointsHaveBeenRead() returns boolean
        return me:glyphPointsHaveBeenRead
    end

    /*
    This action returns whether or not the glyph has been created for a given
    character. 

    Attribute: Returns Returns true if the glyph for a given character has been
    created, and false if it has not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CharacterInformation info
                output info:HasGlyph()
            end
        end
    */
    action HasGlyph returns boolean
        return me:glyphHasBeenMade
    end
end
