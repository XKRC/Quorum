package Libraries.Game.Graphics

use Libraries.Containers.Array
use Libraries.Compute.BitwiseOperations

/*
The Attributes class represents a collection of individual Attribute objects.
Each Attribute is used to describe a visual property of an object drawn in 3D
space. 

The Attributes class is not usually used directly in the engine - the
engine instead uses the Material and Environment classes, which inherit from
Attributes, to handle different tasks.

Attribute: Author William Allee
*/
class Attributes 

    integer /*long?*/ mask = 0
    Array<Attribute> attributes
    boolean sorted = true

    /*
    action Sort
        if not sorted
            //attributes:Sort()
            //sorted = true
        end
    end
    */

    /*
    This action returns an integer mask containing the combined integer code
    values of each Attribute type present in this Attributes object. The codes
    are combined using bitwise Or operations.

    Attribute: Returns An integer mask formed by using bitwise Or on all of the Attribute codes in this Attributes object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array
    use Libraries.Compute.BitwiseOperations

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            BitwiseOperations bits
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                integer mask = material:GetMask()

                // The mask is made by using bitwise Or on each of the codes of the
                // Attribute objects present in this Attributes (or Material) object.
                // To retrieve a single value out of the mask, we use bitwise And.
                if bits:And(diffuseValue, mask) = diffuseValue
                    output "Material " + counter + " has a diffuse color attribute."
                else
                    output "Material " + counter + " does not have a diffuse color attribute."
                end

                counter = counter + 1
            end
        end
    end
    */
    action GetMask returns integer//long?
        return mask
    end

    /*
    This action returns the Attribute stored within this Attributes object with
    the given type. If no such Attribute has been stored in this object, it
    will return undefined.

    Attribute: Parameter type The integer identifier for the type of Attribute to return.
    
    Attribute: Returns An attribute of the requested type, or undefined if the Attribute wasn't contained in this object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                // We retrieve a ColorAttribute that describes the Model's diffuse color.
                // We have to cast the result because the returned type will be
                // Attribute, not ColorAttribute.
                colorAttribute = cast(ColorAttribute, material:GetAttribute(diffuseValue))

                // If the Material doesn't have an Attribute of the type we asked
                // for, then it returns undefined.
                if colorAttribute not= undefined
                    color = colorAttribute:color

                    // Here we change the Attribute's color to be yellow. Because
                    // this Attribute tells the Model what color to draw as, this
                    // will change the color of the Model on the screen.
                    color:SetColor(1, 1, 0, 1)
                end

                counter = counter + 1
            end
        end
    end
    */
    action GetAttribute(integer /*long?*/ type) returns Attribute
        if HasAttribute(type)
            integer counter = 0
            repeat attributes:GetSize() times
                if attributes:Get(counter):type = type
                    return attributes:Get(counter)
                end
                counter = counter + 1
            end
        end
        return undefined
    end

    /*
    This action tests if the given Attribute type is currently a part of this
    Attributes object. A boolean value is returned based on the result.

    Attribute: Parameter type An integer code identifying a type of Attribute.

    Attribute: Returns Whether or not this object contains an Attribute of the given type.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                if material:HasAttribute(diffuseValue)
                    output "Material " + counter + " has a diffuse color Attribute."
                else
                    output "Material " + counter + " does not have a diffuse color Attribute."
                end

                counter = counter + 1
            end
        end
    end
    */
    action HasAttribute(integer /*long?*/ type) returns boolean
        BitwiseOperations ops
        return type not= 0 and ops:And(type, mask) = type
    end

    /*
    This action removes all Attribute objects from this Attributes object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                // This will remove all the Attribute objects being used by the Material.
                material:Empty()

                counter = counter + 1
            end
        end
    end
    */
    action Empty
        attributes:Empty()
        mask = 0
    end

    /*
    This action returns the number of Attribute objects that are currently
    part of this Attributes object.

    Attribute: Returns The number of Attribute objects contained in this object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                output "Material " + counter + " has " + material:GetSize() + " attribute(s)."

                counter = counter + 1
            end
        end
    end
    */
    action GetSize returns integer
        return attributes:GetSize()
    end

    /*
    This action will enable the given type (or multiple types, if combined using
    the Or operation of the BitwiseOperations class) in this Attributes object.

    Attribute: Parameter enableMask An integer describing any number of Attribute objects to be enabled.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                // Although the Attribute containing the diffuse color will still be
                // a part of the Attributes, it will not be used during rendering.
                material:Disable(diffuseValue)

                counter = counter + 1
            end

            counter = 0

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                // Enabling an Attribute only allows it to be used if it already exists
                // in the Attributes but was disabled. 
                material:Enable(diffuseValue)

                counter = counter + 1
            end
        end
    end
    */
    action Enable(integer enableMask)
        BitwiseOperations ops
        mask = ops:Or(mask, enableMask)
    end

    /*
    This action will disable the given type (or multiple types, if combined using
    the Or operation of the BitwiseOperations class) in this Attributes object.

    Attribute: Parameter disableMask An integer describing any number of Attribute objects to be disabled.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                // Although the Attribute containing the diffuse color will still be
                // a part of the Attributes, it will not be used during rendering.
                material:Disable(diffuseValue)

                counter = counter + 1
            end
        end
    end
    */
    action Disable(integer disableMask)
        BitwiseOperations ops
        mask = ops:And(mask, ops:Negate(disableMask))
    end

    /*
    This action will add an Attribute to this Attributes object.

    Attribute: Parameter attribute The Attribute to be added.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight

    class Main is Game

        Model sphere

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            sphere:LoadSphere(3, 3, 3, color:Orange())
            Add(sphere)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(0, -1, 1)
            Add(light)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = sphere:GetMaterials()

            integer counter = 0

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                ColorAttribute colorAttribute
                colorAttribute:SetAttribute(colorAttribute:GetSpecularValue(), color:White())
                material:Add(colorAttribute)

                counter = counter + 1
            end
        end
    end
    */
    action Add(Attribute attribute)
        integer index = GetTypeIndex(attribute:type)
        if index < 0
            Enable(attribute:type)
            attributes:Add(attribute)
            sorted = false
        else
            attributes:Set(index, attribute)
        end
    end

    /*
    This action will add an array of Attribute objects to this Attributes object.

    Attribute: Parameter array An array containing Attribute objects to be added.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Game.Graphics.Attribute

    class Main is Game

        Model sphere

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            sphere:LoadSphere(3, 3, 3, color:Orange())
            Add(sphere)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(0, -1, 1)
            Add(light)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = sphere:GetMaterials()

            integer counter = 0

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                Array<Attribute> newAttributes

                ColorAttribute specularAttribute
                specularAttribute:SetAttribute(specularAttribute:GetSpecularValue(), color:White())
                newAttributes:Add(specularAttribute)

                material:Add(newAttributes)

                counter = counter + 1
            end
        end
    end
    */
    action Add(Array<Attribute> array)
        integer counter = 0
        repeat array:GetSize() times
            Add(array:Get(counter))
            counter = counter + 1
        end
    end

    /*
    This action will add all of the attribute objects stored in the given
    Attributes object to this Attributes object.

    Attribute: Parameter attributes The Attributes to add to this object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array
    use Libraries.Game.Graphics.AmbientLight
    use Libraries.Game.Graphics.DirectionalLight
    use Libraries.Game.Graphics.Attributes

    class Main is Game

        Model sphere

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            sphere:LoadSphere(3, 3, 3, color:Orange())
            Add(sphere)

            AmbientLight ambient
            ambient:SetColor(0.4, 0.4, 0.4, 1)
            SetAmbientLight(ambient)

            DirectionalLight light
            light:SetColor(0.8, 0.8, 0.8, 1)
            light:SetDirection(0, -1, 1)
            Add(light)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = sphere:GetMaterials()

            integer counter = 0

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                Attributes newAttributes

                ColorAttribute specularAttribute
                specularAttribute:SetAttribute(specularAttribute:GetSpecularValue(), color:White())
                newAttributes:Add(specularAttribute)

                material:Add(newAttributes)

                counter = counter + 1
            end
        end
    end
    */
    action Add(Attributes attributes)
        Add(attributes:GetAttributeArray())
    end

    /*
    This action will remove an Attribute of the given Attribute type from this
    Attributes object, or remove multiple Attribute objects if the integer code
    provided is the combined values of multiple Attribute types.

    Attribute: Parameter mask An integer code representing any number of Attribute objects to remove.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            output "The box is using " + materialsArray:GetSize() + " material(s)."

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                // Although the Attribute containing the diffuse color will still be
                // a part of the Attributes, it will not be used during rendering.
                material:Remove(diffuseValue)

                counter = counter + 1
            end
        end
    end
    */
    action Remove(integer /*long?*/ mask)
        integer counter = attributes:GetSize() - 1
        BitwiseOperations ops
        repeat attributes:GetSize() times
            integer /*long?*/ type = attributes:Get(counter):type
            if ops:And(mask, type) = type
                attributes:RemoveAt(counter)
                Disable(type)
                // sorted = false
            end
            counter = counter - 1
        end
    end

    /*
    This action will identify the index of a given Attribute type. If the 
    Attributes object does not currently have the given type, -1 will be
    returned.

    Attribute: Parameter type An integer value that identifies an Attribute type.

    Attribute: Returns The index of the Attribute of the requested type, or -1 if there was none.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array
    use Libraries.Game.Graphics.Attribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                Array<Attribute> array = material:GetAttributeArray()
                integer index = material:GetTypeIndex(diffuseValue)

                ColorAttribute diffuseAttribute = cast(ColorAttribute, array:Get(index))
                diffuseAttribute:color:SetColor(0, 1, 0, 1)

                counter = counter + 1
            end
        end
    end
    */
    action GetTypeIndex(integer type) returns integer
        if HasAttribute(type)
            integer counter = 0
            repeat attributes:GetSize() times
                if attributes:Get(counter):type = type
                    return counter
                end
                counter = counter + 1
            end
        end
        return -1
    end

    /*
    This action returns the array of Attribute objects contained within this
    Attributes object.

    Attribute: Returns An array containing each Attribute object stored by this object.

    Attribute: Example

    use Libraries.Game.Game
    use Libraries.Game.Graphics.Model
    use Libraries.Game.Graphics.Color
    use Libraries.Game.Graphics.Material
    use Libraries.Game.Graphics.ColorAttribute
    use Libraries.Containers.Array
    use Libraries.Game.Graphics.Attribute

    class Main is Game

        action Main
            StartGame()
        end

        action CreateGame
            Color color

            Model box
            box:LoadBox(1, 1, 1, color:Purple())
            Add(box)

            // The Material class inherits from Attributes. Whenever a user wants to
            // manipulate the attributes being used in a game, they will most likely
            // be working with a Material object.
            Array<Material> materialsArray = box:GetMaterials()

            integer counter = 0
            ColorAttribute colorAttribute

            // We store the Diffuse value from the ColorAttribute class. Each type
            // of attribute has a unique code that identifies the Attribute. This
            // particular code represents the Diffuse color attribute.
            integer diffuseValue = colorAttribute:GetDiffuseValue()

            repeat while counter < materialsArray:GetSize()
                Material material = materialsArray:Get(counter)

                Array<Attribute> array = material:GetAttributeArray()
                integer index = material:GetTypeIndex(diffuseValue)

                ColorAttribute diffuseAttribute = cast(ColorAttribute, array:Get(index))
                diffuseAttribute:color:SetColor(0, 1, 0, 1)

                counter = counter + 1
            end
        end
    end
    */
    action GetAttributeArray returns Array<Attribute>
        return attributes
    end
    
end