package Libraries.Game

use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Interface.AccessibilityManager
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.TextInputListener
use Libraries.Interface.Events.ResizeListener
use Libraries.Interface.Events.SelectionListener
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.TabChangeListener
use Libraries.Interface.Events.TabChangeEvent
use Libraries.Interface.Events.MenuChangeListener
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeListener
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.ControlActivationListener
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.WindowFocusListener
use Libraries.Interface.Events.WindowFocusEvent

/*
This class is the base interface for how the Game will automatically handle
input and notify event listeners. Most users shouldn't need access to this
class. For users who want to test input themselves at specific times, use
an InputMonitor instead.
*/
class GameInput

    Array<Layer> layers = undefined
    HashTable<text, InputTable> inputTables
    InputTable defaultTable

    Array<SelectionListener> selectionListeners
    Array<TextChangeListener> textChangeListeners
    Array<TabChangeListener> tabChangeListeners
    Array<MenuChangeListener> menuChangeListeners
    Array<TreeChangeListener> treeChangeListeners
    Array<ControlActivationListener> controlActivationListeners
    Array<WindowFocusListener> windowFocusListeners

    GameStateManager manager

    /*
    This action sets a reference to the layers stored in the Game class that the
    GameInput needs to test input on. This action is automatically called by the
    Game, and should never be used by users directly.
    */
    action SetLayers(Array<Layer> array)
        layers = array
    end

    /*
    This action sets the InputTable to be used by this GameInput. When the Game
    receives input, the GameInput will automatically trigger Behaviors from the
    InputTable.
    */
    action SetDefaultInputTable(InputTable inputTable)
        defaultTable = inputTable
    end

    /*
    This action returns the InputTable that the GameInput is using to
    automatically trigger Behaviors for certain input values.
    */
    action GetDefaultInputTable returns InputTable
        return defaultTable
    end

    /*
    This action adds an InputTable to the GameInput. If at any point during the
    Game the currently focused Item has an input group that matches the
    identifier of the table, the table will be used to trigger Behaviors.
    */
    action AddInputTable(InputTable table)
        inputTables:Add(table:GetIdentifier(), table)
    end

    /*
    This action retrieves an InputTable with the matching identifier from the
    GameInput (if there is one). If there is no InputTable with this identifier,
    the action will return undefined.
    */
    action GetInputTable(text key) returns InputTable
        if inputTables:HasKey(key)
            return inputTables:GetValue(key)
        end
        return undefined
    end

    /*
    This action removes the InputTable with the matching identifier from the
    GameInput (if there is one). If the InputTable is found, it will be returned
    - otherwise, the action returns undefined.
    */
    action RemoveInputTable(text key) returns InputTable
        if inputTables:HasKey(key)
            return inputTables:RemoveKey(key)
        end
        return undefined
    end

    /*
    This action will identify all input events that have occurred and notify
    all relevant event listeners. For certain kinds of input, e.g. mouse or
    touch input, only listeners that were added to the active panel will be
    notified. This action is called automatically by the Game class, so most
    users will never need to use this action directly.
    */
    blueprint action ProcessInputEvents

    /*
    This action will add a KeyboardListener to the GameInput. The GameInput will
    notify the KeyboardListener if keys are pressed on the keyboard. This action
    is automatically called by the Game class when needed.
    */
    blueprint action AddKeyboardListener(KeyboardListener listener)

    /*
    This action will remove a KeyboardListener from the GameInput. The GameInput
    will no longer notify the given KeyboardListener of KeyboardEvents. This 
    action is automatically called by the Game class when needed.
    */
    blueprint action RemoveKeyboardListener(KeyboardListener listener)

    /*
    This action adds a MouseListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseListeners which are added directly to the GameInput will receive the
    event.
    */
    blueprint action AddMouseListener(MouseListener listener)

    /*
    This action adds a MouseMovementListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseMovementListeners which are added directly to the GameInput will 
    receive the event.
    */
    blueprint action AddMouseMovementListener(MouseMovementListener listener)

    /*
    This action adds a MouseWheelListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseWheelListeners which are added directly to the GameInput will 
    receive the event.
    */
    blueprint action AddMouseWheelListener(MouseWheelListener listener)

    /*
    This action adds a TouchListener directly to the GameInput. When the
    GameInput receives a touch event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    TouchListeners which are added directly to the GameInput will 
    receive the event.
    */
    blueprint action AddTouchListener(TouchListener listener)

    /*
    This action removes a MouseListener from the GameInput. It will no longer
    receive mouse events directly from the GameInput.
    */
    blueprint action RemoveMouseListener(MouseListener listener)

    /*
    This action removes a MouseMovementListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    blueprint action RemoveMouseMovementListener(MouseMovementListener listener)

    /*
    This action removes a MouseWheelListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    blueprint action RemoveMouseWheelListener(MouseWheelListener listener)

    /*
    This action removes a TouchListener from the GameInput. The listener will
    no longer receive events from the GameInput.
    */
    blueprint action RemoveTouchListener(TouchListener listener)

    /*
    This action will add a TextInputListener to the GameInput. The 
    GameInput will notify the TextInputListener when the user provides text
    input to the game via the keyboard.
    */
    blueprint action AddTextInputListener(TextInputListener listener)

    /*
    This action will remove a TextInputListener from the GameInput. The
    GameInput will no longer notify the given TextInputListener of 
    TextInputEvents. 
    */
    blueprint action RemoveTextInputListener(TextInputListener listener)

    /*
    This action will add a ResizeListener to the GameInput. The 
    GameInput will notify the ResizeListener when the size of the game space
    changes, e.g. the window changes size or goes fullscreen.
    */
    blueprint action AddResizeListener(ResizeListener listener)

    /*
    This action will remove a ResizeListener from the GameInput. The
    GameInput will no longer notify the given ResizeListener of 
    ResizeEvents. 
    */
    blueprint action RemoveResizeListener(ResizeListener listener)

    /*
    This action will add a SelectionListener to the GameInput. The GameInput
    will notify the SelectionListener whenever a selection changes.

    Attribute: Parameter listener The SelectionListener to add to the GameInput.
    */
    action AddSelectionListener(SelectionListener listener)
        selectionListeners:Add(listener)
    end

    /*
    This action will remove a SelectionListener from the GameInput. The
    GameInput will no longer notify the given SelectionListener of selection
    changes.

    Attribute: Parameter listener The SelectionListener to remove from the GameInput.
    */
    action RemoveSelectionListener(SelectionListener listener)
        selectionListeners:Remove(listener)
    end

    /*
    This action will notify all SelectionListeners which have been added to the
    GameInput of the given SelectionEvent.

    Attribute: Parameter event The SelectionEvent to send to all SelectionListeners in the GameInput.
    */
    action NotifySelectionListeners(SelectionEvent event)
        AccessibilityManager accessibility = manager:GetAccessibilityManager()
        if accessibility not= undefined
            accessibility:SelectionChanged(event)
        end

        integer counter = 0
        repeat while counter < selectionListeners:GetSize()
            selectionListeners:Get(counter):SelectionChanged(event)
            counter = counter + 1
        end
    end

    /*
    This action will add a TextChangeListener to the GameInput. The GameInput
    will notify the TextChangeListener whenever text changes, such as in a
    TextBox.

    Attribute: Parameter listener The TextChangeListener to add to the GameInput.
    */
    action AddTextChangeListener(TextChangeListener listener)
        textChangeListeners:Add(listener)
    end

    /*
    This action will remove a TextChangeListener from the GameInput. The
    GameInput will no longer notify the given TextChangeListener of text
    changes.

    Attribute: Parameter listener The TextChangeListener to remove from the GameInput.
    */
    action RemoveTextChangeListener(TextChangeListener listener)
        textChangeListeners:Remove(listener)
    end

    /*
    This action will notify all TextChangeListeners which have been added to the
    GameInput of the given TextChangeEvent.

    Attribute: Parameter event The TextChangeEvent to send to all TextChangeListeners in the GameInput.
    */
    action NotifyTextChangeListeners(TextChangeEvent event)
        AccessibilityManager accessibility = manager:GetAccessibilityManager()
        if accessibility not= undefined
            accessibility:TextChanged(event)
        end

        integer counter = 0
        repeat while counter < textChangeListeners:GetSize()
            textChangeListeners:Get(counter):TextChanged(event)
            counter = counter + 1
        end
    end

    /*

    */
    action AddTabChangeListener(TabChangeListener listener)
        tabChangeListeners:Add(listener)
    end

    /*

    */
    action RemoveTabChangeListener(TabChangeListener listener)
        tabChangeListeners:Remove(listener)
    end

    /*

    */
    action NotifyTabChangeListeners(TabChangeEvent event)
        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < tabChangeListeners:GetSize()
                tabChangeListeners:Get(counter):OpenedTab(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < tabChangeListeners:GetSize()
                tabChangeListeners:Get(counter):ClosedTab(event)
                counter = counter + 1
            end
        end
    end
    
    /*

    */
    action AddMenuChangeListener(MenuChangeListener listener)
        menuChangeListeners:Add(listener)
    end

    /*

    */
    action RemoveMenuChangeListener(MenuChangeListener listener)
        menuChangeListeners:Remove(listener)
    end

    /*

    */
    action NotifyMenuChangeListeners(MenuChangeEvent event)
        AccessibilityManager accessibility = manager:GetAccessibilityManager()
        if accessibility not= undefined
            accessibility:MenuChanged(event)
        end

        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < menuChangeListeners:GetSize()
                menuChangeListeners:Get(counter):OpenedMenu(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < menuChangeListeners:GetSize()
                menuChangeListeners:Get(counter):ClosedMenu(event)
                counter = counter + 1
            end
        end
    end

    /*

    */
    action AddTreeChangeListener(TreeChangeListener listener)
        treeChangeListeners:Add(listener)
    end

    /*

    */
    action RemoveTreeChangeListener(TreeChangeListener listener)
        treeChangeListeners:Remove(listener)
    end

    /*

    */
    action NotifyTreeChangeListeners(TreeChangeEvent event)
        AccessibilityManager accessibility = manager:GetAccessibilityManager()
        if accessibility not= undefined
            accessibility:TreeChanged(event)
        end

        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < treeChangeListeners:GetSize()
                treeChangeListeners:Get(counter):OpenedTree(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < treeChangeListeners:GetSize()
                treeChangeListeners:Get(counter):ClosedTree(event)
                counter = counter + 1
            end
        end
    end

    /*

    */
    action AddControlActivationListener(ControlActivationListener listener)
        controlActivationListeners:Add(listener)
    end

    /*

    */
    action RemoveControlActivationListener(ControlActivationListener listener)
        controlActivationListeners:Remove(listener)
    end

    /*

    */
    action NotifyControlActivationListeners(ControlActivationEvent event)
        AccessibilityManager accessibility = manager:GetAccessibilityManager()
        if accessibility not= undefined
            accessibility:ControlActivated(event)
        end

        integer counter = 0
        repeat while counter < controlActivationListeners:GetSize()
            controlActivationListeners:Get(counter):ControlActivated(event)
            counter = counter + 1
        end
    end

    /*

    */
    action AddWindowFocusListener(WindowFocusListener listener)
        windowFocusListeners:Add(listener)
    end

    /*

    */
    action RemoveWindowFocusListener(WindowFocusListener listener)
        windowFocusListeners:Remove(listener)
    end

    /*

    */
    action NotifyWindowFocusListeners(WindowFocusEvent event)
        AccessibilityManager accessibility = manager:GetAccessibilityManager()
        if accessibility not= undefined
            accessibility:WindowFocusChanged(event)
        end

        if event:IsFocused()
            integer counter = 0
            repeat while counter < windowFocusListeners:GetSize()
                windowFocusListeners:Get(counter):WindowGainedFocus(event)
                counter = counter + 1
            end
        else
            integer counter = 0
            repeat while counter < windowFocusListeners:GetSize()
                windowFocusListeners:Get(counter):WindowLostFocus(event)
                counter = counter + 1
            end
        end
    end
end