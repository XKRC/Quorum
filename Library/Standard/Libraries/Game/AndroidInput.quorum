package Libraries.Game

use Libraries.Containers.Array
use Libraries.Containers.List
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardProcessor
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.MouseListener
use Libraries.Interface.Events.MouseMovementListener
use Libraries.Interface.Events.MouseWheelListener
use Libraries.Interface.Events.TouchListener
use Libraries.Interface.Events.TouchEvent
use Libraries.Interface.Events.TextInputListener
use Libraries.Interface.Events.TextInputProcessor
use Libraries.Interface.Events.TextInputEvent
use Libraries.Interface.Events.ResizeListener
use Libraries.Containers.Iterator
use Libraries.Interface.Item
use Libraries.Interface.Item2D
use Libraries.Interface.Item3D
use Libraries.Interface.Events.BehaviorEvent

/*
This class automatically handles input and notifies event listeners for Games
running on Android platforms. Most users shouldn't need access to this class.
For users who want to test input themselves at specific times, use an
InputMonitor instead.
*/
class AndroidInput is GameInput

    Array<TouchListener> touchListeners
    Array<TextInputListener> textInputListeners
    Array<ResizeListener> resizeListeners
    Array<KeyboardListener> keyboardListeners

    List<TouchEvent> touchEvents
    private TextInputProcessor textInputProcessor
    private KeyboardProcessor keyboardProcessor
    GameStateManager manager
    InputSet keyboardModifiers

    /*
    An array containing "recent" touches. Touches are considered recent if
    they happened within a certain number of seconds, defined by the
    "multipleTapTimer" value from AndroidConfiguration.
    */
    Array<RecentInputTimer> recentTouches

    /*
    An array containing "recent" key presses. Presses are considered recent if
    they happened within a certain number of seconds, defined by the
    "multipleTapTimer" value from AndroidConfiguration.
    */
    Array<RecentInputTimer> recentKeyPresses

    /*
    An array containing the current touches on the screen. Used for CONTINUE 
    InputSets.
    */
    Array<TouchEvent> currentTouches

    /*
    The target of the last touch movement event. This is used to track where the
    mouse cursor is for the purpose of triggering "BEGIN" and "FINISH" type
    touch movement InputSets.
    */
    Item lastTouchMoveTarget = undefined

    on create
        InitializePlugin(touchEvents)
    end

    /*
    This action will identify all input events that have occurred and notify
    all relevant event listeners. For certain kinds of input, e.g. mouse or
    touch input, only listeners that were added to the active panel will be
    notified. This action is called automatically by the Game class, so most
    users will never need to use this action directly.
    */
    action ProcessInputEvents
        UpdateRecentInputTimers()

        HandleTouchEvents()
        
        HandleKeyboardEvents()

        HandleTextInputEvents()
    end  

    public action HandleTouchEvents()

        // Note: touchEvents is automatically filled with events in plugins.
        if touchEvents:IsEmpty() = false
            Array<Layer> layers = parent:GameInput:layers
            TouchEvent touchEvent = undefined

            InputSet set = keyboardModifiers:Copy()
            InputSet multiSet = undefined

            RecentInputTimer recentInput = undefined

            Item target = undefined
            Item touchMoveTarget = undefined

            repeat while not (touchEvents:IsEmpty())
                touchEvent = touchEvents:RemoveFromFront()

                set:SetInputType(set:TOUCH_INPUT)

                if touchEvent:eventType = touchEvent:MOVED or touchEvent:eventType = touchEvent:STATIONARY
                    set:SetInputType(set:TOUCH_MOVEMENT_INPUT)
                    set:SetInputTrigger(set:CONTINUE)
                elseif touchEvent:eventType = touchEvent:BEGAN
                    set:SetInputTrigger(set:BEGIN)

                    recentInput = GetRecentTouchInput(touchEvent)

                    multiSet = set:Copy()

                elseif touchEvent:eventType = touchEvent:ENDED or touchEvent:eventType = touchEvent:CANCELLED
                    set:SetInputTrigger(set:FINISH)
                end

                BehaviorEvent behaviorEvent
                behaviorEvent:SetTouchEvent(touchEvent)

                boolean useDefaultTable = true

                integer counter = layers:GetSize()
                repeat while counter > 0 and not touchEvent:WasEventHandled()
                    counter = counter - 1

                    Item temp = layers:Get(counter):ProcessTouchEvent(touchEvent)

                    if touchEvent:GetSource() not= undefined
                        Item seeker = touchEvent:GetSource()

                        boolean noMoveTarget = true
                        if not (touchEvent:eventType = touchEvent:MOVED or touchEvent:eventType = touchEvent:STATIONARY)
                            noMoveTarget = false
                        end

                        InputSet beginSet = set:Copy()
                        beginSet:SetInputTrigger(beginSet:BEGIN)
                        InputSet finishSet = set:Copy()
                        finishSet:SetInputTrigger(finishSet:FINISH)

                        repeat while seeker not= undefined and (useDefaultTable = true or noMoveTarget)
                            InputTable table = GetInputTable(seeker:GetInputGroup())

                            if useDefaultTable
                                if table not= undefined
                                    if recentInput not= undefined
                                        if ItemsAreRelated(seeker, recentInput:item)
                                            multiSet:SetEventCount(recentInput:count + 1)
                                        else
                                            multiSet:SetEventCount(1)
                                        end
                                        if table:HasKey(multiSet)
                                            set = multiSet
                                        end
                                    end
                                    if table:HasKey(set)
                                        if recentInput not= undefined
                                            recentInput:timer = 0
                                            if recentInput:item not= seeker
                                                recentInput:item = seeker
                                                recentInput:count = 1
                                                touchEvent:tapCount = 1
                                            else
                                                recentInput:count = recentInput:count + 1
                                                touchEvent:tapCount = recentInput:count
                                            end
                                        end

                                        useDefaultTable = false
                                        touchEvent:SetEventHandled(true)
                                        target = seeker
                                    end
                                end
                            end

                            if noMoveTarget
                                if table not= undefined
                                    boolean valid = table:HasKey(set) or table:HasKey(beginSet) or table:HasKey(finishSet)
                                    if valid
                                        noMoveTarget = false
                                        touchMoveTarget = seeker
                                    end
                                end
                            end

                            if seeker is Item2D
                                Item2D target2D = cast(Item2D, seeker)
                                seeker = target2D:GetParent()
                            elseif seeker is Item3D
                                Item3D target3D = cast(Item3D, seeker)
                                seeker = target3D:GetParent()
                            else
                                seeker = undefined
                            end
                        end
                    end
                end

                if not touchEvent:WasEventHandled()
                    NotifyTouchListeners(touchEvent)
                end

                behaviorEvent:SetItem(target)
                InputTable table = undefined

                if touchEvent:eventType = touchEvent:MOVED or touchEvent:eventType = touchEvent:STATIONARY
                    if lastTouchMoveTarget not= touchMoveTarget
                        BehaviorEvent lastTargetEvent
                        lastTargetEvent:SetItem(undefined)
                        lastTargetEvent:SetTouchEvent(touchEvent)

                        InputSet finishSet = set:Copy()
                        finishSet:SetInputTrigger(set:FINISH)

                        Item lastTarget = lastTouchMoveTarget

                        repeat while lastTarget not= undefined
                            InputTable moveTable = GetInputTable(lastTarget:GetInputGroup())

                            boolean valid = false
                            if moveTable not= undefined
                                valid = moveTable:HasKey(finishSet)
                            end

                            if valid
                                lastTargetEvent:SetItem(lastTarget)
                                lastTarget = undefined
                            else
                                if target is Item2D
                                    Item2D target2D = cast(Item2D, lastTarget)
                                    lastTarget = target2D:GetParent()
                                elseif target is Item3D
                                    Item3D target3D = cast(Item3D, lastTarget)
                                    lastTarget = target3D:GetParent()
                                else
                                    lastTarget = undefined
                                end
                            end
                        end

                        if lastTargetEvent:GetItem() = undefined
                            table = GetDefaultInputTable()
                        else
                            table = GetInputTable(lastTargetEvent:GetItem():GetInputGroup())
                        end

                        boolean tableProcessResult = table:ProcessInput(finishSet, lastTargetEvent)

                        BehaviorEvent newTargetEvent
                        newTargetEvent:SetItem(undefined)
                        newTargetEvent:SetTouchEvent(touchEvent)

                        InputSet beginSet = set:Copy()
                        beginSet:SetInputTrigger(set:BEGIN)

                        Item newTarget = touchMoveTarget

                        repeat while newTarget not= undefined
                            InputTable moveTable = GetInputTable(newTarget:GetInputGroup())

                            // Calculate boolean over multiple steps - necessary to
                            // circumvent compiler bug.
                            boolean valid = false
                            if moveTable not= undefined
                                valid = moveTable:HasKey(beginSet)
                            end

                            if valid
                                newTargetEvent:SetItem(newTarget)
                                newTarget = undefined
                            else
                                if newTarget is Item2D
                                    Item2D target2D = cast(Item2D, newTarget)
                                    newTarget = target2D:GetParent()
                                elseif newTarget is Item3D
                                    Item3D target3D = cast(Item3D, newTarget)
                                    newTarget = target3D:GetParent()
                                else
                                    newTarget = undefined
                                end
                            end
                        end

                        table = undefined

                        if newTargetEvent:GetItem() = undefined
                            table = GetDefaultInputTable()
                        else
                            table = GetInputTable(newTargetEvent:GetItem():GetInputGroup())
                        end

                        table:ProcessInput(beginSet, newTargetEvent)

                        lastTouchMoveTarget = touchMoveTarget
                    end
                end

                if useDefaultTable
                    table = GetDefaultInputTable()

                    if recentInput not= undefined

                        if ItemsAreRelated(recentInput:item, touchEvent:GetSource())
                            multiSet:SetEventCount(recentInput:count + 1)
                            recentInput:timer = 0
                            recentInput:count = recentInput:count + 1
                            touchEvent:tapCount = recentInput:count
                            if table:HasKey(multiSet)
                                set = multiSet
                            end
                        else
                            recentInput:timer = 0
                            recentInput:count = 1
                            touchEvent:tapCount = 1
                        end

                        recentInput:item = touchEvent:GetSource()
                    end
                else
                    table = GetInputTable(target:GetInputGroup())
                end

                table:ProcessInput(set, behaviorEvent)

                if touchEvent:eventType = touchEvent:BEGAN or touchEvent:eventType = touchEvent:ENDED
                    UpdateCurrentTouches(touchEvent)
                end
                // End of repeat statement over size of touch events.
            end
        end

        ContinueTouchInputSets()
    end

    private action UpdateRecentInputTimers
        number seconds = manager:GetGameDisplay():GetSecondsBetweenFrames()
        AndroidConfiguration config = manager:GetGame():GetAndroidConfiguration()
        number touchLimit = config:multipleTapTimer

        integer recentCounter = recentTouches:GetSize()
        repeat while recentCounter > 0
            recentCounter = recentCounter - 1
            RecentInputTimer value = recentTouches:Get(recentCounter)
            value:timer = value:timer + seconds
            if value:timer > touchLimit
                recentTouches:RemoveAt(recentCounter)
                recentCounter = recentCounter - 1
            end
        end

        recentCounter = recentKeyPresses:GetSize()
        repeat while recentCounter > 0
            recentCounter = recentCounter - 1
            RecentInputTimer value = recentKeyPresses:Get(recentCounter)
            value:timer = value:timer + seconds
            if value:timer > touchLimit
                recentKeyPresses:RemoveAt(recentCounter)
                recentCounter = recentCounter - 1
            end
        end
    end

    private action GetRecentTouchInput(TouchEvent event) returns RecentInputTimer
        integer counter = 0
        Item item = event:GetSource()
        repeat while counter < recentTouches:GetSize()
            RecentInputTimer timer = recentTouches:Get(counter)
            if timer:item = item
                return timer
            end

            counter = counter + 1
        end

        RecentInputTimer timer
        timer:inputValue = event:fingerID
        timer:count = 0
        timer:item = item
        recentTouches:Add(timer)

        return timer
    end

    private action UpdateCurrentTouches(TouchEvent event)
        if event:eventType = event:ENDED or event:eventType = event:CANCELLED
            TouchEvent current = GetCurrentTouch(event)
            if current not= undefined
                currentTouches:Remove(current)
            end
        elseif event:eventType = event:BEGAN
            TouchEvent newEvent
            newEvent:x = event:x
            newEvent:y = event:y
            newEvent:fingerID = event:fingerID
            newEvent:tapCount = event:tapCount
            newEvent:eventType = event:STATIONARY
            newEvent:SetSource(event:GetSource())
            currentTouches:Add(newEvent)
        elseif event:eventType = event:MOVED
            TouchEvent current = GetCurrentTouch(event)
            if current not= undefined
                current:x = event:x
                current:y = event:y
                current:SetSource(event:GetSource())
            end
        end
    end

    private action GetCurrentTouch(TouchEvent event) returns TouchEvent
        integer counter = 0
        repeat while counter < currentTouches:GetSize()
            TouchEvent current = currentTouches:Get(counter)
            if current:fingerID = event:fingerID
                return current
            end
            counter = counter + 1
        end
        return undefined
    end

    private action ContinueTouchInputSets
        integer counter = 0

        repeat while counter < currentTouches:GetSize()

            TouchEvent current = currentTouches:Get(counter)

            InputTable table = undefined
            if current:GetSource() not= undefined
                table = GetInputTable(current:GetSource():GetInputGroup())
            end

            BehaviorEvent behaviorEvent
            behaviorEvent:SetTouchEvent(current)
            behaviorEvent:SetItem(current:GetSource())

            InputSet set = keyboardModifiers:Copy()
            set:SetInputTrigger(set:CONTINUE)
            set:SetEventCount(current:tapCount)
            set:SetInputType(set:TOUCH_INPUT)

            boolean processed = (table not= undefined)

            if table not= undefined
                processed = table:ProcessInput(set, behaviorEvent)
            end

            if not processed
                GetDefaultInputTable():ProcessInput(set, behaviorEvent)
            end

            counter = counter + 1
        end
    end

    private action ItemsAreRelated(Item elder, Item younger) returns boolean
        // If both are undefined, return true, otherwise return false.
        if elder = undefined
            if younger = undefined
                return true
            end
            return false
        elseif younger = undefined
            return false
        end

        if elder is Item2D
            Item2D item = cast(Item2D, younger)
            repeat while item not= undefined
                if item:Equals(elder)
                    return true
                end
                item = item:GetParent()
            end
        else // Assume that both items are Item3D
            Item3D item = cast(Item3D, younger)
            repeat while item not= undefined
                if item:Equals(elder)
                    return true
                end
                item = item:GetParent()
            end
        end

        return false
    end
    
    public action HandleKeyboardEvents()
        keyboardProcessor:Update()
        
        if keyboardProcessor:HasEvents()
            ProcessKeyboardEvent(keyboardProcessor:GetEvents())
        end
    end
 
    public action HandleTextInputEvents()
         textInputProcessor:Update()
         
         AndroidApplication application = cast(AndroidApplication, manager:GetApplication())
         if textInputProcessor:HasEvents()
             ProcessTextInputEvent(textInputProcessor:GetEvents())
         end
    end  

private action ProcessKeyboardEvent(List<KeyboardEvent> events)
        KeyboardEvent currentEvent = undefined
        KeyboardListener currentListener = undefined
        Iterator<KeyboardListener> listenIterator = keyboardListeners:GetIterator()

        text inputGroup = ""
        Item focusedItem = manager:GetFocus()
        if focusedItem not= undefined
            inputGroup = focusedItem:GetInputGroup()
        end

        repeat while not events:IsEmpty()
            currentEvent = events:RemoveFromFront()

            if currentEvent:eventType = currentEvent:PRESSED_KEY
                if currentEvent:keyCode = currentEvent:SHIFT_LEFT or currentEvent:keyCode = currentEvent:SHIFT_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:SHIFT)
                elseif currentEvent:keyCode = currentEvent:ALT_LEFT or currentEvent:keyCode = currentEvent:ALT_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:ALT)
                elseif currentEvent:keyCode = currentEvent:CONTROL_LEFT or currentEvent:keyCode = currentEvent:CONTROL_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:CONTROL)
                elseif currentEvent:keyCode = currentEvent:META_LEFT or currentEvent:keyCode = currentEvent:META_RIGHT
                    keyboardModifiers:AddModifier(keyboardModifiers:META)
                end
            else
                if currentEvent:keyCode = currentEvent:SHIFT_LEFT or currentEvent:keyCode = currentEvent:SHIFT_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:SHIFT)
                elseif currentEvent:keyCode = currentEvent:ALT_LEFT or currentEvent:keyCode = currentEvent:ALT_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:ALT)
                elseif currentEvent:keyCode = currentEvent:CONTROL_LEFT or currentEvent:keyCode = currentEvent:CONTROL_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:CONTROL)
                elseif currentEvent:keyCode = currentEvent:META_LEFT or currentEvent:keyCode = currentEvent:META_RIGHT
                    keyboardModifiers:RemoveModifier(keyboardModifiers:META)
                end
            end

            InputSet set = keyboardModifiers:Copy()
            set:SetKeyboardInput(currentEvent:keyCode)

            InputSet anySet = keyboardModifiers:Copy()
            anySet:SetKeyboardInput(currentEvent:ANY_KEY)

            if currentEvent:eventType = currentEvent:RELEASED_KEY
                set:SetInputTrigger(set:FINISH)
                anySet:SetInputTrigger(anySet:FINISH)
            end
            
            BehaviorEvent behaviorEvent
            behaviorEvent:SetItem(focusedItem)
            behaviorEvent:SetKeyboardEvent(currentEvent)

            InputTable table = GetInputTable(inputGroup)

            /*
            If the table exists, attempt to trigger behaviors that use that
            specific input or that trigger on any input of that type. Once both
            are tested, if neither were successful, try to trigger behaviors
            from the default input table instead.
            */
            boolean processed = (table not= undefined)
            if processed
                processed = table:ProcessInput(set, behaviorEvent)
                processed = table:ProcessInput(anySet, behaviorEvent) or processed
            end

            if not processed
                GetDefaultInputTable():ProcessInput(set, behaviorEvent)
                GetDefaultInputTable():ProcessInput(anySet, behaviorEvent)
            end

            repeat while listenIterator:HasNext()
                currentListener = listenIterator:Next()

               if currentEvent:eventType = currentEvent:PRESSED_KEY
                   currentListener:PressedKey(currentEvent)
                elseif currentEvent:eventType = currentEvent:RELEASED_KEY
                    currentListener:ReleasedKey(currentEvent)
                end
            end

            listenIterator:Rewind()
        end
    end

    private action ProcessTextInputEvent(List<TextInputEvent> events)
        TextInputEvent currentEvent = undefined
        TextInputListener currentListener = undefined
        Iterator<TextInputListener> listenIterator = textInputListeners:GetIterator()

        text inputGroup = ""
        Item focusedItem = manager:GetFocus()
        if focusedItem not= undefined
            inputGroup = focusedItem:GetInputGroup()
        end

        repeat while not events:IsEmpty()
            currentEvent = events:RemoveFromFront()

            InputSet set
            set:SetInputType(set:TEXT_INPUT)

            BehaviorEvent behaviorEvent
            behaviorEvent:SetItem(focusedItem)
            behaviorEvent:SetTextInputEvent(currentEvent)

            InputTable table = GetInputTable(inputGroup)

            /*
            Using boolean short-circuit evaluation. If the table is defined,
            the input is processed - if the input set wasn't found in the table,
            it returns false. Thus the default table is referenced if there was
            no table with an identifier matching the input group, or if such a
            table existed but didn't handle this InputSet.
            */
            if table = undefined or table:ProcessInput(set, behaviorEvent) = false
                GetDefaultInputTable():ProcessInput(set, behaviorEvent)
            end

            repeat while listenIterator:HasNext()
                currentListener = listenIterator:Next()
                currentListener:TextInput(currentEvent)
            end

            listenIterator:Rewind()
        end
    end

    /*
    This action will forward a touch event to all of the TouchListeners that
    have been added directly to the AndroidInput.
    */
    private action NotifyTouchListeners(TouchEvent event)
        integer counter = 0

        if event:eventType = event:MOVED or event:eventType = event:STATIONARY
            repeat touchListeners:GetSize() times
                touchListeners:Get(counter):ContinuedTouch(event)
                counter = counter + 1
            end

        elseif event:eventType = event:ENDED or event:eventType = event:CANCELLED
            repeat touchListeners:GetSize() times
                touchListeners:Get(counter):EndedTouch(event)
                counter = counter + 1
            end

        elseif event:eventType = event:BEGAN
            repeat touchListeners:GetSize() times
                touchListeners:Get(counter):BeganTouch(event)
                counter = counter + 1
            end

        end
    end

    /*
    This action will add a KeyboardListener to the GameInput. The GameInput will
    notify the KeyboardListener if keys are pressed on the keyboard. This action
    is automatically called by the Game class when needed.
    */
    action AddKeyboardListener(KeyboardListener listener)
        keyboardListeners:Add(listener)
    end

    /*
    This action will remove a KeyboardListener from the GameInput. The GameInput
    will no longer notify the given KeyboardListener of KeyboardEvents. This 
    action is automatically called by the Game class when needed.
    */
    action RemoveKeyboardListener(KeyboardListener listener)
        keyboardListeners:Remove(listener)
    end

    /*
    This action adds a MouseListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseListeners which are added directly to the GameInput will receive the
    event.
    */
    action AddMouseListener(MouseListener listener)
        // Do nothing - Mouse isn't supported on Android.
    end

    /*
    This action adds a MouseMovementListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseMovementListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddMouseMovementListener(MouseMovementListener listener)
        // Do nothing - Mouse isn't supported on Android.
    end

    /*
    This action adds a MouseWheelListener directly to the GameInput. When the
    GameInput receives a mouse event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    MouseWheelListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddMouseWheelListener(MouseWheelListener listener)
        // Do nothing - Mouse isn't supported on Android.
    end

    /*
    This action adds a TouchListener directly to the GameInput. When the
    GameInput receives a touch event, it will first check if any of the items
    added to the layers of the Game can handle the event - if none do, then all
    TouchListeners which are added directly to the GameInput will 
    receive the event.
    */
    action AddTouchListener(TouchListener listener)
        touchListeners:Add(listener)
    end

    /*
    This action removes a MouseListener from the GameInput. It will no longer
    receive mouse events directly from the GameInput.
    */
    action RemoveMouseListener(MouseListener listener)
        // Do nothing - Mouse isn't supported on Android.
    end

    /*
    This action removes a MouseMovementListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    action RemoveMouseMovementListener(MouseMovementListener listener)
        // Do nothing - Mouse isn't supported on Android.
    end

    /*
    This action removes a MouseWheelListener from the GameInput. The listener
    will no longer receive events from the GameInput.
    */
    action RemoveMouseWheelListener(MouseWheelListener listener)
        // Do nothing - Mouse isn't supported on Android.
    end

    /*
    This action removes a TouchListener from the GameInput. The listener will
    no longer receive events from the GameInput.
    */
    action RemoveTouchListener(TouchListener listener)
        touchListeners:Remove(listener)
    end

    /*
    This action will add a TextInputListener to the DesktopInput. The 
    DesktopInput will notify the TextInputListener when the user provides text
    input to the game via the keyboard.
    */
    action AddTextInputListener(TextInputListener listener)
        textInputListeners:Add(listener)
    end

    /*
    This action will remove a TextInputListener from the DesktopInput. The
    DesktopInput will no longer notify the given TextInputListener of 
    TextInputEvents. 
    */
    action RemoveTextInputListener(TextInputListener listener)
        textInputListeners:Remove(listener)
    end

    /*
    This action will add a ResizeListener to the GameInput. The 
    GameInput will notify the ResizeListener when the size of the game space
    changes, e.g. the window changes size or goes fullscreen.
    */
    action AddResizeListener(ResizeListener listener)
        resizeListeners:Add(listener)
    end

    /*
    This action will remove a ResizeListener from the GameInput. The
    GameInput will no longer notify the given ResizeListener of 
    ResizeEvents. 
    */
    action RemoveResizeListener(ResizeListener listener)
        resizeListeners:Remove(listener)
    end

    private system action InitializePlugin(List<TouchEvent> list)

end