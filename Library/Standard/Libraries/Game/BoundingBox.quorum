package Libraries.Game

use Libraries.Compute.Vector3
use Libraries.Compute.Matrix4
use Libraries.Containers.Array
use Libraries.Compute.Math

/*
This class specifies the size and the location of a box that will surround other 
3D objects. The box is used in collision detection.
*/
class BoundingBox

    private Vector3 calcVector
    Math math

    Vector3 minimum
    Vector3 maximum

    Vector3 center
    Vector3 dimensions

    /*
    GetCenter will return a Vector3 object containing the point at the center
    of the BoundingBox.
    */
    action GetCenter returns Vector3
        Vector3 new
        new:Set(center)
        return new
    end

    /*
    GetCenterX will return the X coordinate of the center of the BoundingBox.
    */
    action GetCenterX returns number
        return center:GetX()
    end

    /*
    GetCenterY will return the Y coordinate of the center of the BoundingBox.
    */
    action GetCenterY returns number
        return center:GetY()
    end

    /*
    GetCenterZ will return the Z coordinate of the center of the BoundingBox.
    */
    action GetCenterZ returns number
        return center:GetZ()
    end

    /*
    GetDimensions will return the width, height, and depth of the BoundingBox,
    stored within a Vector3 object.
    */
    action GetDimensions returns Vector3
        Vector3 new
        new:Set(dimensions)
        return new
    end

    /*
    GetWidth will return the width of the BoundingBox.
    */
    action GetWidth returns number
        return dimensions:GetX()
    end

    /*
    GetHeight will return the height of the BoundingBox.
    */
    action GetHeight returns number
        return dimensions:GetY()
    end

    /*
    GetDepth will return the height of the BoundingBox.
    */
    action GetDepth returns number
        return dimensions:GetZ()
    end

    /*
    GetMinimum will return the "minimum" point of the BoundingBox. This is
    specifically the point of the BoundingBox with the lowest X, Y, and Z
    values. The point will be returned as a Vector3.
    */
    action GetMinimum returns Vector3
        return minimum
    end

    /*
    GetMaximum will return the "maximum" point of the BoundingBox. This is
    specifically the point of the BoundingBox with the highest X, Y, and Z
    values. The point will be returned as a Vector3.
    */
    action GetMaximum returns Vector3
        return maximum
    end

    /*
    The Copy action will return a new BoundingBox with the same bounds as this
    BoundingBox.
    */
    action Copy returns BoundingBox
        BoundingBox temp
        temp:Set(me)
        return temp
    end

    /*
    When provided with a BoundingBox as a parameter, the Set action will set the
    BoundingBox to match the bounds of the parameter.
    */
    action Set(BoundingBox bounds)
        Set(bounds:GetMinimum(), bounds:GetMaximum())
    end

    /*
    The Set action can be provided with a pair of vectors to set the bounds of
    this BoundingBox. The first vector should represent the "minimum" point of
    the bounds, or the point with the lowest X, Y, and Z values. The second
    vector should represent the "maximum" point of the bounsd, or the point with
    the highest X, Y, and Z values.
    */
    action Set(Vector3 min, Vector3 max)
        number minX = min:GetX()
        number minY = min:GetY()
        number minZ = min:GetZ()

        number maxX = max:GetX()
        number maxY = max:GetY()
        number maxZ = max:GetZ()

        if maxX < minX
            minX = maxX
            maxX = min:GetX()
        end

        if maxY < minY
            minY = maxY
            maxY = min:GetY()
        end

        if maxZ < minZ
            minZ = maxZ
            maxZ = min:GetZ()
        end

        minimum:Set(minX, minY, minZ)
        maximum:Set(maxX, maxY, maxZ)

        center:Set(minimum)
        center:Add(maximum)
        center:Scale(0.5)

        dimensions:Set(maximum)
        dimensions:Subtract(minimum)
    end

    /*
    Providing the Set action with an array of points will set the BoundingBox to
    the minimum possible size that contains all of the given points.
    */
    action Set(Array<Vector3> points)
       Invalidate()
        
        integer counter = 0
        repeat points:GetSize() times
            Extend(points:Get(counter))
            counter = counter + 1
        end
    end

    /*
    This action will invalidate the BoundingBox, making its minimum values to
    positive infinity and setting its maximum values to negative infinity.
    */
    action Invalidate
        number temp = 0
        temp = temp:GetPositiveInfinityValue()
        minimum:Set(temp, temp, temp)
        temp = temp:GetNegativeInfinityValue()
        maximum:Set(temp, temp, temp)

        center:Set(0, 0, 0)
        dimensions:Set(0, 0, 0)
    end

    /*
    This action will extend the BoundingBox to include the given point.
    */
    action Extend(Vector3 point)

        number tempX = minimum:GetX()
        number tempY = minimum:GetY()
        number tempZ = minimum:GetZ()

        if point:GetX() < tempX
            tempX = point:GetX()
        end

        if point:GetY() < tempY
            tempY = point:GetY()
        end

        if point:GetZ() < tempZ
            tempZ = point:GetZ()
        end

        minimum:Set(tempX, tempY, tempZ)

        tempX = maximum:GetX()
        tempY = maximum:GetY()
        tempZ = maximum:GetZ()

        if point:GetX() > tempX
            tempX = point:GetX()
        end

        if point:GetY() > tempY
            tempY = point:GetY()
        end

        if point:GetZ() > tempZ
            tempZ = point:GetZ()
        end

        maximum:Set(tempX, tempY, tempZ)

        Set(minimum, maximum)
    end

    /*
    This action will extend the BoundingBox to contain the provided bounds.
    */
    action Extend(BoundingBox bounds)
        Extend(bounds:GetMinimum())
        Extend(bounds:GetMaximum())
    end

    /*
    This action will extend the BoundingBox to contain a sphere denoted by a
    center point and a radius.
    */
    action Extend(Vector3 center, number radius)

        number tempX = minimum:GetX()
        number tempY = minimum:GetY()
        number tempZ = minimum:GetZ()

        if (center:GetX() - radius) < tempX
            tempX = center:GetX() - radius
        end

        if (center:GetY() - radius) < tempY
            tempY = center:GetY() - radius
        end

        if (center:GetZ() - radius) < tempZ
            tempZ = center:GetZ() - radius
        end

        minimum:Set(tempX, tempY, tempZ)

        tempX = maximum:GetX()
        tempY = maximum:GetY()
        tempZ = maximum:GetZ()

        if (center:GetX() + radius) > tempX
            tempX = center:GetX() + radius
        end
        
        if (center:GetY() + radius) > tempY
            tempY = center:GetY() + radius
        end

        if (center:GetZ() + radius) > tempZ
            tempZ = center:GetZ() + radius
        end

        maximum:Set(tempX, tempY, tempZ)

        Set(minimum, maximum)
    end

    /*
    This action will extend the BoundingBox to contain the given BoundingBox,
    offset by the given Matrix4.
    */
    action Extend(BoundingBox bounds, Matrix4 transform)
        Vector3 min = bounds:GetMinimum()
        Vector3 max = bounds:GetMaximum()

        calcVector:Set(min:GetX(), min:GetY(), min:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(min:GetX(), min:GetY(), max:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(min:GetX(), max:GetY(), min:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(min:GetX(), max:GetY(), max:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(max:GetX(), min:GetY(), min:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(max:GetX(), min:GetY(), max:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(max:GetX(), max:GetY(), min:GetZ()):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(max:GetX(), max:GetY(), max:GetZ()):Multiply(transform)
        Extend(calcVector)
    end

    /*
    This action will extend the BoundingBox to contain the point at the given
    X, Y, and Z coordinates.
    */
    action Extend(number x, number y, number z)
        number tempX = minimum:GetX()
        number tempY = minimum:GetY()
        number tempZ = minimum:GetZ()

        if x < tempX
            tempX = x
        end

        if y < tempY
            tempY = y
        end

        if z < tempZ
            tempZ = z
        end

        minimum:Set(tempX, tempY, tempZ)

        tempX = maximum:GetX()
        tempY = maximum:GetY()
        tempZ = maximum:GetZ()
        
        if x > tempX
            tempX = x
        end

        if y > tempY
            tempY = y
        end

        if z > tempZ
            tempZ = z
        end

        maximum:Set(tempX, tempY, tempZ)

        Set(minimum, maximum)
    end

    /*
    This action will clear out the values of the BoundingBox, resetting all of
    its values to zero.
    */
    action Clear
        minimum:Set(0, 0, 0)
        maximum:Set(0, 0, 0)
        Set(minimum, maximum)
    end

    /*
    This action will return whether or not the BoundingBox defines a real,
    3-dimensional area. This requires all of the values of the "minimum" point
    to be less than the values of the "maximum" point.
    */
    action IsValid returns boolean
        return minimum:GetX() < maximum:GetX() and minimum:GetY() < maximum:GetY() and minimum:GetZ() < maximum:GetZ()
    end

    /*
    This action will multiply the size of the region of the BoundingBox by the
    values contained in the given Matrix4.
    */
    action Multiply(Matrix4 transform)
        number x0 = minimum:GetX()
        number x1 = maximum:GetX()
        number y0 = minimum:GetY()
        number y1 = maximum:GetY()
        number z0 = minimum:GetZ()
        number z1 = maximum:GetZ()

        Invalidate()
        
        calcVector:Set(x0, y0, z0):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(x0, y0, z1):Multiply(transform)
        Extend(calcVector)
        
        calcVector:Set(x0, y1, z0):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(x0, y1, z1):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(x1, y0, z0):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(x1, y0, z1):Multiply(transform)
        Extend(calcVector)
        
        calcVector:Set(x1, y1, z0):Multiply(transform)
        Extend(calcVector)

        calcVector:Set(x1, y1, z1):Multiply(transform)
        Extend(calcVector)
    end

    /*
    This action will test to see if this BoundingBox totally contains a given
    BoundingBox. If any part of the given BoundingBox is outside this one, it
    will return false.
    */
    action Contains(BoundingBox bounds) returns boolean
        if not IsValid()
            return false
        end

        Vector3 min = bounds:GetMinimum()
        Vector3 max = bounds:GetMaximum()

        return minimum:GetX() <= min:GetX() and minimum:GetY() <= min:GetY() and minimum:GetZ() <= min:GetZ()
            and maximum:GetX() >= max:GetX() and maximum:GetX() >= max:GetY() and maximum:GetZ() >= max:GetZ()
    end

    /*
    This action will test to see if the point indicated by the given Vector3 is
    contained inside this BoundingBox.
    */
    action Contains(Vector3 point) returns boolean
        if not IsValid()
            return false
        end

        return minimum:GetX() <= point:GetX() and minimum:GetY() <= point:GetY() and minimum:GetZ() <= point:GetZ()
            and maximum:GetX() >= point:GetX() and maximum:GetY() >= point:GetY() and maximum:GetZ() >= point:GetZ()
    end

    /*
    This action will test to see if this BoundingBox intersects with the given
    BoundingBox.
    */
    action Intersects(BoundingBox bounds) returns boolean
        if not IsValid()
            return false
        end

        // This is tested using the Separating Axis Theorem.

        number lx = math:AbsoluteValue(center:GetX() - bounds:GetCenter():GetX())
        number sumx = (dimensions:GetX() / 2) + (bounds:GetDimensions():GetX() / 2)

        number ly = math:AbsoluteValue(center:GetY() - bounds:GetCenter():GetY())
        number sumy = (dimensions:GetY() / 2) + (bounds:GetDimensions():GetY() / 2)

        number lz = math:AbsoluteValue(center:GetZ() - bounds:GetCenter():GetZ())
        number sumz = (dimensions:GetZ() / 2) + (bounds:GetDimensions():GetZ() / 2)
        
        return lx <= sumx and ly <= sumy and lz <= sumz
    end

    action CalculateDimensions
        center:Set(minimum)
        center:Add(maximum)
        center:Scale(0.5)

        dimensions:Set(maximum)
        dimensions:Subtract(minimum)
    end

    /*
    This action returns the perimeter of the BoundingBox2D.
    */
    action GetPerimeter returns number
        return 4.0 * ((maximum:GetX() - minimum:GetX()) + (maximum:GetY() - minimum:GetY()) + (maximum:GetZ() - minimum:GetZ()))
    end

    action TestOverlap(BoundingBox boundingBox) returns boolean
        if boundingBox:GetMinimum():GetX() - maximum:GetX() > 0 or boundingBox:GetMinimum():GetY() - maximum:GetY() > 0 or boundingBox:GetMinimum():GetZ() - maximum:GetZ() > 0
            return false
        end

        if minimum:GetX() - boundingBox:GetMaximum():GetX() > 0 or minimum:GetY() - boundingBox:GetMaximum():GetY() > 0 or minimum:GetZ() - boundingBox:GetMaximum():GetZ() > 0
            return false
        end

        return true
    end

    action Combine(BoundingBox box1, BoundingBox box2)
        if box1:GetMinimum():GetX() < box2:GetMinimum():GetX()
            minimum:SetX(box1:GetMinimum():GetX())
        else
            minimum:SetX(box2:GetMinimum():GetX())
        end

        if box1:GetMinimum():GetY() < box2:GetMinimum():GetY()
            minimum:SetY(box1:GetMinimum():GetY())
        else
            minimum:SetY(box2:GetMinimum():GetY())
        end

        if box1:GetMinimum():GetZ() < box2:GetMinimum():GetZ()
            minimum:SetZ(box1:GetMinimum():GetZ())
        else
            minimum:SetZ(box2:GetMinimum():GetZ())
        end

        if box1:GetMaximum():GetX() > box2:GetMaximum():GetX()
            maximum:SetX(box1:GetMaximum():GetX())
        else
            maximum:SetX(box2:GetMaximum():GetX())
        end

        if box1:GetMaximum():GetY() > box2:GetMaximum():GetY()
            maximum:SetY(box1:GetMaximum():GetY())
        else
            maximum:SetY(box2:GetMaximum():GetY())
        end

        if box1:GetMaximum():GetZ() > box2:GetMaximum():GetZ()
            maximum:SetZ(box1:GetMaximum():GetZ())
        else
            maximum:SetZ(box2:GetMaximum():GetZ())
        end
    end

end