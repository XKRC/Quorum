package Libraries.Containers

class TextTree 

    // The children nodes.
    TextTree left = undefined
    TextTree right = undefined

    // The total number of characters stored in the left sub-tree, or the length
    // of the characters in this node if it is a leaf.
    integer weight = 0

    // How many leaves are present in this TextTree.
    integer leafCount = 1

    // How many nodes have to traversed through from here to reach the most
    // distant leaf accessible from this TextTree.
    integer depth = 0

    // How many characters can be stored in a leaf. Must be consistent for all
    // nodes in the structure.
    integer maxLeafSize = 5

    // An array storing values of the fibonacci sequence which have already
    // been calculated. This array is shared among all other ropes produced by
    // this rope, and is used for testing tree imbalances.
    Array<integer> fibonacciArray = undefined

    // The characters stored in this node - empty unless the node is a leaf.
    text characters = ""

    /*
    The Initialize action constructs the TextTree from a starting text value.
    The TextTree will store the given value, which may be retrieved or modified
    using the TextTree's other actions.

    Attribute: Parameter value The value to be stored in this TextTree.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world! What a lovely day!")
    output tree:GetText()
    */
    action Initialize(text value)
        Initialize(value, maxLeafSize)
    end

    /*
    The Initialize action constructs the TextTree from a starting text value.
    The TextTree will store the given value, which may be retrieved or modified
    using the TextTree's other actions. The provided integer parameter will be
    used to set the maximum size of each leaf, in characters.

    Attribute: Parameter value The value to be stored in this TextTree.
    Attribute: Parameter leafSize How many characters should be stored in each leaf of the tree.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree defaultTree
    defaultTree:Initialize("Hello world! What a lovely day!")
    output "The default tree stores text in " + defaultTree:GetLeafSize() + " character chunks."

    TextTree newTree
    newTree:Initialize("Hello world! What a lovely day!", 10)
    output "The new tree stores text in " + newTree:GetLeafSize() + " character chunks."
    */
    action Initialize(text value, integer leafSize)
        Array<integer> fibonacci
        fibonacci:Add(1)
        fibonacci:Add(2)
        Initialize(value, leafSize, fibonacci)
    end

    private action Initialize(text value, integer leafSize, Array<integer> fibonacci)
        maxLeafSize = leafSize
        fibonacciArray = fibonacci
        if value:GetSize() <= maxLeafSize
            characters = value
            weight = value:GetSize()
            leafCount = 1
            depth = 0
        else
            TextTree leftChild
            TextTree rightChild
            leftChild:Initialize(value:GetSubtext(0, value:GetSize() / 2), leafSize, fibonacciArray)
            rightChild:Initialize(value:GetSubtext(value:GetSize() / 2), leafSize, fibonacciArray)
            SetChildren(leftChild, rightChild)
        end
    end

    /*
    If both TextTrees are defined, they are set to be the left and right children.
    If one of the two TextTrees is not defined, this TextTree is set to the values of
    the defined child. If neither is defined, this action does nothing.
    */
    private action SetChildren(TextTree leftChild, TextTree rightChild)
        if leftChild not= undefined 
            if rightChild not= undefined
                left = leftChild
                right = rightChild
                weight = left:GetLength()
                leafCount = left:GetLeafCount() + right:GetLeafCount()
                fibonacciArray = left:GetFibonacciArray()
                SetDepth(left, right)
            else
                weight = leftChild:GetWeight()
                leafCount = leftChild:GetLeafCount()
                characters = leftChild:GetCharacters()
                right = leftChild:GetRight()
                left = leftChild:GetLeft()
                fibonacciArray = leftChild:GetFibonacciArray()
                SetDepth(leftChild:GetLeft(), leftChild:GetRight())
            end
        elseif rightChild not= undefined
            weight = rightChild:GetWeight()
            leafCount = rightChild:GetLeafCount()
            characters = rightChild:GetCharacters()
            left = rightChild:GetLeft()
            right = rightChild:GetRight()
            fibonacciArray = rightChild:GetFibonacciArray()
            SetDepth(rightChild:GetLeft(), rightChild:GetRight())
        end
    end

    private action SetDepth(TextTree left, TextTree right)
        integer max = 0
        if left not= undefined
            max = left:GetDepth() + 1
        end
        if right not= undefined and right:GetDepth() + 1 > max
            max = right:GetDepth() + 1
        end
        depth = max
    end

    private action GetLeft returns TextTree
        return left
    end

    private action GetRight returns TextTree
        return right
    end

    private action GetCharacters returns text
        return characters
    end

    private action GetWeight returns integer
        return weight
    end

    private action GetLeafCount returns integer
        return leafCount
    end

    private action GetDepth returns integer
        return depth
    end

    private action GetFibonacciArray returns Array<integer>
        return fibonacciArray
    end

    private action IsLeaf returns boolean
        return right = undefined and left = undefined
    end

    /*
    Returns the i-th Fibonacci number. Previously calculated results are
    memoized in an Array that is shared between all related TextTree nodes.
    */
    private action GetFibonacciNumber(integer i) returns integer
        if i < fibonacciArray:GetSize()
            return fibonacciArray:Get(i)
        else
            integer index = fibonacciArray:GetSize() - 1
            repeat while index < i
                fibonacciArray:Add(fibonacciArray:Get(index) + fibonacciArray:Get(index - 1))
                index = index + 1
            end

            return fibonacciArray:Get(i)
        end
    end

    /*
    This action retrieves a character at the given index from the tree.

    Attribute: Parameter index The index to retrieve a character from.
    Attribute: Returns A single character located at the given index.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")
    text character = tree:GetCharacter(1)
    output "The character at index 1 is '" + character + "'."
    */
    action GetCharacter(integer index) returns text
        integer weight = GetWeight()
        if index >= weight
            return right:GetCharacter(index - weight) 
        elseif left not= undefined
            return left:GetCharacter(index)
        else
            return characters:GetCharacter(index)
        end
    end

    /*
    The Concatenate action creates a new TextTree where the provided tree is
    appended to the end of this tree. All text in the parameter tree will appear
    after the text from this tree inside the returned value. This tree will not
    change as a result of this action.

    Attribute: Parameter textTree The tree to append to the end of this tree.
    Attribute: Returns A new TextTree which contains the concatenation of the two trees.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree1
    tree1:Initialize("Hello ")

    TextTree tree2
    tree2:Initialize("world!")

    TextTree result = tree1:Concatenate(tree2)
    output result:GetText()
    */
    action Concatenate(TextTree textTree) returns TextTree
        TextTree newRoot

        /* 
        Directly reusing this node is fine so long as TextTrees don't store
        a reference to their parent. If they do store such a reference, then
        a new copy needs to be made because the parent will change due to
        this operation.
        */
        newRoot:SetChildren(me, textTree)

        // Check if tree needs to be rebalanced before returning.
        if newRoot:NeedsBalancing()
            newRoot = newRoot:Balance()
        end

        return newRoot
    end

    /*
    The Concatenate action creates a new TextTree where the provided text is
    appended to the end of this tree's text. This tree will not change as a 
    result of this action.

    Attribute: Parameter value The text to append onto the end of this tree's text.
    Attribute: Returns A new TextTree which contains the concatenation of this tree's text and the parameter text.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello ")

    TextTree result = tree:Concatenate("world!")
    output result:GetText()
    */
    action Concatenate(text value) returns TextTree
        integer textLength = value:GetSize()
        if IsLeaf() and characters:GetSize() + textLength <= maxLeafSize
            // If both TextTrees combined are less than max size, return one new
            // one.
            TextTree textTree
            textTree:Initialize(characters + value, maxLeafSize, fibonacciArray)
            return textTree
        elseif right not= undefined and right:IsLeaf() and right:GetWeight() + textLength <= maxLeafSize
            // If the right child is a leaf that can fit the extra text, make a
            // new node that contains it, and concatenate it to the left child.
            TextTree newRight
            newRight:Initialize(right:GetText() + value, maxLeafSize, fibonacciArray)

            /* 
            Directly reusing the left tree is fine so long as TextTrees don't store
            a reference to their parent. If they do store such a reference, then
            a new copy needs to be made because the parent will change due to
            this operation.
            */
            return left:Concatenate(newRight)
        else
            // Text becomes a new TextTree structure, then concatenated.
            TextTree textTree
            textTree:Initialize(value, maxLeafSize, fibonacciArray)
            return Concatenate(textTree)
        end
    end

    /*
    This action returns true is the tree is imbalanced, or false if it is
    considered balanced. This is typically handled automatically by the tree
    itself.

    Attribute: Returns Whether or not the tree is currently imbalanced.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")
    boolean shouldRebalance = tree:NeedsBalancing()
    output "shouldRebalance is " + shouldRebalance

    if shouldRebalance
        tree:Balance()
    end
    */
    action NeedsBalancing returns boolean
        return GetLeafCount() < GetFibonacciNumber(GetDepth())
    end

    /*
    This action will create a new TextTree containing the balanced contents of
    this tree. This is typically handled automatically by the tree itself
    during other operations which return new TextTrees.

    Attribute: Returns A new TextTree which is balanced and contains the same text as this TextTree.

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")
    boolean shouldRebalance = tree:NeedsBalancing()
    output "shouldRebalance is " + shouldRebalance

    if shouldRebalance
        tree:Balance()
    end
    */
    action Balance returns TextTree
        Array<TextTree> trees
        RecursiveBalance(trees)
        
        TextTree result = undefined
        TextTree current = undefined

        integer counter = 0
        repeat while counter < trees:GetSize()
            current = trees:Get(counter)
            if current not= undefined
                if result not= undefined
                    result = current:Concatenate(result)
                else
                    result = current
                end
            end
            counter = counter + 1
        end

        return result
    end

    private action RecursiveBalance(Array<TextTree> trees)
        if IsLeaf()
            AddTree(me, trees, 0)
        else
            left:RecursiveBalance(trees)
            right:RecursiveBalance(trees)
        end
    end

    private action AddTree(TextTree tree, Array<TextTree> trees, integer startIndex)
        integer counter = startIndex
        TextTree progress = undefined
        TextTree current = undefined
        repeat while GetFibonacciNumber(counter) <= tree:GetLeafCount()
            if trees:GetSize() > counter
                current = trees:Get(counter)
                if current not= undefined
                    if progress = undefined
                        progress = current
                    else
                        progress = current:Concatenate(progress)
                    end
                    trees:Set(counter, undefined)
                end
            else
                // Increase the size of the array.
                trees:Add(undefined)
            end
            counter = counter + 1
        end

        // Correct the last increment to the counter by the loop, which iterates
        // it 1 past where we want it (the last index checked).
        counter = counter - 1

        if progress not= undefined
            // Reinsert the concatenated tree into the structure. This can
            // possibly cascade into further concatenations.
            AddTree(progress:Concatenate(tree), trees, counter)
        else
            // No tree was found at the final index, so place the tree there.
            trees:Set(counter, tree)
        end
    end

    /*
    The Insert action creates a new TextTree and inserts the given text value 
    into the tree at the provided index. The character that was previously
    located at that index will be positioned behind the newly inserted text.
    This action creates a new TextTree, and has no effect on this tree.

    Attribute: Parameter index The index to begin inserting text at in the new tree.
    Attribute: Parameter value The text to be inserted into the new tree.
    Attribute: Returns A new TextTree containing the inserted text.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")

    TextTree insertTree = tree:Insert(11, " of tomorrow")
    output insertTree:GetText()
    */
    action Insert(integer index, text value) returns TextTree
        if index < 0
            alert("I can not insert text at a negative index. I was asked to insert at index " + index + ".")
        end
        if index > GetLength()
            alert("I can not insert text at the given index because it is too large. I was asked to insert at index " + index + 
                ", but the last available index to insert at is " + GetLength() + ".")
        end
        TextTree newTree = RecursiveInsert(index, value)    
        if newTree:NeedsBalancing()
            newTree = newTree:Balance()
        end
        return newTree
    end

    /*
    Recursive call that handles insertion. Separated out from the "original"
    insert call so that the recursive call does not handle certain one-time
    checks (i.e. bound checking, tree balancing).
    */
    private action RecursiveInsert(integer index, text value) returns TextTree
        if IsLeaf()
            text newText = ""
            if index > 0
                newText = characters:GetSubtext(0, index)
            end
            newText = newText + value
            if index < characters:GetSize()
                newText = newText + characters:GetSubtext(index, characters:GetSize())
            end

            TextTree newTree
            newTree:Initialize(newText, maxLeafSize, fibonacciArray)
            return newTree
        else
            TextTree newTree
            TextTree leftChild = left
            TextTree rightChild = right
            if index < weight
                leftChild = left:RecursiveInsert(index, value)
            else
                rightChild = right:RecursiveInsert(index - weight, value)
            end

            newTree:SetChildren(leftChild, rightChild)
            return newTree
        end
    end

    /*
    The Delete action creates a new TextTree which is a copy of this tree, then
    deletes all characters between the two given indices. The first index is
    inclusive (the character at the first index will be deleted) and the second
    index is exclusive (the character at the second index is not deleted).
    This action creates a new TextTree, and has no effect on this tree.

    Attribute: Parameter startIndex The beginning of the range of characters to delete. The character at this index is deleted.
    Attribute: Parameter endIndex The end of the range of characters to delete. A character at this index is not deleted.
    Attribute: Returns A new TextTree containing this tree's text, minus the deleted portion.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")

    TextTree deleteTree = tree:Delete(5, tree:GetLength() - 1)
    output deleteTree:GetText()
    */
    action Delete(integer startIndex, integer endIndex) returns TextTree
        if startIndex < 0
            alert("I can not delete text at a negative index. I was asked to delete between indices " + startIndex + " and " + endIndex + ".")
        end
        if endIndex > GetLength()
            alert("I couldn't delete the text from this TextTree because I was asked to remove more text than was available. I was asked to delete between indices "  
                + startIndex + " and " + endIndex + ", but there are only " + GetLength() + " characters available.")
        end
        TextTree newTree = RecursiveDelete(startIndex, endIndex)
        if newTree = undefined
            TextTree emptyTree
            emptyTree:Initialize("", maxLeafSize, fibonacciArray)
            return emptyTree
        elseif newTree:NeedsBalancing()
            newTree = newTree:Balance()
        end
        return newTree
    end

    /*
    Recursive call that handles deletion. Separated out from the "original"
    delete call so that the recursive call does not handle certain one-time
    checks (i.e. bound checking, tree balancing).
    */
    private action RecursiveDelete(integer startIndex, integer endIndex) returns TextTree
        TextTree newTree

        if not IsLeaf()
            TextTree leftChild = undefined
            TextTree rightChild = undefined

            if left not= undefined and startIndex < weight
                leftChild = left:RecursiveDelete(startIndex, endIndex)
            else
                leftChild = left
            end
            if right not= undefined and endIndex > weight
                rightChild = right:RecursiveDelete(startIndex - weight, endIndex - weight)
            else
                rightChild = right
            end

            if leftChild = undefined and rightChild = undefined
                return undefined
            end

            newTree:SetChildren(leftChild, rightChild)
        else
            integer characterSize = characters:GetSize()
            if startIndex <= 0 and endIndex >= characterSize
                /*
                If all characters are deleted, don't return a new TextTree, just
                return undefined (there should no longer be a leaf at this
                position in the tree).
                */
                return undefined
            else
                text newText = ""
                if startIndex > 0
                    newText = characters:GetSubtext(0, startIndex)
                end
                if endIndex < characterSize
                    newText = newText + characters:GetSubtext(endIndex, characterSize)
                end
                newTree:Initialize(newText, maxLeafSize, fibonacciArray)
            end
        end

        return newTree
    end

    /*
    This action returns the text between the two indices. The first index is
    inclusive (the character at the first index is part of the returned text)
    and the second index is exclusive (the character at the second index is not
    part of the returned text). 

    Attribute: Parameter startIndex The beginning of the range of characters to return. This index is included in the returned value.
    Attribute: Parameter endIndex The end of the range of characters to return. This index is not included in the returned value.
    Attribute: Returns The text between the two indices.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")
    output tree:GetText(1, 10)
    */
    action GetText(integer startIndex, integer endIndex) returns text
        if startIndex < 0
            alert("I can not find text at a negative index. I was asked to search between indices " + startIndex + " and " + endIndex + ".")
        end
        if endIndex > GetLength()
            alert("I couldn't return the text from this TextTree because I was asked to provide more text than was available. I was asked to search between indices "  
                + startIndex + " and " + endIndex + ", but there are only " + GetLength() + " characters available to return.")
        end
        return RecursiveGetText(startIndex, endIndex)
    end

    /*
    Returns the text between the start and end indices, but performs no error
    checking. The original values provided must be valid - to guarantee valid
    original values, use GetText. This action may call itself using extreme
    values (i.e., negative indices or overly large indices), in which case all
    values are bounded to the legal values to retrieve characters from a leaf.
    */
    private action RecursiveGetText(integer startIndex, integer endIndex) returns text

        if IsLeaf()
            if startIndex < 0
                startIndex = 0
            end
            if endIndex > characters:GetSize()
                endIndex = characters:GetSize()
            end
            return characters:GetSubtext(startIndex, endIndex)
        end

        text value = ""
        if startIndex < weight
            value = left:RecursiveGetText(startIndex, endIndex)
            
            if endIndex > weight
                value = value + right:RecursiveGetText(startIndex - weight, endIndex - weight)
            end
        else
            value = right:RecursiveGetText(startIndex - weight, endIndex - weight)
        end

        return value
    end

    /*
    This action returns all of the text stored in the TextTree.

    Attribute: Returns The text stored in this TextTree.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")
    output tree:GetText()
    */
    action GetText returns text
        text leftText = ""
        text rightText = ""
        if IsLeaf()
            return characters
        end

        if left not= undefined
            leftText = left:GetText()
        end
        if right not= undefined
            rightText = right:GetText()
        end
        return leftText + characters + rightText
    end

    /*
    This action returns the length of the text stored in the TextTree.

    Attribute: Returns The length of text in this TextTree.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree tree
    tree:Initialize("Hello world!")
    output "The length of the text in the tree is " + tree:GetLength()
    */
    action GetLength returns integer
        if right not= undefined
            return GetWeight() + right:GetLength()
        end
        return GetWeight()
    end

    /*
    This action sets how many characters should be stored in each leaf of the
    TextTree.

    Attribute: Parameter size How many characters to store in each leaf.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree defaultTree
    defaultTree:Initialize("Hello world! What a lovely day!")
    output "The default tree stores text in " + defaultTree:GetLeafSize() + " character chunks."

    TextTree newTree
    newTree:SetLeafSize(10)
    newTree:Initialize("Hello world! What a lovely day!")
    output "The new tree stores text in " + newTree:GetLeafSize() + " character chunks."
    */
    action SetLeafSize(integer size)
        maxLeafSize = size
        if left not= undefined
            left:SetLeafSize(size)
        end
        if right not= undefined
            right:SetLeafSize(size)
        end
    end

    /*
    This action returns how many characters can be stored in each leaf of the
    TextTree.

    Attribute: Returns How many characters can be stored in each leaf.

    Attribute: Example

    use Libraries.Containers.TextTree

    TextTree defaultTree
    defaultTree:Initialize("Hello world! What a lovely day!")
    output "The default tree stores text in " + defaultTree:GetLeafSize() + " character chunks."

    TextTree newTree
    newTree:SetLeafSize(10)
    newTree:Initialize("Hello world! What a lovely day!")
    output "The new tree stores text in " + newTree:GetLeafSize() + " character chunks."
    */
    action GetLeafSize returns integer
        return maxLeafSize
    end
    
end