package Libraries.Containers.Support
use Libraries.Containers.Iterator
use Libraries.Containers.ByteArray
use Libraries.Compute.BigInteger

/*
    The ByteReader class is designed to read through ByteArrays that 
    store low level byte information from files. The purpose is to provide a 
    way to manipulate bytes efficiently in Quorum, which is necessary for 
    some specialized applications. 

    The values in each position in the array are raw bytes, which means 
    any integer returned is 8 bits in length. As such, they are individually 
    between the numbers -128 and 127.

    The ByteReader can be used to easily retrieve bytes as well as 
    numbers, booleans, and integers.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    
    class Main
        action main
            File file
            file:SetPath("files/Quorum.png")
            ByteArray value = file:ReadBytes()
            ByteReader reader
            reader:SetByteArray(value)
            integer nextByte = reader:NextByteAsInteger()
        end
    end
*/
class ByteReader

    /*The ByteArray that this ByteReader will be reading data from. */
    ByteArray array = undefined
    /*The current position within the array that this ByteArray is reading from.*/
    integer position = 0

    /*
    This action sets the current position within the ByteArray, used for moving
    around the array when reading various amounts of data, such as a byte, two
    bytes, and so on.

    Attribute: Parameter newPosition The array index to set the current reading
    position to.

    Attribute: Returns Returns true if the index is valid and was set properly,
    or false if the index provided is illegal.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    reader:SetPosition(1)
    */
    action SetPosition(integer newPosition) returns boolean
        if newPosition < array:GetSize() and newPosition > -1
            position = newPosition
            return true
        end
        
        return false
    end

    /*
    This action returns the ByteArray that is currently being read from.

    Attribute: Returns Returns the ByteArray that is currently being read from.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    ByteArray copy = reader:GetByteArray()
    */
    action GetByteArray returns ByteArray
        return array
    end

    /*
    This action sets the ByteArray that the ByteReader will read from.

    Attribute: Parameter byteArray The ByteArray to set as the array to read from.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    */
    action SetByteArray(ByteArray byteArray)
        array = byteArray
    end

    /*
    This action returns the current index position from which the ByteReader is
    currently reading.

    Attribute: Returns Returns the index value of the current position within
    the ByteArray.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer location = reader:GetPosition()   
    */
    action GetPosition returns integer
        return position
    end

    /*
    This action reads the ByteArray up until it reads the specified character.
    Once found, it returns all of the characters that were read as a text. For
    example, if you want to read up until 'g', you may read 'd', then 'o', then
    'g', at which point it will stop reading the file and return 'dog'.

    Attribute: Parameter character The character that signifies when you want to
    stop reading the file.
    
    Attribute: Returns Returns the text of all characters read.
    
    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    text word = reader:NextTextUntilCharacter("z")
    */
    action NextTextUntilCharacter(text character) returns text
        text value = ""
        if character = undefined or character:GetSize() = 0
            return undefined
        end

        text constrained = character:GetCharacter(0)
        boolean done = false
        repeat while position < array:GetSize() and not done
            integer byte = array:Get(position)
            text value1 = array:CharacterFromByte(byte)
            if value1 = constrained
                done = true
            end
            value = value + value1
            position = position + 1
        end
        return value
    end

    /*
    This action reads the next amount of characters from the ByteArray, sets
    them to a text object, and then returns it.

    Attribute: Parameter amount The number of characters to read from the ByteArray.

    Attribute: Returns Returns the characters read from the ByteArray as a text.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    text word = reader:NextTextRead(5)
    */
    action NextTextRead(integer amount) returns text
        text value = ""
        integer remainder = amount
        repeat while position < array:GetSize() and remainder > 0
            integer byte = array:Get(position)
            text value1 = array:CharacterFromByte(byte)
            value = value + value1
            position = position + 1
            remainder = remainder - 1
        end
        return value
    end

    /*
    This action reads the next byte from the ByteArray and converts it to
    an integer.

    Attribute: Returns Returns the next byte in the ByteArray as an integer.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer value = reader:NextByteAsInteger()
    */
    action NextByteAsInteger returns integer
        integer byte = array:Get(position)
        position = position + 1
        return byte
    end

    /*
    This action reads the next byte from the ByteArray and converts it to an
    unsigned integer.

    Attribute: Returns Returns the next byte in the ByteArray as an unsigned integer.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer value = reader:NextByteAsUnsignedInteger()
    */
    action NextByteAsUnsignedInteger returns integer
        integer byte = array:Get(position)
        position = position + 1
        integer value = array:UnsignedIntegerFromByte(byte)

        return value
    end

    /*
    This action reads the next byte from the ByteArray and converts it to a boolean.

    Attribute: Returns Returns the next byte in the ByteArray as a boolean value.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    boolean value = reader:NextByteAsBoolean()
    */
    action NextByteAsBoolean returns boolean
        integer byte = array:Get(position)
        position = position + 1
        if byte = 0
            return false
        else
            return true
        end
    end

    /*
    This action reads the next two bytes from the ByteArray and converts them to
    an integer.

    Attribute: Returns Returns the next two bytes in the ByteArray as an integer.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer value = reader:NextTwoByteInteger()
    */
    action NextTwoByteInteger returns integer
        integer byte1 = 0
        integer byte2 = 0
        if(position >= 0 and position < array:GetSize())
            byte1 = array:Get(position)
        end
        if(position+1 >= 0 and position+1 < array:GetSize())
            byte2 = array:Get(position+1)
        end
        integer value = array:IntegerFromTwoBytes(byte1, byte2)

        position = position + 2
        return value
    end

    /*
    This action reads the next two bytes from the ByteArray and converts them to
    an unsigned integer.

    Attribute: Returns Returns the next two bytes in the ByteArray as an unsigned
    integer.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer value = reader:NextTwoBytesUnsignedInteger()
    */
    action NextTwoByteUnsignedInteger returns integer
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer value = array:UnsignedIntegerFromTwoBytes(byte1, byte2)

        position = position + 2
        return value
    end

    /*
    This action reads the next eight bytes from the ByteArray and converts them to
    a BigInteger.

    Attribute: Returns Returns the next eight bytes in the ByteArray as a BigInteger.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    use Libraries.Compute.BigInteger
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    BigInteger largeNumber = reader:NextLong()
    */
    action NextLong returns BigInteger
        BigInteger bigint

        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)
        integer byte5 = array:Get(position + 4)
        integer byte6 = array:Get(position + 5)
        integer byte7 = array:Get(position + 6)
        integer byte8 = array:Get(position + 7)
        text value = array:TextFromEightBytes(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)

        bigint:SetValue(value, 10)

        position = position + 8
        return bigint
    end

    /*
    This action reads the next four bytes from the ByteArray and converts them to
    an integer.

    Attribute: Returns Returns the next four bytes in the ByteArray as an integer.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer value = reader:NextInteger()
    */
    action NextInteger returns integer
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)

        integer value = array:IntegerFromFourBytes(byte1, byte2, byte3, byte4)
        position = position + 4
        return value
    end

    /*
    This action reads the next four bytes from the ByteArray and converts them to
    a number.

    Attribute: Returns Returns the next four bytes in the ByteArray as a number.
    
    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    number value = reader:NextNumber4Byte()
    */
    action NextNumber4Byte returns number
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)

        number value = array:NumberFromFourBytes(byte1, byte2, byte3, byte4)
        position = position + 4
        return value
    end

    /*
    This action reads the next eight bytes from the ByteArray and converts them to
    a number.

    Attribute: Returns Returns the next eight bytes in the ByteArray as a number.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    number value = reader:NextNumber()
    */
    action NextNumber returns number
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)
        integer byte5 = array:Get(position + 4)
        integer byte6 = array:Get(position + 5)
        integer byte7 = array:Get(position + 6)
        integer byte8 = array:Get(position + 7)

        number value = array:NumberFromEightBytes(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)
        position = position + 8
        return value
    end

    /*
    This action reads the next four bytes from the ByteArray and converts them to
    a signed integer.

    Attribute: Returns Returns the next four bytes in the ByteArray as a signed
    integer.
    
    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    integer value = reader:NextIntegerConvertFromUnsigned()
    */
    action NextIntegerConvertFromUnsigned returns integer
        integer byte1 = array:Get(position)
        integer byte2 = array:Get(position + 1)
        integer byte3 = array:Get(position + 2)
        integer byte4 = array:Get(position + 3)

        integer value = array:SignedIntegerFromFourUnsignedBytes(byte1, byte2, byte3, byte4)
        position = position + 4
        return value
    end

    /*
    This action creates a sub-array of the ByteArray, starting from the current
    position, and then moves the position to read from to the next position in 
    the array that comes after the end of this sub-array.

    Attribute: Parameter amount The number of items to grab from the ByteArray
    and store in the new sub-array.
    
    Attribute: Returns Returns a sub-array of the ByteArray.
    
    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    ByteArray small = reader:NextSubArray(1)
    */
    action NextSubArray(integer amount) returns ByteArray
        ByteArray value = array:GetSubArray(position, position + amount)
        position = position + amount
        return value
    end

    /*
    This action moves the current array reading position by the amount specified,
    either forward or backward. Useful for skipping data that you do not need
    to read.
   
    Attribute: Parameter amount The number of items to skip over in the ByteArray.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    reader:SkipBytes(10)
    */
    action SkipBytes(integer amount)
        position = position + amount
    end

    /*
    This action checks if there are enough bytes remaining in the ByteArray to
    be assigned to an integer.

    Attribute: Returns Returns true if there are at least four bytes still in
    the array, and false if not.

    Attribute: Example
    use Libraries.Containers.Support.ByteReader
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader
    reader:SetByteArray(value)
    boolean canRead = reader:HasNextInteger()
    */
    action HasNextInteger returns boolean
        if position + 4 < array:GetSize()
            return true
        end

        return false
    end
end